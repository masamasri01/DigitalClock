

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jul 31 00:46:32 2023

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 1.45
    49                           ; Generated 16/11/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F4620 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  001D68                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _LCD_INIT_STRING
    88  001D68  28                 	db	40
    89  001D69  0C                 	db	12
    90  001D6A  01                 	db	1
    91  001D6B  06                 	db	6
    92                           
    93                           	psect	smallconst
    94  001000                     __psmallconst:
    95                           	opt stack 0
    96  001000  00                 	db	0
    97  001001                     _dpowers:
    98                           	opt stack 0
    99  001001  0001               	dw	1
   100  001003  000A               	dw	10
   101  001005  0064               	dw	100
   102  001007  03E8               	dw	1000
   103  001009  2710               	dw	10000
   104  00100B                     __end_of_dpowers:
   105                           	opt stack 0
   106  0000                     _PORTEbits	set	3972
   107  0000                     _TXREG	set	4013
   108  0000                     _PIR1bits	set	3998
   109  0000                     _TRISCbits	set	3988
   110  0000                     _RCREG	set	4014
   111  0000                     _RCSTAbits	set	4011
   112  0000                     _RCSTA	set	4011
   113  0000                     _TXSTAbits	set	4012
   114  0000                     _SPBRGH	set	4016
   115  0000                     _SPBRG	set	4015
   116  0000                     _TXSTA	set	4012
   117  0000                     _BAUDCONbits	set	4024
   118  0000                     _T3CONbits	set	4017
   119  0000                     _PORTCbits	set	3970
   120  0000                     _RCONbits	set	4048
   121  0000                     _INTCON3bits	set	4080
   122  0000                     _INTCON2bits	set	4081
   123  0000                     _INTCON3	set	4080
   124  0000                     _INTCON2	set	4081
   125  0000                     _T1CONbits	set	4045
   126  0000                     _T0CONbits	set	4053
   127  0000                     _T0CON	set	4053
   128  0000                     _TMR0L	set	4054
   129  0000                     _TMR0H	set	4055
   130  0000                     _TRISE	set	3990
   131  0000                     _TRISD	set	3989
   132  0000                     _TRISA	set	3986
   133  0000                     _TRISC	set	3988
   134  0000                     _TRISB	set	3987
   135  0000                     _ADCON1	set	4033
   136  0000                     _ADCON0	set	4034
   137  0000                     _INTCONbits	set	4082
   138  00100B                     STR_6:
   139  00100B  41                 	db	65	;'A'
   140  00100C  6C                 	db	108	;'l'
   141  00100D  61                 	db	97	;'a'
   142  00100E  72                 	db	114	;'r'
   143  00100F  6D                 	db	109	;'m'
   144  001010  3A                 	db	58	;':'
   145  001011  20                 	db	32
   146  001012  25                 	db	37
   147  001013  30                 	db	48	;'0'
   148  001014  32                 	db	50	;'2'
   149  001015  75                 	db	117	;'u'
   150  001016  3A                 	db	58	;':'
   151  001017  25                 	db	37
   152  001018  30                 	db	48	;'0'
   153  001019  32                 	db	50	;'2'
   154  00101A  75                 	db	117	;'u'
   155  00101B  3A                 	db	58	;':'
   156  00101C  25                 	db	37
   157  00101D  30                 	db	48	;'0'
   158  00101E  32                 	db	50	;'2'
   159  00101F  75                 	db	117	;'u'
   160  001020  00                 	db	0
   161  001021                     STR_7:
   162  001021  54                 	db	84	;'T'
   163  001022  69                 	db	105	;'i'
   164  001023  6D                 	db	109	;'m'
   165  001024  65                 	db	101	;'e'
   166  001025  3A                 	db	58	;':'
   167  001026  20                 	db	32
   168  001027  25                 	db	37
   169  001028  30                 	db	48	;'0'
   170  001029  32                 	db	50	;'2'
   171  00102A  75                 	db	117	;'u'
   172  00102B  3A                 	db	58	;':'
   173  00102C  25                 	db	37
   174  00102D  30                 	db	48	;'0'
   175  00102E  32                 	db	50	;'2'
   176  00102F  75                 	db	117	;'u'
   177  001030  3A                 	db	58	;':'
   178  001031  25                 	db	37
   179  001032  30                 	db	48	;'0'
   180  001033  32                 	db	50	;'2'
   181  001034  75                 	db	117	;'u'
   182  001035  00                 	db	0
   183  001036                     STR_3:
   184  001036  25                 	db	37
   185  001037  30                 	db	48	;'0'
   186  001038  32                 	db	50	;'2'
   187  001039  75                 	db	117	;'u'
   188  00103A  3A                 	db	58	;':'
   189  00103B  25                 	db	37
   190  00103C  30                 	db	48	;'0'
   191  00103D  32                 	db	50	;'2'
   192  00103E  75                 	db	117	;'u'
   193  00103F  3A                 	db	58	;':'
   194  001040  25                 	db	37
   195  001041  30                 	db	48	;'0'
   196  001042  32                 	db	50	;'2'
   197  001043  75                 	db	117	;'u'
   198  001044  20                 	db	32
   199  001045  25                 	db	37
   200  001046  73                 	db	115	;'s'
   201  001047  00                 	db	0
   202  001048                     STR_11:
   203  001048  4D                 	db	77	;'M'
   204  001049  61                 	db	97	;'a'
   205  00104A  73                 	db	115	;'s'
   206  00104B  61                 	db	97	;'a'
   207  00104C  20                 	db	32
   208  00104D  26                 	db	38
   209  00104E  20                 	db	32
   210  00104F  53                 	db	83	;'S'
   211  001050  61                 	db	97	;'a'
   212  001051  6C                 	db	108	;'l'
   213  001052  73                 	db	115	;'s'
   214  001053  61                 	db	97	;'a'
   215  001054  62                 	db	98	;'b'
   216  001055  65                 	db	101	;'e'
   217  001056  65                 	db	101	;'e'
   218  001057  6C                 	db	108	;'l'
   219  001058  00                 	db	0
   220  001059                     STR_8:
   221  001059  41                 	db	65	;'A'
   222  00105A  6C                 	db	108	;'l'
   223  00105B  61                 	db	97	;'a'
   224  00105C  72                 	db	114	;'r'
   225  00105D  6D                 	db	109	;'m'
   226  00105E  20                 	db	32
   227  00105F  53                 	db	83	;'S'
   228  001060  74                 	db	116	;'t'
   229  001061  61                 	db	97	;'a'
   230  001062  74                 	db	116	;'t'
   231  001063  65                 	db	101	;'e'
   232  001064  3A                 	db	58	;':'
   233  001065  20                 	db	32
   234  001066  00                 	db	0
   235  001067                     STR_12:
   236  001067  28                 	db	40
   237  001068  6E                 	db	110	;'n'
   238  001069  75                 	db	117	;'u'
   239  00106A  6C                 	db	108	;'l'
   240  00106B  6C                 	db	108	;'l'
   241  00106C  29                 	db	41
   242  00106D  00                 	db	0
   243  00106E                     STR_1:
   244  00106E  48                 	db	72	;'H'
   245  00106F  65                 	db	101	;'e'
   246  001070  6C                 	db	108	;'l'
   247  001071  6C                 	db	108	;'l'
   248  001072  6F                 	db	111	;'o'
   249  001073  0A                 	db	10
   250  001074  00                 	db	0
   251  001075                     STR_9:
   252  001075  4F                 	db	79	;'O'
   253  001076  4E                 	db	78	;'N'
   254  001077  20                 	db	32
   255  001078  00                 	db	0
   256  001079                     STR_5:
   257  001079  4F                 	db	79	;'O'
   258  00107A  46                 	db	70	;'F'
   259  00107B  46                 	db	70	;'F'
   260  00107C  00                 	db	0
   261  00107D                     STR_4:
   262  00107D  4F                 	db	79	;'O'
   263  00107E  4E                 	db	78	;'N'
   264  00107F  00                 	db	0
   265  0000                     
   266                           ; #config settings
   267  001080  00                 	db	0	; dummy byte at the end
   268  0000                     
   269                           	psect	cinit
   270  001BAA                     __pcinit:
   271                           	opt stack 0
   272  001BAA                     start_initialization:
   273                           	opt stack 0
   274  001BAA                     __initialization:
   275                           	opt stack 0
   276                           
   277                           ; Initialize objects allocated to COMRAM (4 bytes)
   278                           ; load TBLPTR registers with __pidataCOMRAM
   279  001BAA  0E68               	movlw	low __pidataCOMRAM
   280  001BAC  6EF6               	movwf	tblptrl,c
   281  001BAE  0E1D               	movlw	high __pidataCOMRAM
   282  001BB0  6EF7               	movwf	tblptrh,c
   283  001BB2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   284  001BB4  6EF8               	movwf	tblptru,c
   285  001BB6  EE00  F051         	lfsr	0,__pdataCOMRAM
   286  001BBA  EE10 F004          	lfsr	1,4
   287  001BBE                     copy_data0:
   288  001BBE  0009               	tblrd		*+
   289  001BC0  CFF5 FFEE          	movff	tablat,postinc0
   290  001BC4  50E5               	movf	postdec1,w,c
   291  001BC6  50E1               	movf	fsr1l,w,c
   292  001BC8  E1FA               	bnz	copy_data0
   293                           
   294                           ; Clear objects allocated to BANK0 (19 bytes)
   295  001BCA  EE00  F0B9         	lfsr	0,__pbssBANK0
   296  001BCE  0E13               	movlw	19
   297  001BD0                     clear_0:
   298  001BD0  6AEE               	clrf	postinc0,c
   299  001BD2  06E8               	decf	wreg,f,c
   300  001BD4  E1FD               	bnz	clear_0
   301  001BD6                     end_of_initialization:
   302                           	opt stack 0
   303  001BD6                     __end_of__initialization:
   304                           	opt stack 0
   305  001BD6  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   306  001BD8  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   307  001BDA  0100               	movlb	0
   308  001BDC  EF41  F008         	goto	_main	;jump to C main() function
   309                           tblptru	equ	0xFF8
   310                           tblptrh	equ	0xFF7
   311                           tblptrl	equ	0xFF6
   312                           tablat	equ	0xFF5
   313                           postinc0	equ	0xFEE
   314                           wreg	equ	0xFE8
   315                           postdec1	equ	0xFE5
   316                           fsr1l	equ	0xFE1
   317                           
   318                           	psect	dataCOMRAM
   319  000051                     __pdataCOMRAM:
   320                           	opt stack 0
   321  000051                     _LCD_INIT_STRING:
   322                           	opt stack 0
   323  000051                     	ds	4
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           tblptrl	equ	0xFF6
   327                           tablat	equ	0xFF5
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           postdec1	equ	0xFE5
   331                           fsr1l	equ	0xFE1
   332                           
   333                           	psect	bssBANK0
   334  0000B9                     __pbssBANK0:
   335                           	opt stack 0
   336  0000B9                     _toggle_alarm_flag:
   337                           	opt stack 0
   338  0000B9                     	ds	1
   339  0000BA                     _a_flag:
   340                           	opt stack 0
   341  0000BA                     	ds	1
   342  0000BB                     _s_flag:
   343                           	opt stack 0
   344  0000BB                     	ds	1
   345  0000BC                     _m_flag:
   346                           	opt stack 0
   347  0000BC                     	ds	1
   348  0000BD                     _h_flag:
   349                           	opt stack 0
   350  0000BD                     	ds	1
   351  0000BE                     _first_digit:
   352                           	opt stack 0
   353  0000BE                     	ds	1
   354  0000BF                     _small_w_flag:
   355                           	opt stack 0
   356  0000BF                     	ds	1
   357  0000C0                     _capital_w_flag:
   358                           	opt stack 0
   359  0000C0                     	ds	1
   360  0000C1                     _read_alarm_flag:
   361                           	opt stack 0
   362  0000C1                     	ds	1
   363  0000C2                     _read_flag:
   364                           	opt stack 0
   365  0000C2                     	ds	1
   366  0000C3                     _read_time_flag:
   367                           	opt stack 0
   368  0000C3                     	ds	1
   369  0000C4                     _start_recieved:
   370                           	opt stack 0
   371  0000C4                     	ds	1
   372  0000C5                     _alarm_enabled:
   373                           	opt stack 0
   374  0000C5                     	ds	1
   375  0000C6                     _alarm_seconds:
   376                           	opt stack 0
   377  0000C6                     	ds	1
   378  0000C7                     _alarm_minutes:
   379                           	opt stack 0
   380  0000C7                     	ds	1
   381  0000C8                     _alarm_hours:
   382                           	opt stack 0
   383  0000C8                     	ds	1
   384  0000C9                     _seconds:
   385                           	opt stack 0
   386  0000C9                     	ds	1
   387  0000CA                     _minutes:
   388                           	opt stack 0
   389  0000CA                     	ds	1
   390  0000CB                     _hours:
   391                           	opt stack 0
   392  0000CB                     	ds	1
   393                           tblptru	equ	0xFF8
   394                           tblptrh	equ	0xFF7
   395                           tblptrl	equ	0xFF6
   396                           tablat	equ	0xFF5
   397                           postinc0	equ	0xFEE
   398                           wreg	equ	0xFE8
   399                           postdec1	equ	0xFE5
   400                           fsr1l	equ	0xFE1
   401                           
   402                           	psect	cstackBANK0
   403  000080                     __pcstackBANK0:
   404                           	opt stack 0
   405  000080                     updateAlarmDisplay@alarm_string:
   406                           	opt stack 0
   407  000080                     updateClockDisplay@Buffer:
   408                           	opt stack 0
   409                           
   410                           ; 32 bytes @ 0x0
   411  000080                     	ds	32
   412  0000A0                     main@alarm_response:
   413                           	opt stack 0
   414                           
   415                           ; 13 bytes @ 0x20
   416  0000A0                     	ds	13
   417  0000AD                     main@time_response:
   418                           	opt stack 0
   419                           
   420                           ; 9 bytes @ 0x2D
   421  0000AD                     	ds	9
   422  0000B6                     _main$551:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x36
   426  0000B6                     	ds	2
   427  0000B8                     main@c:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x38
   431  0000B8                     	ds	1
   432                           tblptru	equ	0xFF8
   433                           tblptrh	equ	0xFF7
   434                           tblptrl	equ	0xFF6
   435                           tablat	equ	0xFF5
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           postdec1	equ	0xFE5
   439                           fsr1l	equ	0xFE1
   440                           
   441                           	psect	cstackCOMRAM
   442  000001                     __pcstackCOMRAM:
   443                           	opt stack 0
   444  000001                     ??_highIsr:
   445  000001                     
   446                           ; 1 bytes @ 0x0
   447  000001                     	ds	18
   448  000013                     ??_lowIsr:
   449                           
   450                           ; 1 bytes @ 0x12
   451  000013                     	ds	21
   452  000028                     ??_isdigit:
   453  000028                     ??_delay_cycles:
   454  000028                     ?_isDigit:
   455                           	opt stack 0
   456  000028                     ?___wmul:
   457                           	opt stack 0
   458  000028                     ?___lwdiv:
   459                           	opt stack 0
   460  000028                     setupSerial@dummy:
   461                           	opt stack 0
   462  000028                     read_byte_no_lib@c:
   463                           	opt stack 0
   464  000028                     send_byte_no_lib@c:
   465                           	opt stack 0
   466  000028                     delay_ms@n:
   467                           	opt stack 0
   468  000028                     ___wmul@multiplier:
   469                           	opt stack 0
   470  000028                     ___lwdiv@dividend:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x27
   474  000028                     	ds	1
   475  000029                     _isdigit$1321:
   476                           	opt stack 0
   477  000029                     send_string_no_lib@p:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x28
   481  000029                     	ds	1
   482  00002A                     isDigit@c:
   483                           	opt stack 0
   484  00002A                     isdigit@c:
   485                           	opt stack 0
   486  00002A                     delay_ms@x:
   487                           	opt stack 0
   488  00002A                     ___wmul@multiplicand:
   489                           	opt stack 0
   490  00002A                     ___lwdiv@divisor:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x29
   494  00002A                     	ds	1
   495  00002B                     delay_cycles@n:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x2A
   499  00002B                     	ds	1
   500  00002C                     delay_cycles@x:
   501                           	opt stack 0
   502  00002C                     ___wmul@product:
   503                           	opt stack 0
   504  00002C                     ___lwdiv@quotient:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x2B
   508  00002C                     	ds	2
   509  00002E                     ??_lcd_send_nibble:
   510  00002E                     ___lwdiv@counter:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x2D
   514  00002E                     	ds	1
   515  00002F                     ?___lwmod:
   516                           	opt stack 0
   517  00002F                     lcd_send_nibble@n:
   518                           	opt stack 0
   519  00002F                     ___lwmod@dividend:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x2E
   523  00002F                     	ds	1
   524  000030                     lcd_send_byte@n:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x2F
   528  000030                     	ds	1
   529  000031                     lcd_send_byte@cm_data:
   530                           	opt stack 0
   531  000031                     ___lwmod@divisor:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x30
   535  000031                     	ds	1
   536  000032                     lcd_init@i:
   537                           	opt stack 0
   538  000032                     lcd_gotoxy@y:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x31
   542  000032                     	ds	1
   543  000033                     lcd_gotoxy@x:
   544                           	opt stack 0
   545  000033                     ___lwmod@counter:
   546                           	opt stack 0
   547                           
   548                           ; 1 bytes @ 0x32
   549  000033                     	ds	1
   550  000034                     ?_sprintf:
   551                           	opt stack 0
   552  000034                     lcd_gotoxy@address:
   553                           	opt stack 0
   554  000034                     sprintf@sp:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x33
   558  000034                     	ds	1
   559  000035                     lcd_putc@c:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x34
   563  000035                     	ds	1
   564  000036                     lcd_puts@s:
   565                           	opt stack 0
   566  000036                     sprintf@f:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x35
   570  000036                     	ds	2
   571  000038                     _updateAlarmStateDisplay$648:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x37
   575  000038                     	ds	8
   576  000040                     ??_sprintf:
   577                           
   578                           ; 1 bytes @ 0x3F
   579  000040                     	ds	4
   580  000044                     sprintf@flag:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x43
   584  000044                     	ds	1
   585  000045                     sprintf@val:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x44
   589  000045                     	ds	2
   590  000047                     sprintf@prec:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x46
   594  000047                     	ds	1
   595  000048                     sprintf@ap:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x47
   599  000048                     	ds	2
   600  00004A                     sprintf@cp:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x49
   604  00004A                     	ds	2
   605  00004C                     sprintf@len:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x4B
   609  00004C                     	ds	2
   610  00004E                     sprintf@width:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x4D
   614  00004E                     	ds	2
   615  000050                     sprintf@c:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x4F
   619  000050                     	ds	1
   620  000051                     tblptru	equ	0xFF8
   621                           tblptrh	equ	0xFF7
   622                           tblptrl	equ	0xFF6
   623                           tablat	equ	0xFF5
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           postdec1	equ	0xFE5
   627                           fsr1l	equ	0xFE1
   628                           
   629                           ; 1 bytes @ 0x50
   630 ;;
   631 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   632 ;;
   633 ;; *************** function _main *****************
   634 ;; Defined at:
   635 ;;		line 129 in file "DigitalClock.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;		None
   638 ;; Auto vars:     Size  Location     Type
   639 ;;  alarm_respon   13   32[BANK0 ] unsigned char [13]
   640 ;;  time_respons    9   45[BANK0 ] unsigned char [9]
   641 ;;  c               1   56[BANK0 ] unsigned char 
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   652 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   654 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   655 ;;Total ram usage:       25 bytes
   656 ;; Hardware stack levels required when called:    9
   657 ;; This function calls:
   658 ;;		_DisplayNames
   659 ;;		_disableInterrupts
   660 ;;		_enableInterrupts
   661 ;;		_initTimers01
   662 ;;		_initialization
   663 ;;		_isDigit
   664 ;;		_lcd_init
   665 ;;		_read_byte_no_lib
   666 ;;		_send_string_no_lib
   667 ;;		_setupPorts
   668 ;;		_setupSerial
   669 ;;		_sprintf
   670 ;;		_updateAlarmDisplay
   671 ;;		_updateAlarmStateDisplay
   672 ;;		_updateClockDisplay
   673 ;; This function is called by:
   674 ;;		Startup code after reset
   675 ;; This function uses a non-reentrant model
   676 ;;
   677                           
   678                           	psect	text0
   679  001082                     __ptext0:
   680                           	opt stack 0
   681  001082                     _main:
   682                           	opt stack 22
   683                           
   684                           ;DigitalClock.c: 130: setupSerial();
   685                           
   686                           ;incstack = 0
   687  001082  EC07  F00E         	call	_setupSerial	;wreg free
   688                           
   689                           ;DigitalClock.c: 131: initTimers01();
   690  001086  EC41  F00E         	call	_initTimers01	;wreg free
   691                           
   692                           ;DigitalClock.c: 132: setupPorts();
   693  00108A  EC84  F00E         	call	_setupPorts	;wreg free
   694                           
   695                           ;DigitalClock.c: 133: lcd_init();
   696  00108E  EC1C  F00C         	call	_lcd_init	;wreg free
   697                           
   698                           ;DigitalClock.c: 134: initialization();
   699  001092  ECB9  F00D         	call	_initialization	;wreg free
   700                           
   701                           ;DigitalClock.c: 135: DisplayNames();
   702  001096  EC91  F00E         	call	_DisplayNames	;wreg free
   703                           
   704                           ;DigitalClock.c: 136: send_string_no_lib("Hello\n");
   705  00109A  0E6E               	movlw	low STR_1
   706  00109C  6E29               	movwf	send_string_no_lib@p,c
   707  00109E  0E10               	movlw	high STR_1
   708  0010A0  6E2A               	movwf	send_string_no_lib@p+1,c
   709  0010A2  EC4D  F00C         	call	_send_string_no_lib	;wreg free
   710  0010A6                     l121:
   711  0010A6  0004               	clrwdt		;# 
   712                           
   713                           ;DigitalClock.c: 139: updateAlarmDisplay();
   714  0010A8  EC7C  F00D         	call	_updateAlarmDisplay	;wreg free
   715                           
   716                           ;DigitalClock.c: 140: updateAlarmStateDisplay();
   717  0010AC  EC9B  F00D         	call	_updateAlarmStateDisplay	;wreg free
   718                           
   719                           ;DigitalClock.c: 141: updateClockDisplay();
   720  0010B0  EC5D  F00D         	call	_updateClockDisplay	;wreg free
   721                           
   722                           ;DigitalClock.c: 144: unsigned char c=read_byte_no_lib();
   723  0010B4  ECAA  F00E         	call	_read_byte_no_lib	;wreg free
   724  0010B8  0100               	movlb	0	; () banked
   725  0010BA  6FB8               	movwf	main@c& (0+255),b
   726                           
   727                           ; BSR set to: 0
   728                           ;DigitalClock.c: 147: if (c == '[') {
   729  0010BC  0E5B               	movlw	91
   730  0010BE  19B8               	xorwf	main@c& (0+255),w,b
   731  0010C0  A4D8               	btfss	status,2,c
   732  0010C2  D002               	goto	l122
   733                           
   734                           ; BSR set to: 0
   735                           ;DigitalClock.c: 148: start_recieved=1;
   736  0010C4  0E01               	movlw	1
   737  0010C6  D1BE               	goto	L4
   738  0010C8                     l122:
   739                           
   740                           ; BSR set to: 0
   741                           ;DigitalClock.c: 152: else if ((c=='r')&& (start_recieved==1)){
   742                           
   743                           ; BSR set to: 0
   744  0010C8  0E72               	movlw	114
   745  0010CA  19B8               	xorwf	main@c& (0+255),w,b
   746  0010CC  A4D8               	btfss	status,2,c
   747  0010CE  D008               	goto	l124
   748                           
   749                           ; BSR set to: 0
   750  0010D0  05C4               	decf	_start_recieved& (0+255),w,b
   751  0010D2  A4D8               	btfss	status,2,c
   752  0010D4  D005               	goto	l124
   753                           
   754                           ; BSR set to: 0
   755                           ;DigitalClock.c: 153: start_recieved=2;
   756  0010D6  0E02               	movlw	2
   757  0010D8  6FC4               	movwf	_start_recieved& (0+255),b
   758                           
   759                           ;DigitalClock.c: 154: read_flag=1;
   760  0010DA  0E01               	movlw	1
   761  0010DC  6FC2               	movwf	_read_flag& (0+255),b
   762                           
   763                           ;DigitalClock.c: 155: }
   764  0010DE  D7E3               	goto	l121
   765  0010E0                     l124:
   766                           
   767                           ; BSR set to: 0
   768                           ;DigitalClock.c: 156: else if ((c=='t')&& (start_recieved==2)){
   769                           
   770                           ; BSR set to: 0
   771  0010E0  0E74               	movlw	116
   772  0010E2  19B8               	xorwf	main@c& (0+255),w,b
   773  0010E4  A4D8               	btfss	status,2,c
   774  0010E6  D008               	goto	l126
   775                           
   776                           ; BSR set to: 0
   777  0010E8  0E02               	movlw	2
   778  0010EA  19C4               	xorwf	_start_recieved& (0+255),w,b
   779  0010EC  A4D8               	btfss	status,2,c
   780  0010EE  D004               	goto	l126
   781                           
   782                           ; BSR set to: 0
   783                           ;DigitalClock.c: 157: start_recieved=3;
   784  0010F0  0E03               	movlw	3
   785  0010F2  6FC4               	movwf	_start_recieved& (0+255),b
   786                           
   787                           ;DigitalClock.c: 158: read_time_flag=1;
   788  0010F4  0E01               	movlw	1
   789  0010F6  D039               	goto	L2
   790  0010F8                     l126:
   791                           
   792                           ; BSR set to: 0
   793                           ;DigitalClock.c: 162: else if ((c=='a')&& (start_recieved==2)&&read_flag==1){
   794                           
   795                           ; BSR set to: 0
   796  0010F8  0E61               	movlw	97
   797  0010FA  19B8               	xorwf	main@c& (0+255),w,b
   798  0010FC  A4D8               	btfss	status,2,c
   799  0010FE  D00D               	goto	l128
   800                           
   801                           ; BSR set to: 0
   802  001100  0E02               	movlw	2
   803  001102  19C4               	xorwf	_start_recieved& (0+255),w,b
   804  001104  A4D8               	btfss	status,2,c
   805  001106  D009               	goto	l128
   806                           
   807                           ; BSR set to: 0
   808  001108  05C2               	decf	_read_flag& (0+255),w,b
   809  00110A  A4D8               	btfss	status,2,c
   810  00110C  D006               	goto	l128
   811                           
   812                           ; BSR set to: 0
   813                           ;DigitalClock.c: 163: start_recieved=3;
   814  00110E  0E03               	movlw	3
   815  001110  6FC4               	movwf	_start_recieved& (0+255),b
   816                           
   817                           ;DigitalClock.c: 164: read_flag=0;
   818  001112  0E00               	movlw	0
   819  001114  6FC2               	movwf	_read_flag& (0+255),b
   820                           
   821                           ;DigitalClock.c: 165: read_alarm_flag=1;
   822  001116  0E01               	movlw	1
   823  001118  D057               	goto	L3
   824  00111A                     l128:
   825                           
   826                           ; BSR set to: 0
   827                           ;DigitalClock.c: 167: else if ((c==']')&& (start_recieved==3)){
   828                           
   829                           ; BSR set to: 0
   830  00111A  0E5D               	movlw	93
   831  00111C  19B8               	xorwf	main@c& (0+255),w,b
   832  00111E  A4D8               	btfss	status,2,c
   833  001120  D055               	goto	l130
   834                           
   835                           ; BSR set to: 0
   836  001122  0E03               	movlw	3
   837  001124  19C4               	xorwf	_start_recieved& (0+255),w,b
   838  001126  A4D8               	btfss	status,2,c
   839  001128  D051               	goto	l130
   840                           
   841                           ; BSR set to: 0
   842                           ;DigitalClock.c: 168: start_recieved=0;
   843  00112A  0E00               	movlw	0
   844  00112C  6FC4               	movwf	_start_recieved& (0+255),b
   845                           
   846                           ; BSR set to: 0
   847                           ;DigitalClock.c: 169: if(read_time_flag==1){
   848  00112E  05C3               	decf	_read_time_flag& (0+255),w,b
   849  001130  A4D8               	btfss	status,2,c
   850  001132  D01D               	goto	l131
   851                           
   852                           ; BSR set to: 0
   853                           ;DigitalClock.c: 170: char time_response[9];
   854                           ;DigitalClock.c: 171: sprintf(time_response, "%02u:%02u:%02u", hours, minutes, seconds);
   855  001134  0EAD               	movlw	low main@time_response
   856  001136  6E34               	movwf	sprintf@sp,c
   857  001138  0E00               	movlw	high main@time_response
   858  00113A  6E35               	movwf	sprintf@sp+1,c
   859  00113C  0E27               	movlw	low (STR_7+6)
   860  00113E  6E36               	movwf	sprintf@f,c
   861  001140  0E10               	movlw	high (STR_7+6)
   862  001142  6E37               	movwf	sprintf@f+1,c
   863  001144  C0CB  F038         	movff	_hours,?_sprintf+4
   864  001148  6A39               	clrf	?_sprintf+5,c
   865  00114A  C0CA  F03A         	movff	_minutes,?_sprintf+6
   866  00114E  6A3B               	clrf	?_sprintf+7,c
   867  001150  C0C9  F03C         	movff	_seconds,?_sprintf+8
   868  001154  6A3D               	clrf	?_sprintf+9,c
   869  001156  EC24  F00A         	call	_sprintf	;wreg free
   870                           
   871                           ;DigitalClock.c: 172: send_string_no_lib(time_response);
   872  00115A  0EAD               	movlw	low main@time_response
   873  00115C  6E29               	movwf	send_string_no_lib@p,c
   874  00115E  0E00               	movlw	high main@time_response
   875  001160  6E2A               	movwf	send_string_no_lib@p+1,c
   876  001162  EC4D  F00C         	call	_send_string_no_lib	;wreg free
   877                           
   878                           ;DigitalClock.c: 173: read_time_flag=0;
   879  001166  0E00               	movlw	0
   880  001168  0100               	movlb	0	; () banked
   881  00116A                     L2:
   882  00116A  6FC3               	movwf	_read_time_flag& (0+255),b
   883                           
   884                           ;DigitalClock.c: 174: }
   885  00116C  D79C               	goto	l121
   886  00116E                     l131:
   887                           
   888                           ; BSR set to: 0
   889                           ;DigitalClock.c: 175: else if(read_alarm_flag==1){
   890                           
   891                           ; BSR set to: 0
   892  00116E  05C1               	decf	_read_alarm_flag& (0+255),w,b
   893  001170  A4D8               	btfss	status,2,c
   894  001172  D799               	goto	l121
   895                           
   896                           ; BSR set to: 0
   897                           ;DigitalClock.c: 176: char alarm_response[13];
   898                           ;DigitalClock.c: 177: sprintf(alarm_response, "%02u:%02u:%02u %s", alarm_hours, alarm_mi
      +                          nutes, alarm_seconds,alarm_enabled?"ON":"OFF");
   899  001174  51C5               	movf	_alarm_enabled& (0+255),w,b	;volatile
   900  001176  A4D8               	btfss	status,2,c
   901  001178  D004               	goto	l135
   902                           
   903                           ; BSR set to: 0
   904  00117A  0E79               	movlw	low STR_5
   905  00117C  6FB6               	movwf	_main$551& (0+255),b
   906  00117E  0E10               	movlw	high STR_5
   907  001180  D003               	goto	L5
   908  001182                     l135:
   909                           
   910                           ; BSR set to: 0
   911                           
   912                           ; BSR set to: 0
   913  001182  0E7D               	movlw	low STR_4
   914  001184  6FB6               	movwf	_main$551& (0+255),b
   915  001186  0E10               	movlw	high STR_4
   916  001188                     L5:
   917  001188  6FB7               	movwf	(_main$551+1)& (0+255),b
   918                           
   919                           ; BSR set to: 0
   920                           
   921                           ; BSR set to: 0
   922  00118A  0EA0               	movlw	low main@alarm_response
   923  00118C  6E34               	movwf	sprintf@sp,c
   924  00118E  0E00               	movlw	high main@alarm_response
   925  001190  6E35               	movwf	sprintf@sp+1,c
   926  001192  0E36               	movlw	low STR_3
   927  001194  6E36               	movwf	sprintf@f,c
   928  001196  0E10               	movlw	high STR_3
   929  001198  6E37               	movwf	sprintf@f+1,c
   930  00119A  C0C8  F038         	movff	_alarm_hours,?_sprintf+4
   931  00119E  6A39               	clrf	?_sprintf+5,c
   932  0011A0  C0C7  F03A         	movff	_alarm_minutes,?_sprintf+6
   933  0011A4  6A3B               	clrf	?_sprintf+7,c
   934  0011A6  C0C6  F03C         	movff	_alarm_seconds,?_sprintf+8
   935  0011AA  6A3D               	clrf	?_sprintf+9,c
   936  0011AC  C0B6  F03E         	movff	_main$551,?_sprintf+10
   937  0011B0  C0B7  F03F         	movff	_main$551+1,?_sprintf+11
   938  0011B4  EC24  F00A         	call	_sprintf	;wreg free
   939                           
   940                           ;DigitalClock.c: 178: send_string_no_lib(alarm_response);
   941  0011B8  0EA0               	movlw	low main@alarm_response
   942  0011BA  6E29               	movwf	send_string_no_lib@p,c
   943  0011BC  0E00               	movlw	high main@alarm_response
   944  0011BE  6E2A               	movwf	send_string_no_lib@p+1,c
   945  0011C0  EC4D  F00C         	call	_send_string_no_lib	;wreg free
   946                           
   947                           ;DigitalClock.c: 179: read_alarm_flag=0;
   948  0011C4  0E00               	movlw	0
   949  0011C6  0100               	movlb	0	; () banked
   950  0011C8                     L3:
   951  0011C8  6FC1               	movwf	_read_alarm_flag& (0+255),b
   952                           
   953                           ; BSR set to: 0
   954                           ;DigitalClock.c: 180: }
   955                           ;DigitalClock.c: 183: }
   956                           
   957                           ; BSR set to: 0
   958  0011CA  D76D               	goto	l121
   959  0011CC                     l130:
   960                           
   961                           ; BSR set to: 0
   962                           ;DigitalClock.c: 186: else if((c=='w') &&(start_recieved==1)){
   963                           
   964                           ; BSR set to: 0
   965  0011CC  0E77               	movlw	119
   966  0011CE  19B8               	xorwf	main@c& (0+255),w,b
   967  0011D0  A4D8               	btfss	status,2,c
   968  0011D2  D008               	goto	l139
   969                           
   970                           ; BSR set to: 0
   971  0011D4  05C4               	decf	_start_recieved& (0+255),w,b
   972  0011D6  A4D8               	btfss	status,2,c
   973  0011D8  D005               	goto	l139
   974                           
   975                           ; BSR set to: 0
   976                           ;DigitalClock.c: 187: start_recieved=2;
   977  0011DA  0E02               	movlw	2
   978  0011DC  6FC4               	movwf	_start_recieved& (0+255),b
   979                           
   980                           ;DigitalClock.c: 188: small_w_flag=1;
   981  0011DE  0E01               	movlw	1
   982  0011E0  6FBF               	movwf	_small_w_flag& (0+255),b
   983                           
   984                           ;DigitalClock.c: 189: }
   985  0011E2  D761               	goto	l121
   986  0011E4                     l139:
   987                           
   988                           ; BSR set to: 0
   989                           ;DigitalClock.c: 190: else if((c=='W') &&(start_recieved==1)){
   990                           
   991                           ; BSR set to: 0
   992  0011E4  0E57               	movlw	87
   993  0011E6  19B8               	xorwf	main@c& (0+255),w,b
   994  0011E8  A4D8               	btfss	status,2,c
   995  0011EA  D008               	goto	l141
   996                           
   997                           ; BSR set to: 0
   998  0011EC  05C4               	decf	_start_recieved& (0+255),w,b
   999  0011EE  A4D8               	btfss	status,2,c
  1000  0011F0  D005               	goto	l141
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;DigitalClock.c: 191: start_recieved=2;
  1004  0011F2  0E02               	movlw	2
  1005  0011F4  6FC4               	movwf	_start_recieved& (0+255),b
  1006                           
  1007                           ;DigitalClock.c: 192: capital_w_flag=1;
  1008  0011F6  0E01               	movlw	1
  1009  0011F8  6FC0               	movwf	_capital_w_flag& (0+255),b
  1010                           
  1011                           ;DigitalClock.c: 193: }
  1012  0011FA  D755               	goto	l121
  1013  0011FC                     l141:
  1014                           
  1015                           ; BSR set to: 0
  1016                           ;DigitalClock.c: 194: else if((c=='h') &&(start_recieved==2)){
  1017                           
  1018                           ; BSR set to: 0
  1019  0011FC  0E68               	movlw	104
  1020  0011FE  19B8               	xorwf	main@c& (0+255),w,b
  1021  001200  A4D8               	btfss	status,2,c
  1022  001202  D009               	goto	l143
  1023                           
  1024                           ; BSR set to: 0
  1025  001204  0E02               	movlw	2
  1026  001206  19C4               	xorwf	_start_recieved& (0+255),w,b
  1027  001208  A4D8               	btfss	status,2,c
  1028  00120A  D005               	goto	l143
  1029                           
  1030                           ; BSR set to: 0
  1031                           ;DigitalClock.c: 195: start_recieved=3;
  1032  00120C  0E03               	movlw	3
  1033  00120E  6FC4               	movwf	_start_recieved& (0+255),b
  1034                           
  1035                           ;DigitalClock.c: 196: h_flag=1;
  1036  001210  0E01               	movlw	1
  1037  001212  6FBD               	movwf	_h_flag& (0+255),b
  1038                           
  1039                           ;DigitalClock.c: 197: }
  1040  001214  D748               	goto	l121
  1041  001216                     l143:
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;DigitalClock.c: 198: else if((c=='m') &&(start_recieved==2)){
  1045                           
  1046                           ; BSR set to: 0
  1047  001216  0E6D               	movlw	109
  1048  001218  19B8               	xorwf	main@c& (0+255),w,b
  1049  00121A  A4D8               	btfss	status,2,c
  1050  00121C  D009               	goto	l145
  1051                           
  1052                           ; BSR set to: 0
  1053  00121E  0E02               	movlw	2
  1054  001220  19C4               	xorwf	_start_recieved& (0+255),w,b
  1055  001222  A4D8               	btfss	status,2,c
  1056  001224  D005               	goto	l145
  1057                           
  1058                           ; BSR set to: 0
  1059                           ;DigitalClock.c: 199: start_recieved=3;
  1060  001226  0E03               	movlw	3
  1061  001228  6FC4               	movwf	_start_recieved& (0+255),b
  1062                           
  1063                           ;DigitalClock.c: 200: m_flag=1;
  1064  00122A  0E01               	movlw	1
  1065  00122C  6FBC               	movwf	_m_flag& (0+255),b
  1066                           
  1067                           ;DigitalClock.c: 201: }
  1068  00122E  D73B               	goto	l121
  1069  001230                     l145:
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;DigitalClock.c: 202: else if((c=='s') &&(start_recieved==2)){
  1073                           
  1074                           ; BSR set to: 0
  1075  001230  0E73               	movlw	115
  1076  001232  19B8               	xorwf	main@c& (0+255),w,b
  1077  001234  A4D8               	btfss	status,2,c
  1078  001236  D009               	goto	l147
  1079                           
  1080                           ; BSR set to: 0
  1081  001238  0E02               	movlw	2
  1082  00123A  19C4               	xorwf	_start_recieved& (0+255),w,b
  1083  00123C  A4D8               	btfss	status,2,c
  1084  00123E  D005               	goto	l147
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;DigitalClock.c: 203: start_recieved=3;
  1088  001240  0E03               	movlw	3
  1089  001242  6FC4               	movwf	_start_recieved& (0+255),b
  1090                           
  1091                           ;DigitalClock.c: 204: s_flag=1;
  1092  001244  0E01               	movlw	1
  1093  001246  6FBB               	movwf	_s_flag& (0+255),b
  1094                           
  1095                           ;DigitalClock.c: 205: }
  1096  001248  D72E               	goto	l121
  1097  00124A                     l147:
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;DigitalClock.c: 206: else if((c=='a') &&(start_recieved==2)){
  1101                           
  1102                           ; BSR set to: 0
  1103  00124A  0E61               	movlw	97
  1104  00124C  19B8               	xorwf	main@c& (0+255),w,b
  1105  00124E  A4D8               	btfss	status,2,c
  1106  001250  D009               	goto	l149
  1107                           
  1108                           ; BSR set to: 0
  1109  001252  0E02               	movlw	2
  1110  001254  19C4               	xorwf	_start_recieved& (0+255),w,b
  1111  001256  A4D8               	btfss	status,2,c
  1112  001258  D005               	goto	l149
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;DigitalClock.c: 207: start_recieved=3;
  1116  00125A  0E03               	movlw	3
  1117  00125C  6FC4               	movwf	_start_recieved& (0+255),b
  1118                           
  1119                           ;DigitalClock.c: 208: a_flag=1;
  1120  00125E  0E01               	movlw	1
  1121  001260  6FBA               	movwf	_a_flag& (0+255),b
  1122                           
  1123                           ;DigitalClock.c: 209: }
  1124  001262  D721               	goto	l121
  1125  001264                     l149:
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;DigitalClock.c: 211: else if(isDigit(c)&&start_recieved==3){
  1129                           
  1130                           ; BSR set to: 0
  1131  001264  51B8               	movf	main@c& (0+255),w,b
  1132  001266  EC53  F00E         	call	_isDigit
  1133  00126A  5028               	movf	?_isDigit,w,c
  1134  00126C  1029               	iorwf	?_isDigit+1,w,c
  1135  00126E  B4D8               	btfsc	status,2,c
  1136  001270  D009               	goto	l151
  1137  001272  0E03               	movlw	3
  1138  001274  0100               	movlb	0	; () banked
  1139  001276  19C4               	xorwf	_start_recieved& (0+255),w,b
  1140  001278  A4D8               	btfss	status,2,c
  1141  00127A  D004               	goto	l151
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;DigitalClock.c: 212: first_digit=c;
  1145  00127C  C0B8  F0BE         	movff	main@c,_first_digit
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;DigitalClock.c: 213: start_recieved=4;
  1149  001280  0E04               	movlw	4
  1150  001282  D0E0               	goto	L4
  1151  001284                     l151:
  1152                           
  1153                           ;DigitalClock.c: 217: else if(isDigit(c)&&start_recieved==4){
  1154                           
  1155                           ; BSR set to: 0
  1156  001284  0100               	movlb	0	; () banked
  1157  001286  51B8               	movf	main@c& (0+255),w,b
  1158  001288  EC53  F00E         	call	_isDigit
  1159  00128C  5028               	movf	?_isDigit,w,c
  1160  00128E  1029               	iorwf	?_isDigit+1,w,c
  1161  001290  B4D8               	btfsc	status,2,c
  1162  001292  D0CE               	goto	l153
  1163  001294  0E04               	movlw	4
  1164  001296  0100               	movlb	0	; () banked
  1165  001298  19C4               	xorwf	_start_recieved& (0+255),w,b
  1166  00129A  A4D8               	btfss	status,2,c
  1167  00129C  D0C9               	goto	l153
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;DigitalClock.c: 218: start_recieved=5;
  1171  00129E  0E05               	movlw	5
  1172  0012A0  6FC4               	movwf	_start_recieved& (0+255),b
  1173                           
  1174                           ; BSR set to: 0
  1175                           ;DigitalClock.c: 219: if(small_w_flag==1 &&h_flag==1){
  1176  0012A2  05BF               	decf	_small_w_flag& (0+255),w,b
  1177  0012A4  A4D8               	btfss	status,2,c
  1178  0012A6  D015               	goto	l154
  1179                           
  1180                           ; BSR set to: 0
  1181  0012A8  05BD               	decf	_h_flag& (0+255),w,b
  1182  0012AA  A4D8               	btfss	status,2,c
  1183  0012AC  D012               	goto	l154
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;DigitalClock.c: 220: small_w_flag=0;
  1187  0012AE  0E00               	movlw	0
  1188  0012B0  6FBF               	movwf	_small_w_flag& (0+255),b
  1189                           
  1190                           ;DigitalClock.c: 221: h_flag=0;
  1191  0012B2  0E00               	movlw	0
  1192  0012B4  6FBD               	movwf	_h_flag& (0+255),b
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;DigitalClock.c: 222: if(first_digit<='1'&&c<='2')
  1196  0012B6  0E32               	movlw	50
  1197  0012B8  61BE               	cpfslt	_first_digit& (0+255),b
  1198  0012BA  D6F5               	goto	l121
  1199                           
  1200                           ; BSR set to: 0
  1201  0012BC  0E33               	movlw	51
  1202  0012BE  61B8               	cpfslt	main@c& (0+255),b
  1203  0012C0  D6F2               	goto	l121
  1204                           
  1205                           ; BSR set to: 0
  1206                           ;DigitalClock.c: 223: hours = (first_digit - '0') * 10 + (c - '0');
  1207  0012C2  51BE               	movf	_first_digit& (0+255),w,b
  1208  0012C4  0FD0               	addlw	208
  1209  0012C6  0D0A               	mullw	10
  1210  0012C8  50F3               	movf	prodl,w,c
  1211  0012CA  25B8               	addwf	main@c& (0+255),w,b
  1212  0012CC  0FD0               	addlw	208
  1213  0012CE  6FCB               	movwf	_hours& (0+255),b
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;DigitalClock.c: 224: }
  1217  0012D0  D6EA               	goto	l121
  1218  0012D2                     l154:
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;DigitalClock.c: 225: else if(small_w_flag==1 &&m_flag==1){
  1222                           
  1223                           ; BSR set to: 0
  1224  0012D2  05BF               	decf	_small_w_flag& (0+255),w,b
  1225  0012D4  A4D8               	btfss	status,2,c
  1226  0012D6  D015               	goto	l157
  1227                           
  1228                           ; BSR set to: 0
  1229  0012D8  05BC               	decf	_m_flag& (0+255),w,b
  1230  0012DA  A4D8               	btfss	status,2,c
  1231  0012DC  D012               	goto	l157
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;DigitalClock.c: 226: small_w_flag=0;
  1235  0012DE  0E00               	movlw	0
  1236  0012E0  6FBF               	movwf	_small_w_flag& (0+255),b
  1237                           
  1238                           ;DigitalClock.c: 227: m_flag=0;
  1239  0012E2  0E00               	movlw	0
  1240  0012E4  6FBC               	movwf	_m_flag& (0+255),b
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;DigitalClock.c: 228: if(first_digit<='5'&&c<='9')
  1244  0012E6  0E36               	movlw	54
  1245  0012E8  61BE               	cpfslt	_first_digit& (0+255),b
  1246  0012EA  D6DD               	goto	l121
  1247                           
  1248                           ; BSR set to: 0
  1249  0012EC  0E3A               	movlw	58
  1250  0012EE  61B8               	cpfslt	main@c& (0+255),b
  1251  0012F0  D6DA               	goto	l121
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;DigitalClock.c: 229: minutes = (first_digit - '0') * 10 + (c - '0');
  1255  0012F2  51BE               	movf	_first_digit& (0+255),w,b
  1256  0012F4  0FD0               	addlw	208
  1257  0012F6  0D0A               	mullw	10
  1258  0012F8  50F3               	movf	prodl,w,c
  1259  0012FA  25B8               	addwf	main@c& (0+255),w,b
  1260  0012FC  0FD0               	addlw	208
  1261  0012FE  6FCA               	movwf	_minutes& (0+255),b
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;DigitalClock.c: 230: }
  1265  001300  D6D2               	goto	l121
  1266  001302                     l157:
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;DigitalClock.c: 231: else if(small_w_flag==1 &&s_flag==1){
  1270                           
  1271                           ; BSR set to: 0
  1272  001302  05BF               	decf	_small_w_flag& (0+255),w,b
  1273  001304  A4D8               	btfss	status,2,c
  1274  001306  D015               	goto	l160
  1275                           
  1276                           ; BSR set to: 0
  1277  001308  05BB               	decf	_s_flag& (0+255),w,b
  1278  00130A  A4D8               	btfss	status,2,c
  1279  00130C  D012               	goto	l160
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;DigitalClock.c: 232: small_w_flag=0;
  1283  00130E  0E00               	movlw	0
  1284  001310  6FBF               	movwf	_small_w_flag& (0+255),b
  1285                           
  1286                           ;DigitalClock.c: 233: s_flag=0;
  1287  001312  0E00               	movlw	0
  1288  001314  6FBB               	movwf	_s_flag& (0+255),b
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;DigitalClock.c: 234: if(first_digit<='5'&&c<='9')
  1292  001316  0E36               	movlw	54
  1293  001318  61BE               	cpfslt	_first_digit& (0+255),b
  1294  00131A  D6C5               	goto	l121
  1295                           
  1296                           ; BSR set to: 0
  1297  00131C  0E3A               	movlw	58
  1298  00131E  61B8               	cpfslt	main@c& (0+255),b
  1299  001320  D6C2               	goto	l121
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;DigitalClock.c: 235: seconds = (first_digit - '0') * 10 + (c - '0');
  1303  001322  51BE               	movf	_first_digit& (0+255),w,b
  1304  001324  0FD0               	addlw	208
  1305  001326  0D0A               	mullw	10
  1306  001328  50F3               	movf	prodl,w,c
  1307  00132A  25B8               	addwf	main@c& (0+255),w,b
  1308  00132C  0FD0               	addlw	208
  1309  00132E  6FC9               	movwf	_seconds& (0+255),b
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;DigitalClock.c: 236: }
  1313  001330  D6BA               	goto	l121
  1314  001332                     l160:
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;DigitalClock.c: 237: else if(capital_w_flag==1 &&h_flag==1){
  1318                           
  1319                           ; BSR set to: 0
  1320  001332  05C0               	decf	_capital_w_flag& (0+255),w,b
  1321  001334  A4D8               	btfss	status,2,c
  1322  001336  D015               	goto	l163
  1323                           
  1324                           ; BSR set to: 0
  1325  001338  05BD               	decf	_h_flag& (0+255),w,b
  1326  00133A  A4D8               	btfss	status,2,c
  1327  00133C  D012               	goto	l163
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;DigitalClock.c: 238: capital_w_flag=0;
  1331  00133E  0E00               	movlw	0
  1332  001340  6FC0               	movwf	_capital_w_flag& (0+255),b
  1333                           
  1334                           ;DigitalClock.c: 239: h_flag=0;
  1335  001342  0E00               	movlw	0
  1336  001344  6FBD               	movwf	_h_flag& (0+255),b
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;DigitalClock.c: 240: if(first_digit<='1'&&c<='2')
  1340  001346  0E32               	movlw	50
  1341  001348  61BE               	cpfslt	_first_digit& (0+255),b
  1342  00134A  D6AD               	goto	l121
  1343                           
  1344                           ; BSR set to: 0
  1345  00134C  0E33               	movlw	51
  1346  00134E  61B8               	cpfslt	main@c& (0+255),b
  1347  001350  D6AA               	goto	l121
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;DigitalClock.c: 241: alarm_hours = (first_digit - '0') * 10 + (c - '0');
  1351  001352  51BE               	movf	_first_digit& (0+255),w,b
  1352  001354  0FD0               	addlw	208
  1353  001356  0D0A               	mullw	10
  1354  001358  50F3               	movf	prodl,w,c
  1355  00135A  25B8               	addwf	main@c& (0+255),w,b
  1356  00135C  0FD0               	addlw	208
  1357  00135E  6FC8               	movwf	_alarm_hours& (0+255),b
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;DigitalClock.c: 242: }
  1361  001360  D6A2               	goto	l121
  1362  001362                     l163:
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;DigitalClock.c: 243: else if(capital_w_flag==1 &&m_flag==1){
  1366                           
  1367                           ; BSR set to: 0
  1368  001362  05C0               	decf	_capital_w_flag& (0+255),w,b
  1369  001364  A4D8               	btfss	status,2,c
  1370  001366  D015               	goto	l166
  1371                           
  1372                           ; BSR set to: 0
  1373  001368  05BC               	decf	_m_flag& (0+255),w,b
  1374  00136A  A4D8               	btfss	status,2,c
  1375  00136C  D012               	goto	l166
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;DigitalClock.c: 244: capital_w_flag=0;
  1379  00136E  0E00               	movlw	0
  1380  001370  6FC0               	movwf	_capital_w_flag& (0+255),b
  1381                           
  1382                           ;DigitalClock.c: 245: m_flag=0;
  1383  001372  0E00               	movlw	0
  1384  001374  6FBC               	movwf	_m_flag& (0+255),b
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;DigitalClock.c: 246: if(first_digit<='5'&&c<='9')
  1388  001376  0E36               	movlw	54
  1389  001378  61BE               	cpfslt	_first_digit& (0+255),b
  1390  00137A  D695               	goto	l121
  1391                           
  1392                           ; BSR set to: 0
  1393  00137C  0E3A               	movlw	58
  1394  00137E  61B8               	cpfslt	main@c& (0+255),b
  1395  001380  D692               	goto	l121
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;DigitalClock.c: 247: alarm_minutes = (first_digit - '0') * 10 + (c - '0');
  1399  001382  51BE               	movf	_first_digit& (0+255),w,b
  1400  001384  0FD0               	addlw	208
  1401  001386  0D0A               	mullw	10
  1402  001388  50F3               	movf	prodl,w,c
  1403  00138A  25B8               	addwf	main@c& (0+255),w,b
  1404  00138C  0FD0               	addlw	208
  1405  00138E  6FC7               	movwf	_alarm_minutes& (0+255),b
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;DigitalClock.c: 248: }
  1409  001390  D68A               	goto	l121
  1410  001392                     l166:
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;DigitalClock.c: 249: else if(capital_w_flag==1 && s_flag==1){
  1414                           
  1415                           ; BSR set to: 0
  1416  001392  05C0               	decf	_capital_w_flag& (0+255),w,b
  1417  001394  A4D8               	btfss	status,2,c
  1418  001396  D015               	goto	l169
  1419                           
  1420                           ; BSR set to: 0
  1421  001398  05BB               	decf	_s_flag& (0+255),w,b
  1422  00139A  A4D8               	btfss	status,2,c
  1423  00139C  D012               	goto	l169
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;DigitalClock.c: 250: capital_w_flag=0;
  1427  00139E  0E00               	movlw	0
  1428  0013A0  6FC0               	movwf	_capital_w_flag& (0+255),b
  1429                           
  1430                           ;DigitalClock.c: 251: s_flag=0;
  1431  0013A2  0E00               	movlw	0
  1432  0013A4  6FBB               	movwf	_s_flag& (0+255),b
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;DigitalClock.c: 252: if(first_digit<='5'&&c<='9')
  1436  0013A6  0E36               	movlw	54
  1437  0013A8  61BE               	cpfslt	_first_digit& (0+255),b
  1438  0013AA  D67D               	goto	l121
  1439                           
  1440                           ; BSR set to: 0
  1441  0013AC  0E3A               	movlw	58
  1442  0013AE  61B8               	cpfslt	main@c& (0+255),b
  1443  0013B0  D67A               	goto	l121
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;DigitalClock.c: 253: alarm_seconds = (first_digit - '0') * 10 + (c - '0');
  1447  0013B2  51BE               	movf	_first_digit& (0+255),w,b
  1448  0013B4  0FD0               	addlw	208
  1449  0013B6  0D0A               	mullw	10
  1450  0013B8  50F3               	movf	prodl,w,c
  1451  0013BA  25B8               	addwf	main@c& (0+255),w,b
  1452  0013BC  0FD0               	addlw	208
  1453  0013BE  6FC6               	movwf	_alarm_seconds& (0+255),b
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;DigitalClock.c: 254: }
  1457  0013C0  D672               	goto	l121
  1458  0013C2                     l169:
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;DigitalClock.c: 255: else if(capital_w_flag==1 && a_flag==1){
  1462                           
  1463                           ; BSR set to: 0
  1464  0013C2  05C0               	decf	_capital_w_flag& (0+255),w,b
  1465  0013C4  A4D8               	btfss	status,2,c
  1466  0013C6  D66F               	goto	l121
  1467                           
  1468                           ; BSR set to: 0
  1469  0013C8  05BA               	decf	_a_flag& (0+255),w,b
  1470  0013CA  A4D8               	btfss	status,2,c
  1471  0013CC  D66C               	goto	l121
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;DigitalClock.c: 256: capital_w_flag=0;
  1475  0013CE  0E00               	movlw	0
  1476  0013D0  6FC0               	movwf	_capital_w_flag& (0+255),b
  1477                           
  1478                           ;DigitalClock.c: 257: a_flag=0;
  1479  0013D2  0E00               	movlw	0
  1480  0013D4  6FBA               	movwf	_a_flag& (0+255),b
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;DigitalClock.c: 258: if(first_digit=='0'&& c=='0'){
  1484  0013D6  0E30               	movlw	48
  1485  0013D8  19BE               	xorwf	_first_digit& (0+255),w,b
  1486  0013DA  A4D8               	btfss	status,2,c
  1487  0013DC  D016               	goto	l173
  1488                           
  1489                           ; BSR set to: 0
  1490  0013DE  0E30               	movlw	48
  1491  0013E0  19B8               	xorwf	main@c& (0+255),w,b
  1492  0013E2  A4D8               	btfss	status,2,c
  1493  0013E4  D012               	goto	l173
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;DigitalClock.c: 260: if(alarm_enabled==1){
  1497  0013E6  05C5               	decf	_alarm_enabled& (0+255),w,b	;volatile
  1498  0013E8  A4D8               	btfss	status,2,c
  1499  0013EA  D65D               	goto	l121
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;DigitalClock.c: 261: toggle_alarm_flag = 1;
  1503  0013EC  0E01               	movlw	1
  1504  0013EE  6FB9               	movwf	_toggle_alarm_flag& (0+255),b	;volatile
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;DigitalClock.c: 262: disableInterrupts();
  1508  0013F0  ECB1  F00E         	call	_disableInterrupts	;wreg free
  1509                           
  1510                           ;DigitalClock.c: 263: alarm_enabled = !alarm_enabled;
  1511  0013F4  0100               	movlb	0	; () banked
  1512  0013F6  51C5               	movf	_alarm_enabled& (0+255),w,b	;volatile
  1513  0013F8  A4D8               	btfss	status,2,c
  1514  0013FA  D002               	goto	u2250
  1515  0013FC  0E01               	movlw	1
  1516  0013FE  D001               	goto	u2260
  1517  001400                     u2250:
  1518  001400  0E00               	movlw	0
  1519  001402                     u2260:
  1520  001402  6FC5               	movwf	_alarm_enabled& (0+255),b	;volatile
  1521                           
  1522                           ;DigitalClock.c: 265: enableInterrupts();
  1523  001404  ECAE  F00E         	call	_enableInterrupts	;wreg free
  1524                           
  1525                           ;DigitalClock.c: 266: }
  1526                           ;DigitalClock.c: 268: }
  1527  001408  D64E               	goto	l121
  1528  00140A                     l173:
  1529                           
  1530                           ;DigitalClock.c: 270: else {
  1531                           ;DigitalClock.c: 271: if(alarm_enabled==0){
  1532  00140A  0100               	movlb	0	; () banked
  1533  00140C  51C5               	movf	_alarm_enabled& (0+255),w,b	;volatile
  1534  00140E  A4D8               	btfss	status,2,c
  1535  001410  D64A               	goto	l121
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;DigitalClock.c: 272: toggle_alarm_flag = 1;
  1539  001412  0E01               	movlw	1
  1540  001414  6FB9               	movwf	_toggle_alarm_flag& (0+255),b	;volatile
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;DigitalClock.c: 273: disableInterrupts();
  1544  001416  ECB1  F00E         	call	_disableInterrupts	;wreg free
  1545                           
  1546                           ;DigitalClock.c: 274: alarm_enabled = !alarm_enabled;
  1547  00141A  0100               	movlb	0	; () banked
  1548  00141C  51C5               	movf	_alarm_enabled& (0+255),w,b	;volatile
  1549  00141E  A4D8               	btfss	status,2,c
  1550  001420  D002               	goto	u2280
  1551  001422  0E01               	movlw	1
  1552  001424  D001               	goto	u2290
  1553  001426                     u2280:
  1554  001426  0E00               	movlw	0
  1555  001428                     u2290:
  1556  001428  6FC5               	movwf	_alarm_enabled& (0+255),b	;volatile
  1557                           
  1558                           ;DigitalClock.c: 276: enableInterrupts();
  1559  00142A  ECAE  F00E         	call	_enableInterrupts	;wreg free
  1560                           
  1561                           ;DigitalClock.c: 277: }
  1562                           ;DigitalClock.c: 279: }
  1563                           ;DigitalClock.c: 281: }
  1564                           ;DigitalClock.c: 283: }
  1565  00142E  D63B               	goto	l121
  1566  001430                     l153:
  1567                           
  1568                           ;DigitalClock.c: 284: else if ((c==']')&& (start_recieved==5)){
  1569  001430  0E5D               	movlw	93
  1570  001432  0100               	movlb	0	; () banked
  1571  001434  19B8               	xorwf	main@c& (0+255),w,b
  1572  001436  A4D8               	btfss	status,2,c
  1573  001438  D636               	goto	l121
  1574                           
  1575                           ; BSR set to: 0
  1576  00143A  0E05               	movlw	5
  1577  00143C  19C4               	xorwf	_start_recieved& (0+255),w,b
  1578  00143E  A4D8               	btfss	status,2,c
  1579  001440  D632               	goto	l121
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;DigitalClock.c: 285: start_recieved=0;
  1583  001442  0E00               	movlw	0
  1584  001444                     L4:
  1585  001444  6FC4               	movwf	_start_recieved& (0+255),b
  1586                           
  1587                           ; BSR set to: 0
  1588                           
  1589                           ; BSR set to: 0
  1590                           
  1591                           ; BSR set to: 0
  1592                           
  1593                           ; BSR set to: 0
  1594                           
  1595                           ; BSR set to: 0
  1596                           
  1597                           ; BSR set to: 0
  1598                           
  1599                           ; BSR set to: 0
  1600                           
  1601                           ; BSR set to: 0
  1602                           
  1603                           ; BSR set to: 0
  1604                           
  1605                           ; BSR set to: 0
  1606                           
  1607                           ; BSR set to: 0
  1608                           
  1609                           ; BSR set to: 0
  1610                           
  1611                           ; BSR set to: 0
  1612                           
  1613                           ; BSR set to: 0
  1614                           
  1615                           ; BSR set to: 0
  1616  001446  D62F               	goto	l121
  1617  001448                     __end_of_main:
  1618                           	opt stack 0
  1619                           tblptru	equ	0xFF8
  1620                           tblptrh	equ	0xFF7
  1621                           tblptrl	equ	0xFF6
  1622                           tablat	equ	0xFF5
  1623                           prodl	equ	0xFF3
  1624                           postinc0	equ	0xFEE
  1625                           wreg	equ	0xFE8
  1626                           postdec1	equ	0xFE5
  1627                           fsr1l	equ	0xFE1
  1628                           status	equ	0xFD8
  1629                           
  1630 ;; *************** function _updateClockDisplay *****************
  1631 ;; Defined at:
  1632 ;;		line 369 in file "DigitalClock.c"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;		None
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;  Buffer         32    0[BANK0 ] unsigned char [32]
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  1    wreg      void 
  1639 ;; Registers used:
  1640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1650 ;;Total ram usage:       32 bytes
  1651 ;; Hardware stack levels used:    1
  1652 ;; Hardware stack levels required when called:    8
  1653 ;; This function calls:
  1654 ;;		_lcd_gotoxy
  1655 ;;		_lcd_puts
  1656 ;;		_sprintf
  1657 ;; This function is called by:
  1658 ;;		_main
  1659 ;; This function uses a non-reentrant model
  1660 ;;
  1661                           
  1662                           	psect	text1
  1663  001ABA                     __ptext1:
  1664                           	opt stack 0
  1665  001ABA                     _updateClockDisplay:
  1666                           	opt stack 22
  1667                           
  1668                           ;DigitalClock.c: 370: char Buffer[32];
  1669                           ;DigitalClock.c: 371: lcd_gotoxy(1, 1);
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;incstack = 0
  1673  001ABA  0E01               	movlw	1
  1674  001ABC  6E32               	movwf	lcd_gotoxy@y,c
  1675  001ABE  0E01               	movlw	1
  1676  001AC0  EC3C  F00D         	call	_lcd_gotoxy
  1677                           
  1678                           ;DigitalClock.c: 372: sprintf(Buffer, "Time: %02u:%02u:%02u", hours, minutes, seconds);
  1679  001AC4  0E80               	movlw	low updateClockDisplay@Buffer
  1680  001AC6  6E34               	movwf	sprintf@sp,c
  1681  001AC8  0E00               	movlw	high updateClockDisplay@Buffer
  1682  001ACA  6E35               	movwf	sprintf@sp+1,c
  1683  001ACC  0E21               	movlw	low STR_7
  1684  001ACE  6E36               	movwf	sprintf@f,c
  1685  001AD0  0E10               	movlw	high STR_7
  1686  001AD2  6E37               	movwf	sprintf@f+1,c
  1687  001AD4  C0CB  F038         	movff	_hours,?_sprintf+4
  1688  001AD8  6A39               	clrf	?_sprintf+5,c
  1689  001ADA  C0CA  F03A         	movff	_minutes,?_sprintf+6
  1690  001ADE  6A3B               	clrf	?_sprintf+7,c
  1691  001AE0  C0C9  F03C         	movff	_seconds,?_sprintf+8
  1692  001AE4  6A3D               	clrf	?_sprintf+9,c
  1693  001AE6  EC24  F00A         	call	_sprintf	;wreg free
  1694                           
  1695                           ;DigitalClock.c: 373: lcd_puts(Buffer);
  1696  001AEA  0E80               	movlw	low updateClockDisplay@Buffer
  1697  001AEC  6E36               	movwf	lcd_puts@s,c
  1698  001AEE  0E00               	movlw	high updateClockDisplay@Buffer
  1699  001AF0  6E37               	movwf	lcd_puts@s+1,c
  1700  001AF2  EC78  F00C         	call	_lcd_puts	;wreg free
  1701  001AF6  0012               	return		;funcret
  1702  001AF8                     __end_of_updateClockDisplay:
  1703                           	opt stack 0
  1704                           tblptru	equ	0xFF8
  1705                           tblptrh	equ	0xFF7
  1706                           tblptrl	equ	0xFF6
  1707                           tablat	equ	0xFF5
  1708                           prodl	equ	0xFF3
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           postdec1	equ	0xFE5
  1712                           fsr1l	equ	0xFE1
  1713                           status	equ	0xFD8
  1714                           
  1715 ;; *************** function _updateAlarmStateDisplay *****************
  1716 ;; Defined at:
  1717 ;;		line 375 in file "DigitalClock.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;Total ram usage:        2 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    8
  1738 ;; This function calls:
  1739 ;;		_lcd_gotoxy
  1740 ;;		_lcd_puts
  1741 ;; This function is called by:
  1742 ;;		_main
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           	psect	text2
  1747  001B36                     __ptext2:
  1748                           	opt stack 0
  1749  001B36                     _updateAlarmStateDisplay:
  1750                           	opt stack 22
  1751                           
  1752                           ;DigitalClock.c: 376: lcd_gotoxy(1, 3);
  1753                           
  1754                           ;incstack = 0
  1755  001B36  0E03               	movlw	3
  1756  001B38  6E32               	movwf	lcd_gotoxy@y,c
  1757  001B3A  0E01               	movlw	1
  1758  001B3C  EC3C  F00D         	call	_lcd_gotoxy
  1759                           
  1760                           ;DigitalClock.c: 377: lcd_puts("Alarm State: ");
  1761  001B40  0E59               	movlw	low STR_8
  1762  001B42  6E36               	movwf	lcd_puts@s,c
  1763  001B44  0E10               	movlw	high STR_8
  1764  001B46  6E37               	movwf	lcd_puts@s+1,c
  1765  001B48  EC78  F00C         	call	_lcd_puts	;wreg free
  1766                           
  1767                           ;DigitalClock.c: 378: lcd_puts(alarm_enabled?"ON ":"OFF");
  1768  001B4C  0100               	movlb	0	; () banked
  1769  001B4E  51C5               	movf	_alarm_enabled& (0+255),w,b	;volatile
  1770  001B50  A4D8               	btfss	status,2,c
  1771  001B52  D004               	goto	l203
  1772                           
  1773                           ; BSR set to: 0
  1774  001B54  0E79               	movlw	low STR_5
  1775  001B56  6E38               	movwf	_updateAlarmStateDisplay$648,c
  1776  001B58  0E10               	movlw	high STR_5
  1777  001B5A  D003               	goto	L6
  1778  001B5C                     l203:
  1779                           
  1780                           ; BSR set to: 0
  1781                           
  1782                           ; BSR set to: 0
  1783  001B5C  0E75               	movlw	low STR_9
  1784  001B5E  6E38               	movwf	_updateAlarmStateDisplay$648,c
  1785  001B60  0E10               	movlw	high STR_9
  1786  001B62                     L6:
  1787  001B62  6E39               	movwf	_updateAlarmStateDisplay$648+1,c
  1788                           
  1789                           ; BSR set to: 0
  1790                           
  1791                           ; BSR set to: 0
  1792  001B64  C038  F036         	movff	_updateAlarmStateDisplay$648,lcd_puts@s
  1793  001B68  C039  F037         	movff	_updateAlarmStateDisplay$648+1,lcd_puts@s+1
  1794  001B6C  EC78  F00C         	call	_lcd_puts	;wreg free
  1795  001B70  0012               	return		;funcret
  1796  001B72                     __end_of_updateAlarmStateDisplay:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           prodl	equ	0xFF3
  1803                           postinc0	equ	0xFEE
  1804                           wreg	equ	0xFE8
  1805                           postdec1	equ	0xFE5
  1806                           fsr1l	equ	0xFE1
  1807                           status	equ	0xFD8
  1808                           
  1809 ;; *************** function _updateAlarmDisplay *****************
  1810 ;; Defined at:
  1811 ;;		line 310 in file "DigitalClock.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  alarm_string   17    0[BANK0 ] unsigned char [17]
  1816 ;; Return value:  Size  Location     Type
  1817 ;;                  1    wreg      void 
  1818 ;; Registers used:
  1819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1820 ;; Tracked objects:
  1821 ;;		On entry : 0/0
  1822 ;;		On exit  : 0/0
  1823 ;;		Unchanged: 0/0
  1824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;Total ram usage:       17 bytes
  1830 ;; Hardware stack levels used:    1
  1831 ;; Hardware stack levels required when called:    8
  1832 ;; This function calls:
  1833 ;;		_lcd_gotoxy
  1834 ;;		_lcd_puts
  1835 ;;		_sprintf
  1836 ;; This function is called by:
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text3
  1842  001AF8                     __ptext3:
  1843                           	opt stack 0
  1844  001AF8                     _updateAlarmDisplay:
  1845                           	opt stack 22
  1846                           
  1847                           ;DigitalClock.c: 311: char alarm_string[17];
  1848                           ;DigitalClock.c: 312: sprintf(alarm_string, "Alarm: %02u:%02u:%02u", alarm_hours, alarm_
      +                          minutes, alarm_seconds);
  1849                           
  1850                           ;incstack = 0
  1851  001AF8  0E80               	movlw	low updateAlarmDisplay@alarm_string
  1852  001AFA  6E34               	movwf	sprintf@sp,c
  1853  001AFC  0E00               	movlw	high updateAlarmDisplay@alarm_string
  1854  001AFE  6E35               	movwf	sprintf@sp+1,c
  1855  001B00  0E0B               	movlw	low STR_6
  1856  001B02  6E36               	movwf	sprintf@f,c
  1857  001B04  0E10               	movlw	high STR_6
  1858  001B06  6E37               	movwf	sprintf@f+1,c
  1859  001B08  C0C8  F038         	movff	_alarm_hours,?_sprintf+4
  1860  001B0C  6A39               	clrf	?_sprintf+5,c
  1861  001B0E  C0C7  F03A         	movff	_alarm_minutes,?_sprintf+6
  1862  001B12  6A3B               	clrf	?_sprintf+7,c
  1863  001B14  C0C6  F03C         	movff	_alarm_seconds,?_sprintf+8
  1864  001B18  6A3D               	clrf	?_sprintf+9,c
  1865  001B1A  EC24  F00A         	call	_sprintf	;wreg free
  1866                           
  1867                           ;DigitalClock.c: 314: lcd_gotoxy(1, 2);
  1868  001B1E  0E02               	movlw	2
  1869  001B20  6E32               	movwf	lcd_gotoxy@y,c
  1870  001B22  0E01               	movlw	1
  1871  001B24  EC3C  F00D         	call	_lcd_gotoxy
  1872                           
  1873                           ;DigitalClock.c: 315: lcd_puts(alarm_string);
  1874  001B28  0E80               	movlw	low updateAlarmDisplay@alarm_string
  1875  001B2A  6E36               	movwf	lcd_puts@s,c
  1876  001B2C  0E00               	movlw	high updateAlarmDisplay@alarm_string
  1877  001B2E  6E37               	movwf	lcd_puts@s+1,c
  1878  001B30  EC78  F00C         	call	_lcd_puts	;wreg free
  1879  001B34  0012               	return		;funcret
  1880  001B36                     __end_of_updateAlarmDisplay:
  1881                           	opt stack 0
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           prodl	equ	0xFF3
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           postdec1	equ	0xFE5
  1890                           fsr1l	equ	0xFE1
  1891                           status	equ	0xFD8
  1892                           
  1893 ;; *************** function _sprintf *****************
  1894 ;; Defined at:
  1895 ;;		line 492 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  sp              2   51[COMRAM] PTR unsigned char 
  1898 ;;		 -> updateClockDisplay@Buffer(32), updateAlarmDisplay@alarm_string(17), main@alarm_response(13), main@time_response(
      +9), 
  1899 ;;  f               2   53[COMRAM] PTR const unsigned char 
  1900 ;;		 -> STR_7(21), STR_6(22), STR_3(18), STR_2(15), 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  tmpval          4    0        struct .
  1903 ;;  width           2   77[COMRAM] int 
  1904 ;;  len             2   75[COMRAM] unsigned int 
  1905 ;;  cp              2   73[COMRAM] PTR const unsigned char 
  1906 ;;		 -> STR_12(7), STR_5(4), STR_4(3), 
  1907 ;;  ap              2   71[COMRAM] PTR void [1]
  1908 ;;		 -> ?_sprintf(2), 
  1909 ;;  val             2   68[COMRAM] unsigned int 
  1910 ;;  c               1   79[COMRAM] char 
  1911 ;;  prec            1   70[COMRAM] char 
  1912 ;;  flag            1   67[COMRAM] unsigned char 
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  2   51[COMRAM] int 
  1915 ;; Registers used:
  1916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1922 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;Total ram usage:       29 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:    3
  1929 ;; This function calls:
  1930 ;;		___lwdiv
  1931 ;;		___lwmod
  1932 ;;		___wmul
  1933 ;;		_isdigit
  1934 ;; This function is called by:
  1935 ;;		_main
  1936 ;;		_updateAlarmDisplay
  1937 ;;		_updateClockDisplay
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text4
  1942  001448                     __ptext4:
  1943                           	opt stack 0
  1944  001448                     _sprintf:
  1945                           	opt stack 26
  1946                           
  1947                           ;doprnt.c: 494: va_list ap;
  1948                           ;doprnt.c: 499: signed char c;
  1949                           ;doprnt.c: 501: int width;
  1950                           ;doprnt.c: 506: signed char prec;
  1951                           ;doprnt.c: 508: unsigned char flag;
  1952                           ;doprnt.c: 523: union {
  1953                           ;doprnt.c: 524: unsigned long vd;
  1954                           ;doprnt.c: 525: double integ;
  1955                           ;doprnt.c: 526: } tmpval;
  1956                           ;doprnt.c: 528: unsigned int val;
  1957                           ;doprnt.c: 529: unsigned len;
  1958                           ;doprnt.c: 530: const char * cp;
  1959                           ;doprnt.c: 533: *ap = __va_start();
  1960                           
  1961                           ;incstack = 0
  1962  001448  0E38               	movlw	low (?_sprintf+4)
  1963  00144A  6E48               	movwf	sprintf@ap,c
  1964  00144C  0E00               	movlw	high (?_sprintf+4)
  1965  00144E  6E49               	movwf	sprintf@ap+1,c
  1966                           
  1967                           ;doprnt.c: 536: while(c = *f++) {
  1968  001450  D173               	goto	u1510
  1969  001452                     
  1970                           ;doprnt.c: 538: if(c != '%')
  1971  001452  0E25               	movlw	37
  1972  001454  1850               	xorwf	sprintf@c,w,c
  1973  001456  B4D8               	btfsc	status,2,c
  1974  001458  D009               	goto	l354
  1975                           
  1976                           ;doprnt.c: 540: {
  1977                           ;doprnt.c: 541: ((*sp++ = (c)));
  1978  00145A  C034  FFD9         	movff	sprintf@sp,fsr2l
  1979  00145E  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  1980  001462  C050  FFDF         	movff	sprintf@c,indf2
  1981  001466  4A34               	infsnz	sprintf@sp,f,c
  1982  001468  2A35               	incf	sprintf@sp+1,f,c
  1983                           
  1984                           ;doprnt.c: 542: continue;
  1985  00146A  D166               	goto	u1510
  1986  00146C                     l354:
  1987                           
  1988                           ;doprnt.c: 543: }
  1989                           ;doprnt.c: 546: width = 0;
  1990  00146C  0E00               	movlw	0
  1991  00146E  6E4F               	movwf	sprintf@width+1,c
  1992  001470  0E00               	movlw	0
  1993  001472  6E4E               	movwf	sprintf@width,c
  1994                           
  1995                           ;doprnt.c: 548: flag = 0;
  1996  001474  0E00               	movlw	0
  1997  001476  6E44               	movwf	sprintf@flag,c
  1998                           
  1999                           ;doprnt.c: 551: switch(*f) {
  2000                           
  2001                           ;doprnt.c: 550: for(;;) {
  2002  001478  D003               	goto	l356
  2003  00147A                     
  2004                           ;doprnt.c: 580: flag |= 0x04;
  2005  00147A  8444               	bsf	sprintf@flag,2,c
  2006                           
  2007                           ;doprnt.c: 581: f++;
  2008  00147C  4A36               	infsnz	sprintf@f,f,c
  2009  00147E  2A37               	incf	sprintf@f+1,f,c
  2010  001480                     l356:
  2011  001480  C036  FFF6         	movff	sprintf@f,tblptrl
  2012  001484  C037  FFF7         	movff	sprintf@f+1,tblptrh
  2013  001488                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2014  001488  6AF8               	clrf	tblptru,c
  2015  00148A                     	endif
  2016  00148A                     	if	0	;tblptru may be non-zero
  2017  00148A                     	endif
  2018  00148A  0008               	tblrd		*
  2019  00148C  50F5               	movf	tablat,w,c
  2020                           
  2021                           ; Switch size 1, requested type "space"
  2022                           ; Number of cases is 1, Range of values is 48 to 48
  2023                           ; switch strategies available:
  2024                           ; Name         Instructions Cycles
  2025                           ; simple_byte            4     3 (average)
  2026                           ;	Chosen strategy is simple_byte
  2027  00148E  0A30               	xorlw	48	; case 48
  2028  001490  B4D8               	btfsc	status,2,c
  2029  001492  D7F3               	goto	l357
  2030                           
  2031                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2032                           
  2033                           ;doprnt.c: 586: }
  2034                           
  2035                           ;doprnt.c: 585: break;
  2036  001494  C036  FFF6         	movff	sprintf@f,tblptrl
  2037  001498  C037  FFF7         	movff	sprintf@f+1,tblptrh
  2038  00149C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2039  00149C  6AF8               	clrf	tblptru,c
  2040  00149E                     	endif
  2041  00149E                     	if	0	;tblptru may be non-zero
  2042  00149E                     	endif
  2043  00149E  0008               	tblrd		*
  2044  0014A0  50F5               	movf	tablat,w,c
  2045  0014A2  EC75  F00E         	call	_isdigit
  2046  0014A6  A0D8               	btfss	status,0,c
  2047  0014A8  D09D               	goto	l364
  2048                           
  2049                           ;doprnt.c: 598: width = 0;
  2050  0014AA  0E00               	movlw	0
  2051  0014AC  6E4F               	movwf	sprintf@width+1,c
  2052  0014AE  0E00               	movlw	0
  2053  0014B0  6E4E               	movwf	sprintf@width,c
  2054  0014B2                     
  2055                           ;doprnt.c: 600: width *= 10;
  2056  0014B2  C04E  F028         	movff	sprintf@width,___wmul@multiplier
  2057  0014B6  C04F  F029         	movff	sprintf@width+1,___wmul@multiplier+1
  2058  0014BA  0E00               	movlw	0
  2059  0014BC  6E2B               	movwf	___wmul@multiplicand+1,c
  2060  0014BE  0E0A               	movlw	10
  2061  0014C0  6E2A               	movwf	___wmul@multiplicand,c
  2062  0014C2  EC1B  F00E         	call	___wmul	;wreg free
  2063  0014C6  C028  F04E         	movff	?___wmul,sprintf@width
  2064  0014CA  C029  F04F         	movff	?___wmul+1,sprintf@width+1
  2065                           
  2066                           ;doprnt.c: 601: width += *f++ - '0';
  2067  0014CE  0ED0               	movlw	208
  2068  0014D0  6E40               	movwf	??_sprintf& (0+255),c
  2069  0014D2  0EFF               	movlw	255
  2070  0014D4  6E41               	movwf	(??_sprintf+1)& (0+255),c
  2071  0014D6  C036  FFF6         	movff	sprintf@f,tblptrl
  2072  0014DA  C037  FFF7         	movff	sprintf@f+1,tblptrh
  2073  0014DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2074  0014DE  6AF8               	clrf	tblptru,c
  2075  0014E0                     	endif
  2076  0014E0                     	if	0	;tblptru may be non-zero
  2077  0014E0                     	endif
  2078  0014E0  0008               	tblrd		*
  2079  0014E2  50F5               	movf	tablat,w,c
  2080  0014E4  6E42               	movwf	(??_sprintf+2)& (0+255),c
  2081  0014E6  6A43               	clrf	(??_sprintf+3)& (0+255),c
  2082  0014E8  5040               	movf	??_sprintf,w,c
  2083  0014EA  2642               	addwf	??_sprintf+2,f,c
  2084  0014EC  5041               	movf	??_sprintf+1,w,c
  2085  0014EE  2243               	addwfc	??_sprintf+3,f,c
  2086  0014F0  5042               	movf	??_sprintf+2,w,c
  2087  0014F2  264E               	addwf	sprintf@width,f,c
  2088  0014F4  5043               	movf	??_sprintf+3,w,c
  2089  0014F6  224F               	addwfc	sprintf@width+1,f,c
  2090  0014F8  4A36               	infsnz	sprintf@f,f,c
  2091  0014FA  2A37               	incf	sprintf@f+1,f,c
  2092                           
  2093                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2094  0014FC  C036  FFF6         	movff	sprintf@f,tblptrl
  2095  001500  C037  FFF7         	movff	sprintf@f+1,tblptrh
  2096  001504                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2097  001504  6AF8               	clrf	tblptru,c
  2098  001506                     	endif
  2099  001506                     	if	0	;tblptru may be non-zero
  2100  001506                     	endif
  2101  001506  0008               	tblrd		*
  2102  001508  50F5               	movf	tablat,w,c
  2103  00150A  EC75  F00E         	call	_isdigit
  2104  00150E  A0D8               	btfss	status,0,c
  2105  001510  D069               	goto	l364
  2106  001512  D7CF               	goto	l362
  2107  001514                     
  2108                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2109  001514  C048  FFD9         	movff	sprintf@ap,fsr2l
  2110  001518  C049  FFDA         	movff	sprintf@ap+1,fsr2h
  2111  00151C  CFDE F04A          	movff	postinc2,sprintf@cp
  2112  001520  CFDD F04B          	movff	postdec2,sprintf@cp+1
  2113  001524  0E02               	movlw	2
  2114  001526  2648               	addwf	sprintf@ap,f,c
  2115  001528  0E00               	movlw	0
  2116  00152A  2249               	addwfc	sprintf@ap+1,f,c
  2117                           
  2118                           ;doprnt.c: 740: if(!cp)
  2119  00152C  504A               	movf	sprintf@cp,w,c
  2120  00152E  104B               	iorwf	sprintf@cp+1,w,c
  2121  001530  A4D8               	btfss	status,2,c
  2122  001532  D004               	goto	l368
  2123                           
  2124                           ;doprnt.c: 741: cp = "(null)";
  2125  001534  0E67               	movlw	low STR_12
  2126  001536  6E4A               	movwf	sprintf@cp,c
  2127  001538  0E10               	movlw	high STR_12
  2128  00153A  6E4B               	movwf	sprintf@cp+1,c
  2129  00153C                     l368:
  2130                           
  2131                           ;doprnt.c: 745: len = 0;
  2132  00153C  0E00               	movlw	0
  2133  00153E  6E4D               	movwf	sprintf@len+1,c
  2134  001540  0E00               	movlw	0
  2135  001542  6E4C               	movwf	sprintf@len,c
  2136                           
  2137                           ;doprnt.c: 746: while(cp[len])
  2138  001544  D002               	goto	l369
  2139  001546                     
  2140                           ;doprnt.c: 747: len++;
  2141  001546  4A4C               	infsnz	sprintf@len,f,c
  2142  001548  2A4D               	incf	sprintf@len+1,f,c
  2143  00154A                     l369:
  2144  00154A  504C               	movf	sprintf@len,w,c
  2145  00154C  244A               	addwf	sprintf@cp,w,c
  2146  00154E  6E40               	movwf	??_sprintf& (0+255),c
  2147  001550  504D               	movf	sprintf@len+1,w,c
  2148  001552  204B               	addwfc	sprintf@cp+1,w,c
  2149  001554  6E41               	movwf	(??_sprintf+1)& (0+255),c
  2150  001556  C040  FFF6         	movff	??_sprintf,tblptrl
  2151  00155A  C041  FFF7         	movff	??_sprintf+1,tblptrh
  2152  00155E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2153  00155E  6AF8               	clrf	tblptru,c
  2154  001560                     	endif
  2155  001560                     	if	0	;tblptru may be non-zero
  2156  001560                     	endif
  2157  001560  0008               	tblrd		*
  2158  001562  50F5               	movf	tablat,w,c
  2159  001564  0900               	iorlw	0
  2160  001566  A4D8               	btfss	status,2,c
  2161  001568  D7EE               	goto	l370
  2162                           
  2163                           ;doprnt.c: 757: if(width > len)
  2164  00156A  504E               	movf	sprintf@width,w,c
  2165  00156C  5C4C               	subwf	sprintf@len,w,c
  2166  00156E  504F               	movf	sprintf@width+1,w,c
  2167  001570  584D               	subwfb	sprintf@len+1,w,c
  2168  001572  B0D8               	btfsc	status,0,c
  2169  001574  D005               	goto	l372
  2170                           
  2171                           ;doprnt.c: 758: width -= len;
  2172  001576  504C               	movf	sprintf@len,w,c
  2173  001578  5E4E               	subwf	sprintf@width,f,c
  2174  00157A  504D               	movf	sprintf@len+1,w,c
  2175  00157C  5A4F               	subwfb	sprintf@width+1,f,c
  2176  00157E  D00D               	goto	l374
  2177  001580                     l372:
  2178                           
  2179                           ;doprnt.c: 759: else
  2180                           ;doprnt.c: 760: width = 0;
  2181  001580  0E00               	movlw	0
  2182  001582  6E4F               	movwf	sprintf@width+1,c
  2183  001584  0E00               	movlw	0
  2184  001586  6E4E               	movwf	sprintf@width,c
  2185                           
  2186                           ;doprnt.c: 764: while(width--)
  2187  001588  D008               	goto	l374
  2188  00158A                     l1909:
  2189                           
  2190                           ;doprnt.c: 765: ((*sp++ = (' ')));
  2191  00158A  C034  FFD9         	movff	sprintf@sp,fsr2l
  2192  00158E  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  2193  001592  0E20               	movlw	32
  2194  001594  6EDF               	movwf	indf2,c
  2195  001596  4A34               	infsnz	sprintf@sp,f,c
  2196  001598  2A35               	incf	sprintf@sp+1,f,c
  2197  00159A                     l374:
  2198  00159A  064E               	decf	sprintf@width,f,c
  2199  00159C  A0D8               	btfss	status,0,c
  2200  00159E  064F               	decf	sprintf@width+1,f,c
  2201  0015A0  284E               	incf	sprintf@width,w,c
  2202  0015A2  E1F3               	bnz	l1909
  2203  0015A4  284F               	incf	sprintf@width+1,w,c
  2204  0015A6  B4D8               	btfsc	status,2,c
  2205  0015A8  D011               	goto	l377
  2206  0015AA  D7EF               	goto	l375
  2207  0015AC                     l1915:
  2208                           
  2209                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2210  0015AC  C04A  FFF6         	movff	sprintf@cp,tblptrl
  2211  0015B0  C04B  FFF7         	movff	sprintf@cp+1,tblptrh
  2212  0015B4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2213  0015B4  6AF8               	clrf	tblptru,c
  2214  0015B6                     	endif
  2215  0015B6                     	if	0	;tblptru may be non-zero
  2216  0015B6                     	endif
  2217  0015B6  C034  FFD9         	movff	sprintf@sp,fsr2l
  2218  0015BA  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  2219  0015BE  0008               	tblrd		*
  2220  0015C0  CFF5 FFDF          	movff	tablat,indf2
  2221  0015C4  4A4A               	infsnz	sprintf@cp,f,c
  2222  0015C6  2A4B               	incf	sprintf@cp+1,f,c
  2223  0015C8  4A34               	infsnz	sprintf@sp,f,c
  2224  0015CA  2A35               	incf	sprintf@sp+1,f,c
  2225  0015CC                     l377:
  2226  0015CC  064C               	decf	sprintf@len,f,c
  2227  0015CE  A0D8               	btfss	status,0,c
  2228  0015D0  064D               	decf	sprintf@len+1,f,c
  2229  0015D2  284C               	incf	sprintf@len,w,c
  2230  0015D4  E1EB               	bnz	l1915
  2231  0015D6  284D               	incf	sprintf@len+1,w,c
  2232  0015D8  B4D8               	btfsc	status,2,c
  2233  0015DA  D0AE               	goto	u1510
  2234  0015DC  D7E7               	goto	l378
  2235  0015DE                     
  2236                           ;doprnt.c: 818: flag |= 0xC0;
  2237  0015DE  0EC0               	movlw	192
  2238  0015E0  1244               	iorwf	sprintf@flag,f,c
  2239                           
  2240                           ;doprnt.c: 822: }
  2241                           
  2242                           ;doprnt.c: 819: break;
  2243  0015E2  D015               	goto	l382
  2244  0015E4                     l364:
  2245  0015E4  C036  FFF6         	movff	sprintf@f,tblptrl
  2246  0015E8  C037  FFF7         	movff	sprintf@f+1,tblptrh
  2247  0015EC  4A36               	infsnz	sprintf@f,f,c
  2248  0015EE  2A37               	incf	sprintf@f+1,f,c
  2249  0015F0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2250  0015F0  6AF8               	clrf	tblptru,c
  2251  0015F2                     	endif
  2252  0015F2                     	if	0	;tblptru may be non-zero
  2253  0015F2                     	endif
  2254  0015F2  0008               	tblrd		*
  2255  0015F4  CFF5 F050          	movff	tablat,sprintf@c
  2256  0015F8  5050               	movf	sprintf@c,w,c
  2257                           
  2258                           ; Switch size 1, requested type "space"
  2259                           ; Number of cases is 3, Range of values is 0 to 117
  2260                           ; switch strategies available:
  2261                           ; Name         Instructions Cycles
  2262                           ; simple_byte           10     6 (average)
  2263                           ;	Chosen strategy is simple_byte
  2264  0015FA  0A00               	xorlw	0	; case 0
  2265  0015FC  B4D8               	btfsc	status,2,c
  2266  0015FE  D0A9               	goto	u1520
  2267  001600  0A73               	xorlw	115	; case 115
  2268  001602  B4D8               	btfsc	status,2,c
  2269  001604  D787               	goto	l367
  2270  001606  0A06               	xorlw	6	; case 117
  2271  001608  B4D8               	btfsc	status,2,c
  2272  00160A  D7E9               	goto	l381
  2273  00160C  D095               	goto	u1510
  2274  00160E                     l382:
  2275                           
  2276                           ;doprnt.c: 1273: {
  2277                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2278  00160E  C048  FFD9         	movff	sprintf@ap,fsr2l
  2279  001612  C049  FFDA         	movff	sprintf@ap+1,fsr2h
  2280  001616  CFDE F045          	movff	postinc2,sprintf@val
  2281  00161A  CFDD F046          	movff	postdec2,sprintf@val+1
  2282  00161E  0E02               	movlw	2
  2283  001620  2648               	addwf	sprintf@ap,f,c
  2284  001622  0E00               	movlw	0
  2285  001624  2249               	addwfc	sprintf@ap+1,f,c
  2286                           
  2287                           ;doprnt.c: 1287: }
  2288                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2289  001626  0E01               	movlw	1
  2290  001628  6E50               	movwf	sprintf@c,c
  2291  00162A                     l1935:
  2292  00162A  0E05               	movlw	5
  2293  00162C  1850               	xorwf	sprintf@c,w,c
  2294  00162E  B4D8               	btfsc	status,2,c
  2295  001630  D015               	goto	u1440
  2296                           
  2297                           ;doprnt.c: 1306: if(val < dpowers[c])
  2298  001632  5050               	movf	sprintf@c,w,c
  2299  001634  0D02               	mullw	2
  2300  001636  0E01               	movlw	low _dpowers
  2301  001638  24F3               	addwf	prodl,w,c
  2302  00163A  6EF6               	movwf	tblptrl,c
  2303  00163C  0E10               	movlw	high _dpowers
  2304  00163E  20F4               	addwfc	prodh,w,c
  2305  001640  6EF7               	movwf	tblptrh,c
  2306  001642                     	if	1	;There are 3 active tblptr bytes
  2307  001642  6AF8               	clrf	tblptru,c
  2308  001644  0E00               	movlw	low (__mediumconst shr (0+16))
  2309  001646  22F8               	addwfc	tblptru,f,c
  2310  001648                     	endif
  2311  001648  0009               	tblrd		*+
  2312  00164A  50F5               	movf	tablat,w,c
  2313  00164C  5C45               	subwf	sprintf@val,w,c
  2314  00164E  0009               	tblrd		*+
  2315  001650  50F5               	movf	tablat,w,c
  2316  001652  5846               	subwfb	sprintf@val+1,w,c
  2317  001654  A0D8               	btfss	status,0,c
  2318  001656  D002               	goto	u1440
  2319                           
  2320                           ;doprnt.c: 1307: break;
  2321  001658  2A50               	incf	sprintf@c,f,c
  2322  00165A  D7E7               	goto	l1935
  2323  00165C                     u1440:
  2324                           
  2325                           ;doprnt.c: 1381: if(width > c)
  2326  00165C  0E80               	movlw	128
  2327  00165E  BE50               	btfsc	sprintf@c,7,c
  2328  001660  0E7F               	movlw	127
  2329  001662  6E40               	movwf	??_sprintf& (0+255),c
  2330  001664  504E               	movf	sprintf@width,w,c
  2331  001666  5C50               	subwf	sprintf@c,w,c
  2332  001668  504F               	movf	sprintf@width+1,w,c
  2333  00166A  0A80               	xorlw	128
  2334  00166C  5840               	subwfb	??_sprintf& (0+255),w,c
  2335  00166E  B0D8               	btfsc	status,0,c
  2336  001670  D007               	goto	l386
  2337                           
  2338                           ;doprnt.c: 1382: width -= c;
  2339  001672  5050               	movf	sprintf@c,w,c
  2340  001674  5E4E               	subwf	sprintf@width,f,c
  2341  001676  0E00               	movlw	0
  2342  001678  BE50               	btfsc	sprintf@c,7,c
  2343  00167A  0EFF               	movlw	255
  2344  00167C  5A4F               	subwfb	sprintf@width+1,f,c
  2345  00167E  D004               	goto	l387
  2346  001680                     l386:
  2347                           
  2348                           ;doprnt.c: 1383: else
  2349                           ;doprnt.c: 1384: width = 0;
  2350  001680  0E00               	movlw	0
  2351  001682  6E4F               	movwf	sprintf@width+1,c
  2352  001684  0E00               	movlw	0
  2353  001686  6E4E               	movwf	sprintf@width,c
  2354  001688                     l387:
  2355                           
  2356                           ;doprnt.c: 1387: if(flag & 0x04) {
  2357  001688  A444               	btfss	sprintf@flag,2,c
  2358  00168A  D010               	goto	l388
  2359  00168C                     
  2360                           ;doprnt.c: 1415: if(width)
  2361  00168C  504E               	movf	sprintf@width,w,c
  2362  00168E  104F               	iorwf	sprintf@width+1,w,c
  2363  001690  B4D8               	btfsc	status,2,c
  2364  001692  D01F               	goto	u1500
  2365                           
  2366                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2367                           
  2368                           ;doprnt.c: 1416: do
  2369  001694  C034  FFD9         	movff	sprintf@sp,fsr2l
  2370  001698  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  2371  00169C  0E30               	movlw	48
  2372  00169E  6EDF               	movwf	indf2,c
  2373  0016A0  4A34               	infsnz	sprintf@sp,f,c
  2374  0016A2  2A35               	incf	sprintf@sp+1,f,c
  2375                           
  2376                           ;doprnt.c: 1418: while(--width);
  2377  0016A4  064E               	decf	sprintf@width,f,c
  2378  0016A6  A0D8               	btfss	status,0,c
  2379  0016A8  064F               	decf	sprintf@width+1,f,c
  2380  0016AA  D7F0               	goto	L10
  2381  0016AC                     l388:
  2382                           
  2383                           ;doprnt.c: 1422: {
  2384                           ;doprnt.c: 1424: if(width
  2385                           ;doprnt.c: 1428: )
  2386  0016AC  504E               	movf	sprintf@width,w,c
  2387  0016AE  104F               	iorwf	sprintf@width+1,w,c
  2388  0016B0  B4D8               	btfsc	status,2,c
  2389  0016B2  D00F               	goto	u1500
  2390  0016B4                     u1490:
  2391                           
  2392                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2393                           
  2394                           ;doprnt.c: 1429: do
  2395  0016B4  C034  FFD9         	movff	sprintf@sp,fsr2l
  2396  0016B8  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  2397  0016BC  0E20               	movlw	32
  2398  0016BE  6EDF               	movwf	indf2,c
  2399  0016C0  4A34               	infsnz	sprintf@sp,f,c
  2400  0016C2  2A35               	incf	sprintf@sp+1,f,c
  2401                           
  2402                           ;doprnt.c: 1431: while(--width);
  2403  0016C4  064E               	decf	sprintf@width,f,c
  2404  0016C6  A0D8               	btfss	status,0,c
  2405  0016C8  064F               	decf	sprintf@width+1,f,c
  2406  0016CA  504E               	movf	sprintf@width,w,c
  2407  0016CC  104F               	iorwf	sprintf@width+1,w,c
  2408  0016CE  A4D8               	btfss	status,2,c
  2409  0016D0  D7F1               	goto	u1490
  2410  0016D2                     u1500:
  2411                           
  2412                           ;doprnt.c: 1469: }
  2413                           ;doprnt.c: 1472: prec = c;
  2414  0016D2  C050  F047         	movff	sprintf@c,sprintf@prec
  2415                           
  2416                           ;doprnt.c: 1474: while(prec--) {
  2417  0016D6  D02C               	goto	l396
  2418  0016D8                     
  2419                           ;doprnt.c: 1478: {
  2420                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2421  0016D8  5047               	movf	sprintf@prec,w,c
  2422  0016DA  0D02               	mullw	2
  2423  0016DC  0E01               	movlw	low _dpowers
  2424  0016DE  24F3               	addwf	prodl,w,c
  2425  0016E0  6EF6               	movwf	tblptrl,c
  2426  0016E2  0E10               	movlw	high _dpowers
  2427  0016E4  20F4               	addwfc	prodh,w,c
  2428  0016E6  6EF7               	movwf	tblptrh,c
  2429  0016E8                     	if	1	;There are 3 active tblptr bytes
  2430  0016E8  6AF8               	clrf	tblptru,c
  2431  0016EA  0E00               	movlw	low (__mediumconst shr (0+16))
  2432  0016EC  22F8               	addwfc	tblptru,f,c
  2433  0016EE                     	endif
  2434  0016EE  0009               	tblrd		*+
  2435  0016F0  CFF5 F02A          	movff	tablat,___lwdiv@divisor
  2436  0016F4  000A               	tblrd		*-
  2437  0016F6  CFF5 F02B          	movff	tablat,___lwdiv@divisor+1
  2438  0016FA  C045  F028         	movff	sprintf@val,___lwdiv@dividend
  2439  0016FE  C046  F029         	movff	sprintf@val+1,___lwdiv@dividend+1
  2440  001702  ECCE  F00C         	call	___lwdiv	;wreg free
  2441  001706  C028  F02F         	movff	?___lwdiv,___lwmod@dividend
  2442  00170A  C029  F030         	movff	?___lwdiv+1,___lwmod@dividend+1
  2443  00170E  0E00               	movlw	0
  2444  001710  6E32               	movwf	___lwmod@divisor+1,c
  2445  001712  0E0A               	movlw	10
  2446  001714  6E31               	movwf	___lwmod@divisor,c
  2447  001716  EC1B  F00D         	call	___lwmod	;wreg free
  2448  00171A  502F               	movf	?___lwmod,w,c
  2449  00171C  0F30               	addlw	48
  2450  00171E  6E50               	movwf	sprintf@c,c
  2451                           
  2452                           ;doprnt.c: 1523: }
  2453                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2454  001720  C034  FFD9         	movff	sprintf@sp,fsr2l
  2455  001724  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  2456  001728  C050  FFDF         	movff	sprintf@c,indf2
  2457  00172C  4A34               	infsnz	sprintf@sp,f,c
  2458  00172E  2A35               	incf	sprintf@sp+1,f,c
  2459  001730                     l396:
  2460  001730  0647               	decf	sprintf@prec,f,c
  2461  001732  2847               	incf	sprintf@prec,w,c
  2462  001734  A4D8               	btfss	status,2,c
  2463  001736  D7D0               	goto	l397
  2464  001738                     u1510:
  2465  001738  C036  FFF6         	movff	sprintf@f,tblptrl
  2466  00173C  C037  FFF7         	movff	sprintf@f+1,tblptrh
  2467  001740  4A36               	infsnz	sprintf@f,f,c
  2468  001742  2A37               	incf	sprintf@f+1,f,c
  2469  001744                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2470  001744  6AF8               	clrf	tblptru,c
  2471  001746                     	endif
  2472  001746                     	if	0	;tblptru may be non-zero
  2473  001746                     	endif
  2474  001746  0008               	tblrd		*
  2475  001748  CFF5 F050          	movff	tablat,sprintf@c
  2476  00174C  5050               	movf	sprintf@c,w,c
  2477  00174E  A4D8               	btfss	status,2,c
  2478  001750  D680               	goto	l353
  2479  001752                     u1520:
  2480                           
  2481                           ;doprnt.c: 1538: *sp = 0;
  2482                           
  2483                           ;doprnt.c: 1525: }
  2484                           ;doprnt.c: 1533: }
  2485                           ;doprnt.c: 1535: alldone:
  2486  001752  C034  FFD9         	movff	sprintf@sp,fsr2l
  2487  001756  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  2488  00175A  0E00               	movlw	0
  2489  00175C  6EDF               	movwf	indf2,c
  2490  00175E  0012               	return	
  2491  001760                     __end_of_sprintf:
  2492                           	opt stack 0
  2493                           tblptru	equ	0xFF8
  2494                           tblptrh	equ	0xFF7
  2495                           tblptrl	equ	0xFF6
  2496                           tablat	equ	0xFF5
  2497                           prodh	equ	0xFF4
  2498                           prodl	equ	0xFF3
  2499                           postinc0	equ	0xFEE
  2500                           wreg	equ	0xFE8
  2501                           postdec1	equ	0xFE5
  2502                           fsr1l	equ	0xFE1
  2503                           indf2	equ	0xFDF
  2504                           postinc2	equ	0xFDE
  2505                           postdec2	equ	0xFDD
  2506                           fsr2h	equ	0xFDA
  2507                           fsr2l	equ	0xFD9
  2508                           status	equ	0xFD8
  2509                           
  2510 ;; *************** function _isdigit *****************
  2511 ;; Defined at:
  2512 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;  c               1    wreg     unsigned char 
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;  c               1   41[COMRAM] unsigned char 
  2517 ;; Return value:  Size  Location     Type
  2518 ;;		None               void
  2519 ;; Registers used:
  2520 ;;		wreg, status,2, status,0
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2527 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2530 ;;Total ram usage:        3 bytes
  2531 ;; Hardware stack levels used:    1
  2532 ;; Hardware stack levels required when called:    2
  2533 ;; This function calls:
  2534 ;;		Nothing
  2535 ;; This function is called by:
  2536 ;;		_sprintf
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text5
  2541  001CEA                     __ptext5:
  2542                           	opt stack 0
  2543  001CEA                     _isdigit:
  2544                           	opt stack 26
  2545                           
  2546                           ;incstack = 0
  2547                           ;isdigit@c stored from wreg
  2548  001CEA  6E2A               	movwf	isdigit@c,c
  2549  001CEC  0E00               	movlw	0
  2550  001CEE  6E29               	movwf	_isdigit$1321,c
  2551  001CF0  0E3A               	movlw	58
  2552  001CF2  602A               	cpfslt	isdigit@c,c
  2553  001CF4  D005               	goto	l730
  2554  001CF6  0E2F               	movlw	47
  2555  001CF8  642A               	cpfsgt	isdigit@c,c
  2556  001CFA  D002               	goto	l730
  2557  001CFC  0E01               	movlw	1
  2558  001CFE  6E29               	movwf	_isdigit$1321,c
  2559  001D00                     l730:
  2560  001D00  C029  F028         	movff	_isdigit$1321,??_isdigit
  2561  001D04  3028               	rrcf	??_isdigit,w,c
  2562  001D06  0012               	return	
  2563  001D08                     __end_of_isdigit:
  2564                           	opt stack 0
  2565                           tblptru	equ	0xFF8
  2566                           tblptrh	equ	0xFF7
  2567                           tblptrl	equ	0xFF6
  2568                           tablat	equ	0xFF5
  2569                           prodh	equ	0xFF4
  2570                           prodl	equ	0xFF3
  2571                           postinc0	equ	0xFEE
  2572                           wreg	equ	0xFE8
  2573                           postdec1	equ	0xFE5
  2574                           fsr1l	equ	0xFE1
  2575                           indf2	equ	0xFDF
  2576                           postinc2	equ	0xFDE
  2577                           postdec2	equ	0xFDD
  2578                           fsr2h	equ	0xFDA
  2579                           fsr2l	equ	0xFD9
  2580                           status	equ	0xFD8
  2581                           
  2582 ;; *************** function ___wmul *****************
  2583 ;; Defined at:
  2584 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  multiplier      2   39[COMRAM] unsigned int 
  2587 ;;  multiplicand    2   41[COMRAM] unsigned int 
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;  product         2   43[COMRAM] unsigned int 
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  2   39[COMRAM] unsigned int 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0, prodl, prodh
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2599 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;Total ram usage:        6 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    2
  2606 ;; This function calls:
  2607 ;;		Nothing
  2608 ;; This function is called by:
  2609 ;;		_sprintf
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           	psect	text6
  2614  001C36                     __ptext6:
  2615                           	opt stack 0
  2616  001C36                     ___wmul:
  2617                           	opt stack 26
  2618                           
  2619                           ;incstack = 0
  2620  001C36  5028               	movf	___wmul@multiplier,w,c
  2621  001C38  022A               	mulwf	___wmul@multiplicand,c
  2622  001C3A  CFF3 F02C          	movff	prodl,___wmul@product
  2623  001C3E  CFF4 F02D          	movff	prodh,___wmul@product+1
  2624  001C42  5028               	movf	___wmul@multiplier,w,c
  2625  001C44  022B               	mulwf	___wmul@multiplicand+1,c
  2626  001C46  50F3               	movf	prodl,w,c
  2627  001C48  262D               	addwf	___wmul@product+1,f,c
  2628  001C4A  5029               	movf	___wmul@multiplier+1,w,c
  2629  001C4C  022A               	mulwf	___wmul@multiplicand,c
  2630  001C4E  50F3               	movf	prodl,w,c
  2631  001C50  262D               	addwf	___wmul@product+1,f,c
  2632  001C52  C02C  F028         	movff	___wmul@product,?___wmul
  2633  001C56  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  2634  001C5A  0012               	return	
  2635  001C5C                     __end_of___wmul:
  2636                           	opt stack 0
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           prodh	equ	0xFF4
  2642                           prodl	equ	0xFF3
  2643                           postinc0	equ	0xFEE
  2644                           wreg	equ	0xFE8
  2645                           postdec1	equ	0xFE5
  2646                           fsr1l	equ	0xFE1
  2647                           indf2	equ	0xFDF
  2648                           postinc2	equ	0xFDE
  2649                           postdec2	equ	0xFDD
  2650                           fsr2h	equ	0xFDA
  2651                           fsr2l	equ	0xFD9
  2652                           status	equ	0xFD8
  2653                           
  2654 ;; *************** function ___lwmod *****************
  2655 ;; Defined at:
  2656 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  dividend        2   46[COMRAM] unsigned int 
  2659 ;;  divisor         2   48[COMRAM] unsigned int 
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;  counter         1   50[COMRAM] unsigned char 
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  2   46[COMRAM] unsigned int 
  2664 ;; Registers used:
  2665 ;;		wreg, status,2, status,0
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2675 ;;Total ram usage:        5 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    2
  2678 ;; This function calls:
  2679 ;;		Nothing
  2680 ;; This function is called by:
  2681 ;;		_sprintf
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           	psect	text7
  2686  001A36                     __ptext7:
  2687                           	opt stack 0
  2688  001A36                     ___lwmod:
  2689                           	opt stack 26
  2690                           
  2691                           ;incstack = 0
  2692  001A36  5031               	movf	___lwmod@divisor,w,c
  2693  001A38  1032               	iorwf	___lwmod@divisor+1,w,c
  2694  001A3A  B4D8               	btfsc	status,2,c
  2695  001A3C  D018               	goto	l824
  2696  001A3E  0E01               	movlw	1
  2697  001A40  6E33               	movwf	___lwmod@counter,c
  2698  001A42  D004               	goto	l819
  2699  001A44  90D8               	bcf	status,0,c
  2700  001A46  3631               	rlcf	___lwmod@divisor,f,c
  2701  001A48  3632               	rlcf	___lwmod@divisor+1,f,c
  2702  001A4A  2A33               	incf	___lwmod@counter,f,c
  2703  001A4C                     l819:
  2704  001A4C  AE32               	btfss	___lwmod@divisor+1,7,c
  2705  001A4E  D7FA               	goto	l820
  2706  001A50                     u1320:
  2707  001A50  5031               	movf	___lwmod@divisor,w,c
  2708  001A52  5C2F               	subwf	___lwmod@dividend,w,c
  2709  001A54  5032               	movf	___lwmod@divisor+1,w,c
  2710  001A56  5830               	subwfb	___lwmod@dividend+1,w,c
  2711  001A58  A0D8               	btfss	status,0,c
  2712  001A5A  D004               	goto	l823
  2713  001A5C  5031               	movf	___lwmod@divisor,w,c
  2714  001A5E  5E2F               	subwf	___lwmod@dividend,f,c
  2715  001A60  5032               	movf	___lwmod@divisor+1,w,c
  2716  001A62  5A30               	subwfb	___lwmod@dividend+1,f,c
  2717  001A64                     l823:
  2718  001A64  90D8               	bcf	status,0,c
  2719  001A66  3232               	rrcf	___lwmod@divisor+1,f,c
  2720  001A68  3231               	rrcf	___lwmod@divisor,f,c
  2721  001A6A  2E33               	decfsz	___lwmod@counter,f,c
  2722  001A6C  D7F1               	goto	u1320
  2723  001A6E                     l824:
  2724  001A6E  C02F  F02F         	movff	___lwmod@dividend,?___lwmod
  2725  001A72  C030  F030         	movff	___lwmod@dividend+1,?___lwmod+1
  2726  001A76  0012               	return		;funcret
  2727  001A78                     __end_of___lwmod:
  2728                           	opt stack 0
  2729                           tblptru	equ	0xFF8
  2730                           tblptrh	equ	0xFF7
  2731                           tblptrl	equ	0xFF6
  2732                           tablat	equ	0xFF5
  2733                           prodh	equ	0xFF4
  2734                           prodl	equ	0xFF3
  2735                           postinc0	equ	0xFEE
  2736                           wreg	equ	0xFE8
  2737                           postdec1	equ	0xFE5
  2738                           fsr1l	equ	0xFE1
  2739                           indf2	equ	0xFDF
  2740                           postinc2	equ	0xFDE
  2741                           postdec2	equ	0xFDD
  2742                           fsr2h	equ	0xFDA
  2743                           fsr2l	equ	0xFD9
  2744                           status	equ	0xFD8
  2745                           
  2746 ;; *************** function ___lwdiv *****************
  2747 ;; Defined at:
  2748 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;  dividend        2   39[COMRAM] unsigned int 
  2751 ;;  divisor         2   41[COMRAM] unsigned int 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;  quotient        2   43[COMRAM] unsigned int 
  2754 ;;  counter         1   45[COMRAM] unsigned char 
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  2   39[COMRAM] unsigned int 
  2757 ;; Registers used:
  2758 ;;		wreg, status,2, status,0
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2764 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;Total ram usage:        7 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    2
  2771 ;; This function calls:
  2772 ;;		Nothing
  2773 ;; This function is called by:
  2774 ;;		_sprintf
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text8
  2779  00199C                     __ptext8:
  2780                           	opt stack 0
  2781  00199C                     ___lwdiv:
  2782                           	opt stack 26
  2783                           
  2784                           ;incstack = 0
  2785  00199C  0E00               	movlw	0
  2786  00199E  6E2D               	movwf	___lwdiv@quotient+1,c
  2787  0019A0  0E00               	movlw	0
  2788  0019A2  6E2C               	movwf	___lwdiv@quotient,c
  2789  0019A4  502A               	movf	___lwdiv@divisor,w,c
  2790  0019A6  102B               	iorwf	___lwdiv@divisor+1,w,c
  2791  0019A8  B4D8               	btfsc	status,2,c
  2792  0019AA  D01C               	goto	l814
  2793  0019AC  0E01               	movlw	1
  2794  0019AE  6E2E               	movwf	___lwdiv@counter,c
  2795  0019B0  D004               	goto	l809
  2796  0019B2  90D8               	bcf	status,0,c
  2797  0019B4  362A               	rlcf	___lwdiv@divisor,f,c
  2798  0019B6  362B               	rlcf	___lwdiv@divisor+1,f,c
  2799  0019B8  2A2E               	incf	___lwdiv@counter,f,c
  2800  0019BA                     l809:
  2801  0019BA  AE2B               	btfss	___lwdiv@divisor+1,7,c
  2802  0019BC  D7FA               	goto	l810
  2803  0019BE                     u1290:
  2804  0019BE  90D8               	bcf	status,0,c
  2805  0019C0  362C               	rlcf	___lwdiv@quotient,f,c
  2806  0019C2  362D               	rlcf	___lwdiv@quotient+1,f,c
  2807  0019C4  502A               	movf	___lwdiv@divisor,w,c
  2808  0019C6  5C28               	subwf	___lwdiv@dividend,w,c
  2809  0019C8  502B               	movf	___lwdiv@divisor+1,w,c
  2810  0019CA  5829               	subwfb	___lwdiv@dividend+1,w,c
  2811  0019CC  A0D8               	btfss	status,0,c
  2812  0019CE  D005               	goto	l813
  2813  0019D0  502A               	movf	___lwdiv@divisor,w,c
  2814  0019D2  5E28               	subwf	___lwdiv@dividend,f,c
  2815  0019D4  502B               	movf	___lwdiv@divisor+1,w,c
  2816  0019D6  5A29               	subwfb	___lwdiv@dividend+1,f,c
  2817  0019D8  802C               	bsf	___lwdiv@quotient,0,c
  2818  0019DA                     l813:
  2819  0019DA  90D8               	bcf	status,0,c
  2820  0019DC  322B               	rrcf	___lwdiv@divisor+1,f,c
  2821  0019DE  322A               	rrcf	___lwdiv@divisor,f,c
  2822  0019E0  2E2E               	decfsz	___lwdiv@counter,f,c
  2823  0019E2  D7ED               	goto	u1290
  2824  0019E4                     l814:
  2825  0019E4  C02C  F028         	movff	___lwdiv@quotient,?___lwdiv
  2826  0019E8  C02D  F029         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2827  0019EC  0012               	return		;funcret
  2828  0019EE                     __end_of___lwdiv:
  2829                           	opt stack 0
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           prodh	equ	0xFF4
  2835                           prodl	equ	0xFF3
  2836                           postinc0	equ	0xFEE
  2837                           wreg	equ	0xFE8
  2838                           postdec1	equ	0xFE5
  2839                           fsr1l	equ	0xFE1
  2840                           indf2	equ	0xFDF
  2841                           postinc2	equ	0xFDE
  2842                           postdec2	equ	0xFDD
  2843                           fsr2h	equ	0xFDA
  2844                           fsr2l	equ	0xFD9
  2845                           status	equ	0xFD8
  2846                           
  2847 ;; *************** function _setupSerial *****************
  2848 ;; Defined at:
  2849 ;;		line 9 in file "Serial.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;  dummy           1   39[COMRAM] unsigned char 
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		wreg, status,2
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;Total ram usage:        1 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    2
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_main
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text9
  2878  001C0E                     __ptext9:
  2879                           	opt stack 0
  2880  001C0E                     _setupSerial:
  2881                           	opt stack 28
  2882                           
  2883                           ;Serial.c: 10: unsigned char dummy;
  2884                           ;Serial.c: 11: BAUDCONbits.BRG16 = 0;
  2885                           
  2886                           ;incstack = 0
  2887  001C0E  96B8               	bcf	4024,3,c	;volatile
  2888                           
  2889                           ;Serial.c: 12: TXSTA = 0;
  2890  001C10  0E00               	movlw	0
  2891  001C12  6EAC               	movwf	4012,c	;volatile
  2892                           
  2893                           ;Serial.c: 13: SPBRG = 25;
  2894  001C14  0E19               	movlw	25
  2895  001C16  6EAF               	movwf	4015,c	;volatile
  2896                           
  2897                           ;Serial.c: 14: SPBRGH = 0;
  2898  001C18  0E00               	movlw	0
  2899  001C1A  6EB0               	movwf	4016,c	;volatile
  2900                           
  2901                           ;Serial.c: 15: TXSTAbits.BRGH = 1;
  2902  001C1C  84AC               	bsf	4012,2,c	;volatile
  2903                           
  2904                           ;Serial.c: 16: TXSTAbits.TXEN = 1;
  2905  001C1E  8AAC               	bsf	4012,5,c	;volatile
  2906                           
  2907                           ;Serial.c: 18: RCSTA = 0;
  2908  001C20  0E00               	movlw	0
  2909  001C22  6EAB               	movwf	4011,c	;volatile
  2910                           
  2911                           ;Serial.c: 19: RCSTAbits.CREN = 1;
  2912  001C24  88AB               	bsf	4011,4,c	;volatile
  2913                           
  2914                           ;Serial.c: 20: RCSTAbits.SPEN = 1;
  2915  001C26  8EAB               	bsf	4011,7,c	;volatile
  2916                           
  2917                           ;Serial.c: 21: ;
  2918                           ;Serial.c: 22: dummy = RCREG;
  2919  001C28  CFAE F028          	movff	4014,setupSerial@dummy	;volatile
  2920                           
  2921                           ;Serial.c: 23: dummy = RCREG;
  2922  001C2C  CFAE F028          	movff	4014,setupSerial@dummy	;volatile
  2923                           
  2924                           ;Serial.c: 24: TRISCbits.TRISC6 = 0;
  2925  001C30  9C94               	bcf	3988,6,c	;volatile
  2926                           
  2927                           ;Serial.c: 25: TRISCbits.TRISC7 = 1;
  2928  001C32  8E94               	bsf	3988,7,c	;volatile
  2929  001C34  0012               	return	
  2930  001C36                     __end_of_setupSerial:
  2931                           	opt stack 0
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           prodh	equ	0xFF4
  2937                           prodl	equ	0xFF3
  2938                           postinc0	equ	0xFEE
  2939                           wreg	equ	0xFE8
  2940                           postdec1	equ	0xFE5
  2941                           fsr1l	equ	0xFE1
  2942                           indf2	equ	0xFDF
  2943                           postinc2	equ	0xFDE
  2944                           postdec2	equ	0xFDD
  2945                           fsr2h	equ	0xFDA
  2946                           fsr2l	equ	0xFD9
  2947                           status	equ	0xFD8
  2948                           
  2949 ;; *************** function _setupPorts *****************
  2950 ;; Defined at:
  2951 ;;		line 297 in file "DigitalClock.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;		None
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;		None
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  1    wreg      void 
  2958 ;; Registers used:
  2959 ;;		wreg, status,2
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;Total ram usage:        0 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; Hardware stack levels required when called:    2
  2972 ;; This function calls:
  2973 ;;		Nothing
  2974 ;; This function is called by:
  2975 ;;		_main
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           	psect	text10
  2980  001D08                     __ptext10:
  2981                           	opt stack 0
  2982  001D08                     _setupPorts:
  2983                           	opt stack 28
  2984                           
  2985                           ;DigitalClock.c: 299: ADCON0 = 0;
  2986                           
  2987                           ;incstack = 0
  2988  001D08  0E00               	movlw	0
  2989  001D0A  6EC2               	movwf	4034,c	;volatile
  2990                           
  2991                           ;DigitalClock.c: 300: ADCON1 = 0b00001100;
  2992  001D0C  0E0C               	movlw	12
  2993  001D0E  6EC1               	movwf	4033,c	;volatile
  2994                           
  2995                           ;DigitalClock.c: 301: TRISB = 0xFF;
  2996  001D10  6893               	setf	3987,c	;volatile
  2997                           
  2998                           ;DigitalClock.c: 302: TRISC = 0x80;
  2999  001D12  0E80               	movlw	128
  3000  001D14  6E94               	movwf	3988,c	;volatile
  3001                           
  3002                           ;DigitalClock.c: 303: TRISA = 0xFF;
  3003  001D16  6892               	setf	3986,c	;volatile
  3004                           
  3005                           ;DigitalClock.c: 304: TRISD = 0x00;
  3006  001D18  0E00               	movlw	0
  3007  001D1A  6E95               	movwf	3989,c	;volatile
  3008                           
  3009                           ;DigitalClock.c: 305: TRISE = 0x00;
  3010  001D1C  0E00               	movlw	0
  3011  001D1E  6E96               	movwf	3990,c	;volatile
  3012  001D20  0012               	return		;funcret
  3013  001D22                     __end_of_setupPorts:
  3014                           	opt stack 0
  3015                           tblptru	equ	0xFF8
  3016                           tblptrh	equ	0xFF7
  3017                           tblptrl	equ	0xFF6
  3018                           tablat	equ	0xFF5
  3019                           prodh	equ	0xFF4
  3020                           prodl	equ	0xFF3
  3021                           postinc0	equ	0xFEE
  3022                           wreg	equ	0xFE8
  3023                           postdec1	equ	0xFE5
  3024                           fsr1l	equ	0xFE1
  3025                           indf2	equ	0xFDF
  3026                           postinc2	equ	0xFDE
  3027                           postdec2	equ	0xFDD
  3028                           fsr2h	equ	0xFDA
  3029                           fsr2l	equ	0xFD9
  3030                           status	equ	0xFD8
  3031                           
  3032 ;; *************** function _send_string_no_lib *****************
  3033 ;; Defined at:
  3034 ;;		line 80 in file "Serial.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  p               2   40[COMRAM] PTR unsigned char 
  3037 ;;		 -> main@alarm_response(13), main@time_response(9), STR_1(7), 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;		None
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      void 
  3042 ;; Registers used:
  3043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3049 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;Total ram usage:        2 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    3
  3056 ;; This function calls:
  3057 ;;		_send_byte_no_lib
  3058 ;; This function is called by:
  3059 ;;		_main
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text11
  3064  00189A                     __ptext11:
  3065                           	opt stack 0
  3066  00189A                     _send_string_no_lib:
  3067                           	opt stack 27
  3068                           
  3069                           ;Serial.c: 81: while (*p) {
  3070                           
  3071                           ;incstack = 0
  3072  00189A  D015               	goto	l273
  3073  00189C                     
  3074                           ;Serial.c: 82: send_byte_no_lib(*p);
  3075  00189C  C029  FFF6         	movff	send_string_no_lib@p,tblptrl
  3076  0018A0  C02A  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  3077  0018A4  0E00               	movlw	low (__smallconst shr (0+16))
  3078  0018A6  6EF8               	movwf	tblptru,c
  3079  0018A8  0E0F               	movlw	(high __ramtop+-1)
  3080  0018AA  64F7               	cpfsgt	tblptrh,c
  3081  0018AC  D003               	bra	u1617
  3082  0018AE  0008               	tblrd		*
  3083  0018B0  50F5               	movf	tablat,w,c
  3084  0018B2  D005               	bra	u1610
  3085  0018B4                     u1617:
  3086  0018B4  CFF6 FFD9          	movff	tblptrl,fsr2l
  3087  0018B8  CFF7 FFDA          	movff	tblptrh,fsr2h
  3088  0018BC  50DF               	movf	indf2,w,c
  3089  0018BE                     u1610:
  3090  0018BE  EC9D  F00E         	call	_send_byte_no_lib
  3091                           
  3092                           ;Serial.c: 83: p++;
  3093  0018C2  4A29               	infsnz	send_string_no_lib@p,f,c
  3094  0018C4  2A2A               	incf	send_string_no_lib@p+1,f,c
  3095  0018C6                     l273:
  3096  0018C6  C029  FFF6         	movff	send_string_no_lib@p,tblptrl
  3097  0018CA  C02A  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  3098  0018CE  0E00               	movlw	low (__smallconst shr (0+16))
  3099  0018D0  6EF8               	movwf	tblptru,c
  3100  0018D2  0E0F               	movlw	(high __ramtop+-1)
  3101  0018D4  64F7               	cpfsgt	tblptrh,c
  3102  0018D6  D003               	bra	u1627
  3103  0018D8  0008               	tblrd		*
  3104  0018DA  50F5               	movf	tablat,w,c
  3105  0018DC  D005               	bra	u1620
  3106  0018DE                     u1627:
  3107  0018DE  CFF6 FFD9          	movff	tblptrl,fsr2l
  3108  0018E2  CFF7 FFDA          	movff	tblptrh,fsr2h
  3109  0018E6  50DF               	movf	indf2,w,c
  3110  0018E8                     u1620:
  3111  0018E8  0900               	iorlw	0
  3112  0018EA  B4D8               	btfsc	status,2,c
  3113  0018EC  0012               	return	
  3114  0018EE  D7D6               	goto	l274
  3115  0018F0                     __end_of_send_string_no_lib:
  3116                           	opt stack 0
  3117                           tblptru	equ	0xFF8
  3118                           tblptrh	equ	0xFF7
  3119                           tblptrl	equ	0xFF6
  3120                           tablat	equ	0xFF5
  3121                           prodh	equ	0xFF4
  3122                           prodl	equ	0xFF3
  3123                           postinc0	equ	0xFEE
  3124                           wreg	equ	0xFE8
  3125                           postdec1	equ	0xFE5
  3126                           fsr1l	equ	0xFE1
  3127                           indf2	equ	0xFDF
  3128                           postinc2	equ	0xFDE
  3129                           postdec2	equ	0xFDD
  3130                           fsr2h	equ	0xFDA
  3131                           fsr2l	equ	0xFD9
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function _send_byte_no_lib *****************
  3135 ;; Defined at:
  3136 ;;		line 72 in file "Serial.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;  c               1    wreg     unsigned char 
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;  c               1   39[COMRAM] unsigned char 
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  1    wreg      void 
  3143 ;; Registers used:
  3144 ;;		wreg
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;Total ram usage:        1 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:    2
  3157 ;; This function calls:
  3158 ;;		Nothing
  3159 ;; This function is called by:
  3160 ;;		_send_string_no_lib
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text12
  3165  001D3A                     __ptext12:
  3166                           	opt stack 0
  3167  001D3A                     _send_byte_no_lib:
  3168                           	opt stack 27
  3169                           
  3170                           ;incstack = 0
  3171                           ;send_byte_no_lib@c stored from wreg
  3172  001D3A  6E28               	movwf	send_byte_no_lib@c,c
  3173                           
  3174                           ;Serial.c: 73: while (!TXSTAbits.TRMT)
  3175  001D3C  D001               	goto	l267
  3176  001D3E                     l268:
  3177  001D3E  0004               	clrwdt		;# 
  3178  001D40                     l267:
  3179  001D40  A2AC               	btfss	4012,1,c	;volatile
  3180  001D42  D7FD               	goto	l268
  3181                           
  3182                           ;Serial.c: 76: }
  3183                           ;Serial.c: 77: TXREG = c;
  3184  001D44  C028  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  3185  001D48  0012               	return		;funcret
  3186  001D4A                     __end_of_send_byte_no_lib:
  3187                           	opt stack 0
  3188                           tblptru	equ	0xFF8
  3189                           tblptrh	equ	0xFF7
  3190                           tblptrl	equ	0xFF6
  3191                           tablat	equ	0xFF5
  3192                           prodh	equ	0xFF4
  3193                           prodl	equ	0xFF3
  3194                           postinc0	equ	0xFEE
  3195                           wreg	equ	0xFE8
  3196                           postdec1	equ	0xFE5
  3197                           fsr1l	equ	0xFE1
  3198                           indf2	equ	0xFDF
  3199                           postinc2	equ	0xFDE
  3200                           postdec2	equ	0xFDD
  3201                           fsr2h	equ	0xFDA
  3202                           fsr2l	equ	0xFD9
  3203                           status	equ	0xFD8
  3204                           
  3205 ;; *************** function _read_byte_no_lib *****************
  3206 ;; Defined at:
  3207 ;;		line 66 in file "Serial.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;		None
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  c               1   39[COMRAM] unsigned char 
  3212 ;; Return value:  Size  Location     Type
  3213 ;;                  1    wreg      unsigned char 
  3214 ;; Registers used:
  3215 ;;		wreg, status,2
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/0
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;Total ram usage:        1 bytes
  3226 ;; Hardware stack levels used:    1
  3227 ;; Hardware stack levels required when called:    2
  3228 ;; This function calls:
  3229 ;;		Nothing
  3230 ;; This function is called by:
  3231 ;;		_main
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           	psect	text13
  3236  001D54                     __ptext13:
  3237                           	opt stack 0
  3238  001D54                     _read_byte_no_lib:
  3239                           	opt stack 28
  3240                           
  3241                           ;Serial.c: 67: unsigned char c;
  3242                           ;Serial.c: 68: c = RCREG;
  3243                           
  3244                           ;incstack = 0
  3245  001D54  CFAE F028          	movff	4014,read_byte_no_lib@c	;volatile
  3246                           
  3247                           ;Serial.c: 69: return c;
  3248  001D58  5028               	movf	read_byte_no_lib@c,w,c
  3249  001D5A  0012               	return	
  3250  001D5C                     __end_of_read_byte_no_lib:
  3251                           	opt stack 0
  3252                           tblptru	equ	0xFF8
  3253                           tblptrh	equ	0xFF7
  3254                           tblptrl	equ	0xFF6
  3255                           tablat	equ	0xFF5
  3256                           prodh	equ	0xFF4
  3257                           prodl	equ	0xFF3
  3258                           postinc0	equ	0xFEE
  3259                           wreg	equ	0xFE8
  3260                           postdec1	equ	0xFE5
  3261                           fsr1l	equ	0xFE1
  3262                           indf2	equ	0xFDF
  3263                           postinc2	equ	0xFDE
  3264                           postdec2	equ	0xFDD
  3265                           fsr2h	equ	0xFDA
  3266                           fsr2l	equ	0xFD9
  3267                           status	equ	0xFD8
  3268                           
  3269 ;; *************** function _lcd_init *****************
  3270 ;; Defined at:
  3271 ;;		line 63 in file "Lcd.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;		None
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  i               1   49[COMRAM] unsigned char 
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  1    wreg      void 
  3278 ;; Registers used:
  3279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;Total ram usage:        1 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; Hardware stack levels required when called:    5
  3292 ;; This function calls:
  3293 ;;		_delay_ms
  3294 ;;		_lcd_send_byte
  3295 ;;		_lcd_send_nibble
  3296 ;; This function is called by:
  3297 ;;		_main
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           	psect	text14
  3302  001838                     __ptext14:
  3303                           	opt stack 0
  3304  001838                     _lcd_init:
  3305                           	opt stack 25
  3306                           
  3307                           ;Lcd.c: 65: unsigned char i;
  3308                           ;Lcd.c: 68: PORTEbits.RE2 = 0;
  3309                           
  3310                           ;incstack = 0
  3311  001838  9484               	bcf	3972,2,c	;volatile
  3312                           
  3313                           ;Lcd.c: 70: PORTEbits.RE1 = 0;
  3314  00183A  9284               	bcf	3972,1,c	;volatile
  3315                           
  3316                           ;Lcd.c: 72: delay_ms(25);
  3317  00183C  0E00               	movlw	0
  3318  00183E  6E29               	movwf	delay_ms@n+1,c
  3319  001840  0E19               	movlw	25
  3320  001842  6E28               	movwf	delay_ms@n,c
  3321  001844  EC2E  F00E         	call	_delay_ms	;wreg free
  3322                           
  3323                           ;Lcd.c: 73: for (i = 1; i <= 3; ++i) {
  3324  001848  0E01               	movlw	1
  3325  00184A  6E32               	movwf	lcd_init@i,c
  3326  00184C                     l2061:
  3327  00184C  0E03               	movlw	3
  3328  00184E  6432               	cpfsgt	lcd_init@i,c
  3329  001850  D001               	goto	l307
  3330  001852  D00B               	goto	u1580
  3331  001854                     l307:
  3332                           
  3333                           ;Lcd.c: 74: lcd_send_nibble(3);
  3334  001854  0E03               	movlw	3
  3335  001856  EC64  F00E         	call	_lcd_send_nibble
  3336                           
  3337                           ;Lcd.c: 76: delay_ms(6);
  3338  00185A  0E00               	movlw	0
  3339  00185C  6E29               	movwf	delay_ms@n+1,c
  3340  00185E  0E06               	movlw	6
  3341  001860  6E28               	movwf	delay_ms@n,c
  3342  001862  EC2E  F00E         	call	_delay_ms	;wreg free
  3343  001866  2A32               	incf	lcd_init@i,f,c
  3344  001868  D7F1               	goto	l2061
  3345  00186A                     u1580:
  3346                           
  3347                           ;Lcd.c: 77: }
  3348                           ;Lcd.c: 79: lcd_send_nibble(2);
  3349  00186A  0E02               	movlw	2
  3350  00186C  EC64  F00E         	call	_lcd_send_nibble
  3351                           
  3352                           ;Lcd.c: 81: for (i = 0; i <= 3; ++i)
  3353  001870  0E00               	movlw	0
  3354  001872  6E32               	movwf	lcd_init@i,c
  3355  001874                     l2075:
  3356  001874  0E03               	movlw	3
  3357  001876  6432               	cpfsgt	lcd_init@i,c
  3358  001878  D001               	goto	l309
  3359  00187A  0012               	return	
  3360  00187C                     l309:
  3361                           
  3362                           ;Lcd.c: 82: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3363  00187C  5032               	movf	lcd_init@i,w,c
  3364  00187E  0D01               	mullw	1
  3365  001880  0E51               	movlw	low _LCD_INIT_STRING
  3366  001882  24F3               	addwf	prodl,w,c
  3367  001884  6ED9               	movwf	fsr2l,c
  3368  001886  0E00               	movlw	high _LCD_INIT_STRING
  3369  001888  20F4               	addwfc	prodh,w,c
  3370  00188A  6EDA               	movwf	fsr2h,c
  3371  00188C  50DF               	movf	indf2,w,c
  3372  00188E  6E30               	movwf	lcd_send_byte@n,c
  3373  001890  0E00               	movlw	0
  3374  001892  ECF7  F00C         	call	_lcd_send_byte
  3375  001896  2A32               	incf	lcd_init@i,f,c
  3376  001898  D7ED               	goto	l2075
  3377  00189A                     __end_of_lcd_init:
  3378                           	opt stack 0
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           prodh	equ	0xFF4
  3384                           prodl	equ	0xFF3
  3385                           postinc0	equ	0xFEE
  3386                           wreg	equ	0xFE8
  3387                           postdec1	equ	0xFE5
  3388                           fsr1l	equ	0xFE1
  3389                           indf2	equ	0xFDF
  3390                           postinc2	equ	0xFDE
  3391                           postdec2	equ	0xFDD
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function _isDigit *****************
  3397 ;; Defined at:
  3398 ;;		line 393 in file "DigitalClock.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  c               1    wreg     unsigned char 
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;  c               1   41[COMRAM] unsigned char 
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  2   39[COMRAM] int 
  3405 ;; Registers used:
  3406 ;;		wreg, status,2, status,0
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;Total ram usage:        3 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    2
  3419 ;; This function calls:
  3420 ;;		Nothing
  3421 ;; This function is called by:
  3422 ;;		_main
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text15
  3427  001CA6                     __ptext15:
  3428                           	opt stack 0
  3429  001CA6                     _isDigit:
  3430                           	opt stack 28
  3431                           
  3432                           ;incstack = 0
  3433                           ;isDigit@c stored from wreg
  3434  001CA6  6E2A               	movwf	isDigit@c,c
  3435                           
  3436                           ;DigitalClock.c: 394: if (c>='0'&& c<='9'){
  3437  001CA8  0E2F               	movlw	47
  3438  001CAA  642A               	cpfsgt	isDigit@c,c
  3439  001CAC  D008               	goto	l212
  3440  001CAE  0E3A               	movlw	58
  3441  001CB0  602A               	cpfslt	isDigit@c,c
  3442  001CB2  D005               	goto	l212
  3443                           
  3444                           ;DigitalClock.c: 395: return 1;
  3445  001CB4  0E00               	movlw	0
  3446  001CB6  6E29               	movwf	?_isDigit+1,c
  3447  001CB8  0E01               	movlw	1
  3448  001CBA  6E28               	movwf	?_isDigit,c
  3449  001CBC  0012               	return	
  3450  001CBE                     l212:
  3451                           
  3452                           ;DigitalClock.c: 397: } return 0;
  3453  001CBE  0E00               	movlw	0
  3454  001CC0  6E29               	movwf	?_isDigit+1,c
  3455  001CC2  0E00               	movlw	0
  3456  001CC4  6E28               	movwf	?_isDigit,c
  3457  001CC6  0012               	return	
  3458  001CC8                     __end_of_isDigit:
  3459                           	opt stack 0
  3460                           tblptru	equ	0xFF8
  3461                           tblptrh	equ	0xFF7
  3462                           tblptrl	equ	0xFF6
  3463                           tablat	equ	0xFF5
  3464                           prodh	equ	0xFF4
  3465                           prodl	equ	0xFF3
  3466                           postinc0	equ	0xFEE
  3467                           wreg	equ	0xFE8
  3468                           postdec1	equ	0xFE5
  3469                           fsr1l	equ	0xFE1
  3470                           indf2	equ	0xFDF
  3471                           postinc2	equ	0xFDE
  3472                           postdec2	equ	0xFDD
  3473                           fsr2h	equ	0xFDA
  3474                           fsr2l	equ	0xFD9
  3475                           status	equ	0xFD8
  3476                           
  3477 ;; *************** function _initialization *****************
  3478 ;; Defined at:
  3479 ;;		line 345 in file "DigitalClock.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;		None
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;		None
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;Total ram usage:        0 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    3
  3500 ;; This function calls:
  3501 ;;		_reloadTimer0
  3502 ;; This function is called by:
  3503 ;;		_main
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text16
  3508  001B72                     __ptext16:
  3509                           	opt stack 0
  3510  001B72                     _initialization:
  3511                           	opt stack 27
  3512                           
  3513                           ;DigitalClock.c: 346: INTCONbits.GIEH = 1;
  3514                           
  3515                           ;incstack = 0
  3516  001B72  8EF2               	bsf	intcon,7,c	;volatile
  3517                           
  3518                           ;DigitalClock.c: 347: INTCONbits.GIEL = 1;
  3519  001B74  8CF2               	bsf	intcon,6,c	;volatile
  3520                           
  3521                           ;DigitalClock.c: 348: INTCON2 = 0;
  3522  001B76  0E00               	movlw	0
  3523  001B78  6EF1               	movwf	intcon2,c	;volatile
  3524                           
  3525                           ;DigitalClock.c: 349: INTCON3 = 0;
  3526  001B7A  0E00               	movlw	0
  3527  001B7C  6EF0               	movwf	intcon3,c	;volatile
  3528                           
  3529                           ;DigitalClock.c: 350: INTCON2bits.INTEDG0 = 1;
  3530  001B7E  8CF1               	bsf	intcon2,6,c	;volatile
  3531                           
  3532                           ;DigitalClock.c: 351: INTCON2bits.INTEDG1 = 1;
  3533  001B80  8AF1               	bsf	intcon2,5,c	;volatile
  3534                           
  3535                           ;DigitalClock.c: 352: INTCON2bits.INTEDG2 = 1;
  3536  001B82  88F1               	bsf	intcon2,4,c	;volatile
  3537                           
  3538                           ;DigitalClock.c: 353: INTCON3bits.INT1IE = 1;
  3539  001B84  86F0               	bsf	intcon3,3,c	;volatile
  3540                           
  3541                           ;DigitalClock.c: 354: INTCON3bits.INT2IE = 1;
  3542  001B86  88F0               	bsf	intcon3,4,c	;volatile
  3543                           
  3544                           ;DigitalClock.c: 355: RCONbits.IPEN = 0;
  3545  001B88  9ED0               	bcf	4048,7,c	;volatile
  3546                           
  3547                           ;DigitalClock.c: 356: INTCONbits.INT0IE = 1;
  3548  001B8A  88F2               	bsf	intcon,4,c	;volatile
  3549                           
  3550                           ;DigitalClock.c: 357: PORTCbits.RC5 = 0;
  3551  001B8C  9A82               	bcf	3970,5,c	;volatile
  3552                           
  3553                           ;DigitalClock.c: 358: T3CONbits.TMR3ON = 1;
  3554  001B8E  80B1               	bsf	4017,0,c	;volatile
  3555                           
  3556                           ;DigitalClock.c: 359: T0CON = 0;
  3557  001B90  0E00               	movlw	0
  3558  001B92  6ED5               	movwf	4053,c	;volatile
  3559                           
  3560                           ;DigitalClock.c: 360: T0CONbits.T0PS0 = 1;
  3561  001B94  80D5               	bsf	4053,0,c	;volatile
  3562                           
  3563                           ;DigitalClock.c: 361: T0CONbits.T0PS1 = 1;
  3564  001B96  82D5               	bsf	4053,1,c	;volatile
  3565                           
  3566                           ;DigitalClock.c: 362: T0CONbits.T0PS2 = 0;
  3567  001B98  94D5               	bcf	4053,2,c	;volatile
  3568                           
  3569                           ;DigitalClock.c: 363: reloadTimer0();
  3570  001B9A  ECA5  F00E         	call	_reloadTimer0	;wreg free
  3571                           
  3572                           ;DigitalClock.c: 364: INTCONbits.TMR0IE = 1;
  3573  001B9E  8AF2               	bsf	intcon,5,c	;volatile
  3574                           
  3575                           ;DigitalClock.c: 365: T0CONbits.TMR0ON = 1;
  3576  001BA0  8ED5               	bsf	4053,7,c	;volatile
  3577                           
  3578                           ;DigitalClock.c: 366: alarm_enabled = 0;
  3579  001BA2  0E00               	movlw	0
  3580  001BA4  0100               	movlb	0	; () banked
  3581  001BA6  6FC5               	movwf	_alarm_enabled& (0+255),b	;volatile
  3582                           
  3583                           ; BSR set to: 0
  3584  001BA8  0012               	return		;funcret
  3585  001BAA                     __end_of_initialization:
  3586                           	opt stack 0
  3587                           tblptru	equ	0xFF8
  3588                           tblptrh	equ	0xFF7
  3589                           tblptrl	equ	0xFF6
  3590                           tablat	equ	0xFF5
  3591                           prodh	equ	0xFF4
  3592                           prodl	equ	0xFF3
  3593                           intcon	equ	0xFF2
  3594                           intcon2	equ	0xFF1
  3595                           intcon3	equ	0xFF0
  3596                           postinc0	equ	0xFEE
  3597                           wreg	equ	0xFE8
  3598                           postdec1	equ	0xFE5
  3599                           fsr1l	equ	0xFE1
  3600                           indf2	equ	0xFDF
  3601                           postinc2	equ	0xFDE
  3602                           postdec2	equ	0xFDD
  3603                           fsr2h	equ	0xFDA
  3604                           fsr2l	equ	0xFD9
  3605                           status	equ	0xFD8
  3606                           
  3607 ;; *************** function _reloadTimer0 *****************
  3608 ;; Defined at:
  3609 ;;		line 319 in file "DigitalClock.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;		None
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;		None
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      void 
  3616 ;; Registers used:
  3617 ;;		wreg, status,2
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;Total ram usage:        0 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    2
  3630 ;; This function calls:
  3631 ;;		Nothing
  3632 ;; This function is called by:
  3633 ;;		_initialization
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text17
  3638  001D4A                     __ptext17:
  3639                           	opt stack 0
  3640  001D4A                     _reloadTimer0:
  3641                           	opt stack 27
  3642                           
  3643                           ;DigitalClock.c: 322: TMR0H = (unsigned char) ((3036 >> 8) & 0x00FF);
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;incstack = 0
  3647  001D4A  0E0B               	movlw	11
  3648  001D4C  6ED7               	movwf	4055,c	;volatile
  3649                           
  3650                           ;DigitalClock.c: 323: TMR0L = (unsigned char)(3036 & 0x00FF );
  3651  001D4E  0EDC               	movlw	220
  3652  001D50  6ED6               	movwf	4054,c	;volatile
  3653  001D52  0012               	return		;funcret
  3654  001D54                     __end_of_reloadTimer0:
  3655                           	opt stack 0
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           intcon	equ	0xFF2
  3663                           intcon2	equ	0xFF1
  3664                           intcon3	equ	0xFF0
  3665                           postinc0	equ	0xFEE
  3666                           wreg	equ	0xFE8
  3667                           postdec1	equ	0xFE5
  3668                           fsr1l	equ	0xFE1
  3669                           indf2	equ	0xFDF
  3670                           postinc2	equ	0xFDE
  3671                           postdec2	equ	0xFDD
  3672                           fsr2h	equ	0xFDA
  3673                           fsr2l	equ	0xFD9
  3674                           status	equ	0xFD8
  3675                           
  3676 ;; *************** function _initTimers01 *****************
  3677 ;; Defined at:
  3678 ;;		line 326 in file "DigitalClock.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;		None
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;		None
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      void 
  3685 ;; Registers used:
  3686 ;;		wreg, status,2
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;Total ram usage:        0 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    2
  3699 ;; This function calls:
  3700 ;;		Nothing
  3701 ;; This function is called by:
  3702 ;;		_main
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           	psect	text18
  3707  001C82                     __ptext18:
  3708                           	opt stack 0
  3709  001C82                     _initTimers01:
  3710                           	opt stack 28
  3711                           
  3712                           ;DigitalClock.c: 327: T0CON = 0;
  3713                           
  3714                           ;incstack = 0
  3715  001C82  0E00               	movlw	0
  3716  001C84  6ED5               	movwf	4053,c	;volatile
  3717                           
  3718                           ;DigitalClock.c: 329: INTCONbits.T0IF = 0;
  3719  001C86  94F2               	bcf	intcon,2,c	;volatile
  3720                           
  3721                           ;DigitalClock.c: 330: T0CONbits.T0PS0 = 1;
  3722  001C88  80D5               	bsf	4053,0,c	;volatile
  3723                           
  3724                           ;DigitalClock.c: 331: T0CONbits.T0PS1 = 1;
  3725  001C8A  82D5               	bsf	4053,1,c	;volatile
  3726                           
  3727                           ;DigitalClock.c: 332: T0CONbits.T0PS2 = 0;
  3728  001C8C  94D5               	bcf	4053,2,c	;volatile
  3729                           
  3730                           ;DigitalClock.c: 333: TMR0H = (unsigned char) ((3036 >> 8) & 0x00FF);
  3731  001C8E  0E0B               	movlw	11
  3732  001C90  6ED7               	movwf	4055,c	;volatile
  3733                           
  3734                           ;DigitalClock.c: 334: TMR0L = (unsigned char) (3036 & 0x00FF);
  3735  001C92  0EDC               	movlw	220
  3736  001C94  6ED6               	movwf	4054,c	;volatile
  3737                           
  3738                           ;DigitalClock.c: 335: T1CONbits.TMR1CS = 1;
  3739  001C96  82CD               	bsf	4045,1,c	;volatile
  3740                           
  3741                           ;DigitalClock.c: 336: T1CONbits.T1CKPS1 = 0;
  3742  001C98  9ACD               	bcf	4045,5,c	;volatile
  3743                           
  3744                           ;DigitalClock.c: 337: T1CONbits.T1CKPS0 = 0;
  3745  001C9A  98CD               	bcf	4045,4,c	;volatile
  3746                           
  3747                           ;DigitalClock.c: 339: INTCONbits.GIE = 1;
  3748  001C9C  8EF2               	bsf	intcon,7,c	;volatile
  3749                           
  3750                           ;DigitalClock.c: 340: INTCONbits.T0IE = 1;
  3751  001C9E  8AF2               	bsf	intcon,5,c	;volatile
  3752                           
  3753                           ;DigitalClock.c: 341: T1CONbits.TMR1ON = 1;
  3754  001CA0  80CD               	bsf	4045,0,c	;volatile
  3755                           
  3756                           ;DigitalClock.c: 342: T0CONbits.TMR0ON = 1;
  3757  001CA2  8ED5               	bsf	4053,7,c	;volatile
  3758  001CA4  0012               	return		;funcret
  3759  001CA6                     __end_of_initTimers01:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           intcon	equ	0xFF2
  3768                           intcon2	equ	0xFF1
  3769                           intcon3	equ	0xFF0
  3770                           postinc0	equ	0xFEE
  3771                           wreg	equ	0xFE8
  3772                           postdec1	equ	0xFE5
  3773                           fsr1l	equ	0xFE1
  3774                           indf2	equ	0xFDF
  3775                           postinc2	equ	0xFDE
  3776                           postdec2	equ	0xFDD
  3777                           fsr2h	equ	0xFDA
  3778                           fsr2l	equ	0xFD9
  3779                           status	equ	0xFD8
  3780                           
  3781 ;; *************** function _enableInterrupts *****************
  3782 ;; Defined at:
  3783 ;;		line 124 in file "DigitalClock.c"
  3784 ;; Parameters:    Size  Location     Type
  3785 ;;		None
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;		None
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  1    wreg      void 
  3790 ;; Registers used:
  3791 ;;		None
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3801 ;;Total ram usage:        0 bytes
  3802 ;; Hardware stack levels used:    1
  3803 ;; Hardware stack levels required when called:    2
  3804 ;; This function calls:
  3805 ;;		Nothing
  3806 ;; This function is called by:
  3807 ;;		_main
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           	psect	text19
  3812  001D5C                     __ptext19:
  3813                           	opt stack 0
  3814  001D5C                     _enableInterrupts:
  3815                           	opt stack 28
  3816                           
  3817                           ;DigitalClock.c: 125: INTCONbits.GIEH = 1;
  3818                           
  3819                           ;incstack = 0
  3820  001D5C  8EF2               	bsf	intcon,7,c	;volatile
  3821                           
  3822                           ;DigitalClock.c: 126: INTCONbits.GIEL = 1;
  3823  001D5E  8CF2               	bsf	intcon,6,c	;volatile
  3824  001D60  0012               	return		;funcret
  3825  001D62                     __end_of_enableInterrupts:
  3826                           	opt stack 0
  3827                           tblptru	equ	0xFF8
  3828                           tblptrh	equ	0xFF7
  3829                           tblptrl	equ	0xFF6
  3830                           tablat	equ	0xFF5
  3831                           prodh	equ	0xFF4
  3832                           prodl	equ	0xFF3
  3833                           intcon	equ	0xFF2
  3834                           intcon2	equ	0xFF1
  3835                           intcon3	equ	0xFF0
  3836                           postinc0	equ	0xFEE
  3837                           wreg	equ	0xFE8
  3838                           postdec1	equ	0xFE5
  3839                           fsr1l	equ	0xFE1
  3840                           indf2	equ	0xFDF
  3841                           postinc2	equ	0xFDE
  3842                           postdec2	equ	0xFDD
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function _disableInterrupts *****************
  3848 ;; Defined at:
  3849 ;;		line 119 in file "DigitalClock.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;		None
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;		None
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      void 
  3856 ;; Registers used:
  3857 ;;		None
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;Total ram usage:        0 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    2
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_main
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text20
  3878  001D62                     __ptext20:
  3879                           	opt stack 0
  3880  001D62                     _disableInterrupts:
  3881                           	opt stack 28
  3882                           
  3883                           ;DigitalClock.c: 120: INTCONbits.GIEH = 0;
  3884                           
  3885                           ;incstack = 0
  3886  001D62  9EF2               	bcf	intcon,7,c	;volatile
  3887                           
  3888                           ;DigitalClock.c: 121: INTCONbits.GIEL = 0;
  3889  001D64  9CF2               	bcf	intcon,6,c	;volatile
  3890  001D66  0012               	return		;funcret
  3891  001D68                     __end_of_disableInterrupts:
  3892                           	opt stack 0
  3893                           tblptru	equ	0xFF8
  3894                           tblptrh	equ	0xFF7
  3895                           tblptrl	equ	0xFF6
  3896                           tablat	equ	0xFF5
  3897                           prodh	equ	0xFF4
  3898                           prodl	equ	0xFF3
  3899                           intcon	equ	0xFF2
  3900                           intcon2	equ	0xFF1
  3901                           intcon3	equ	0xFF0
  3902                           postinc0	equ	0xFEE
  3903                           wreg	equ	0xFE8
  3904                           postdec1	equ	0xFE5
  3905                           fsr1l	equ	0xFE1
  3906                           indf2	equ	0xFDF
  3907                           postinc2	equ	0xFDE
  3908                           postdec2	equ	0xFDD
  3909                           fsr2h	equ	0xFDA
  3910                           fsr2l	equ	0xFD9
  3911                           status	equ	0xFD8
  3912                           
  3913 ;; *************** function _DisplayNames *****************
  3914 ;; Defined at:
  3915 ;;		line 381 in file "DigitalClock.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;		None
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;		None
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      void 
  3922 ;; Registers used:
  3923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;Total ram usage:        0 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    8
  3936 ;; This function calls:
  3937 ;;		_lcd_gotoxy
  3938 ;;		_lcd_puts
  3939 ;; This function is called by:
  3940 ;;		_main
  3941 ;; This function uses a non-reentrant model
  3942 ;;
  3943                           
  3944                           	psect	text21
  3945  001D22                     __ptext21:
  3946                           	opt stack 0
  3947  001D22                     _DisplayNames:
  3948                           	opt stack 22
  3949                           
  3950                           ;DigitalClock.c: 382: lcd_gotoxy(1, 4);
  3951                           
  3952                           ;incstack = 0
  3953  001D22  0E04               	movlw	4
  3954  001D24  6E32               	movwf	lcd_gotoxy@y,c
  3955  001D26  0E01               	movlw	1
  3956  001D28  EC3C  F00D         	call	_lcd_gotoxy
  3957                           
  3958                           ;DigitalClock.c: 383: lcd_puts("Masa & Salsabeel");
  3959  001D2C  0E48               	movlw	low STR_11
  3960  001D2E  6E36               	movwf	lcd_puts@s,c
  3961  001D30  0E10               	movlw	high STR_11
  3962  001D32  6E37               	movwf	lcd_puts@s+1,c
  3963  001D34  EC78  F00C         	call	_lcd_puts	;wreg free
  3964  001D38  0012               	return		;funcret
  3965  001D3A                     __end_of_DisplayNames:
  3966                           	opt stack 0
  3967                           tblptru	equ	0xFF8
  3968                           tblptrh	equ	0xFF7
  3969                           tblptrl	equ	0xFF6
  3970                           tablat	equ	0xFF5
  3971                           prodh	equ	0xFF4
  3972                           prodl	equ	0xFF3
  3973                           intcon	equ	0xFF2
  3974                           intcon2	equ	0xFF1
  3975                           intcon3	equ	0xFF0
  3976                           postinc0	equ	0xFEE
  3977                           wreg	equ	0xFE8
  3978                           postdec1	equ	0xFE5
  3979                           fsr1l	equ	0xFE1
  3980                           indf2	equ	0xFDF
  3981                           postinc2	equ	0xFDE
  3982                           postdec2	equ	0xFDD
  3983                           fsr2h	equ	0xFDA
  3984                           fsr2l	equ	0xFD9
  3985                           status	equ	0xFD8
  3986                           
  3987 ;; *************** function _lcd_puts *****************
  3988 ;; Defined at:
  3989 ;;		line 127 in file "Lcd.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;  s               2   53[COMRAM] PTR unsigned char 
  3992 ;;		 -> STR_11(17), STR_10(4), STR_9(4), STR_8(14), 
  3993 ;;		 -> updateClockDisplay@Buffer(32), updateAlarmDisplay@alarm_string(17), 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;		None
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4005 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4008 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4009 ;;Total ram usage:        2 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; Hardware stack levels required when called:    7
  4012 ;; This function calls:
  4013 ;;		_lcd_putc
  4014 ;; This function is called by:
  4015 ;;		_updateAlarmDisplay
  4016 ;;		_updateClockDisplay
  4017 ;;		_updateAlarmStateDisplay
  4018 ;;		_DisplayNames
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           	psect	text22
  4023  0018F0                     __ptext22:
  4024                           	opt stack 0
  4025  0018F0                     _lcd_puts:
  4026                           	opt stack 22
  4027                           
  4028                           ;Lcd.c: 128: while (*s) {
  4029                           
  4030                           ;incstack = 0
  4031  0018F0  D015               	goto	l332
  4032  0018F2                     
  4033                           ;Lcd.c: 129: lcd_putc(*s);
  4034  0018F2  C036  FFF6         	movff	lcd_puts@s,tblptrl
  4035  0018F6  C037  FFF7         	movff	lcd_puts@s+1,tblptrh
  4036  0018FA  0E00               	movlw	low (__smallconst shr (0+16))
  4037  0018FC  6EF8               	movwf	tblptru,c
  4038  0018FE  0E0F               	movlw	(high __ramtop+-1)
  4039  001900  64F7               	cpfsgt	tblptrh,c
  4040  001902  D003               	bra	u1537
  4041  001904  0008               	tblrd		*
  4042  001906  50F5               	movf	tablat,w,c
  4043  001908  D005               	bra	u1530
  4044  00190A                     u1537:
  4045  00190A  CFF6 FFD9          	movff	tblptrl,fsr2l
  4046  00190E  CFF7 FFDA          	movff	tblptrh,fsr2h
  4047  001912  50DF               	movf	indf2,w,c
  4048  001914                     u1530:
  4049  001914  ECA3  F00C         	call	_lcd_putc
  4050                           
  4051                           ;Lcd.c: 130: s++;
  4052  001918  4A36               	infsnz	lcd_puts@s,f,c
  4053  00191A  2A37               	incf	lcd_puts@s+1,f,c
  4054  00191C                     l332:
  4055  00191C  C036  FFF6         	movff	lcd_puts@s,tblptrl
  4056  001920  C037  FFF7         	movff	lcd_puts@s+1,tblptrh
  4057  001924  0E00               	movlw	low (__smallconst shr (0+16))
  4058  001926  6EF8               	movwf	tblptru,c
  4059  001928  0E0F               	movlw	(high __ramtop+-1)
  4060  00192A  64F7               	cpfsgt	tblptrh,c
  4061  00192C  D003               	bra	u1547
  4062  00192E  0008               	tblrd		*
  4063  001930  50F5               	movf	tablat,w,c
  4064  001932  D005               	bra	u1540
  4065  001934                     u1547:
  4066  001934  CFF6 FFD9          	movff	tblptrl,fsr2l
  4067  001938  CFF7 FFDA          	movff	tblptrh,fsr2h
  4068  00193C  50DF               	movf	indf2,w,c
  4069  00193E                     u1540:
  4070  00193E  0900               	iorlw	0
  4071  001940  B4D8               	btfsc	status,2,c
  4072  001942  0012               	return	
  4073  001944  D7D6               	goto	l333
  4074  001946                     __end_of_lcd_puts:
  4075                           	opt stack 0
  4076                           tblptru	equ	0xFF8
  4077                           tblptrh	equ	0xFF7
  4078                           tblptrl	equ	0xFF6
  4079                           tablat	equ	0xFF5
  4080                           prodh	equ	0xFF4
  4081                           prodl	equ	0xFF3
  4082                           intcon	equ	0xFF2
  4083                           intcon2	equ	0xFF1
  4084                           intcon3	equ	0xFF0
  4085                           postinc0	equ	0xFEE
  4086                           wreg	equ	0xFE8
  4087                           postdec1	equ	0xFE5
  4088                           fsr1l	equ	0xFE1
  4089                           indf2	equ	0xFDF
  4090                           postinc2	equ	0xFDE
  4091                           postdec2	equ	0xFDD
  4092                           fsr2h	equ	0xFDA
  4093                           fsr2l	equ	0xFD9
  4094                           status	equ	0xFD8
  4095                           
  4096 ;; *************** function _lcd_putc *****************
  4097 ;; Defined at:
  4098 ;;		line 113 in file "Lcd.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;  c               1    wreg     unsigned char 
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;  c               1   52[COMRAM] unsigned char 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;Total ram usage:        1 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    6
  4119 ;; This function calls:
  4120 ;;		_delay_ms
  4121 ;;		_lcd_gotoxy
  4122 ;;		_lcd_send_byte
  4123 ;; This function is called by:
  4124 ;;		_lcd_puts
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text23
  4129  001946                     __ptext23:
  4130                           	opt stack 0
  4131  001946                     _lcd_putc:
  4132                           	opt stack 22
  4133                           
  4134                           ;incstack = 0
  4135                           ;lcd_putc@c stored from wreg
  4136  001946  6E35               	movwf	lcd_putc@c,c
  4137                           
  4138                           ;Lcd.c: 114: switch (c) {
  4139  001948  D01E               	goto	l323
  4140  00194A  0E01               	movlw	1
  4141  00194C  6E30               	movwf	lcd_send_byte@n,c
  4142  00194E  0E00               	movlw	0
  4143  001950  ECF7  F00C         	call	_lcd_send_byte
  4144                           
  4145                           ;Lcd.c: 116: delay_ms(2);
  4146  001954  0E00               	movlw	0
  4147  001956  6E29               	movwf	delay_ms@n+1,c
  4148  001958  0E02               	movlw	2
  4149  00195A  6E28               	movwf	delay_ms@n,c
  4150  00195C  EC2E  F00E         	call	_delay_ms	;wreg free
  4151                           
  4152                           ;Lcd.c: 117: break;
  4153  001960  0012               	return	
  4154  001962  0E02               	movlw	2
  4155  001964  6E32               	movwf	lcd_gotoxy@y,c
  4156  001966  0E01               	movlw	1
  4157  001968  EC3C  F00D         	call	_lcd_gotoxy
  4158                           
  4159                           ;Lcd.c: 119: break;
  4160  00196C  0012               	return	
  4161  00196E  0E10               	movlw	16
  4162  001970  6E30               	movwf	lcd_send_byte@n,c
  4163  001972  0E00               	movlw	0
  4164  001974  ECF7  F00C         	call	_lcd_send_byte
  4165                           
  4166                           ;Lcd.c: 121: break;
  4167  001978  0012               	return	
  4168  00197A  C035  F030         	movff	lcd_putc@c,lcd_send_byte@n
  4169  00197E  0E01               	movlw	1
  4170  001980  ECF7  F00C         	call	_lcd_send_byte
  4171                           
  4172                           ;Lcd.c: 124: }
  4173                           
  4174                           ;Lcd.c: 123: break;
  4175  001984  0012               	return	
  4176  001986                     l323:
  4177  001986  5035               	movf	lcd_putc@c,w,c
  4178                           
  4179                           ; Switch size 1, requested type "space"
  4180                           ; Number of cases is 3, Range of values is 8 to 12
  4181                           ; switch strategies available:
  4182                           ; Name         Instructions Cycles
  4183                           ; simple_byte           10     6 (average)
  4184                           ;	Chosen strategy is simple_byte
  4185  001988  0A08               	xorlw	8	; case 8
  4186  00198A  B4D8               	btfsc	status,2,c
  4187  00198C  D7F0               	goto	l327
  4188  00198E  0A02               	xorlw	2	; case 10
  4189  001990  B4D8               	btfsc	status,2,c
  4190  001992  D7E7               	goto	l326
  4191  001994  0A06               	xorlw	6	; case 12
  4192  001996  B4D8               	btfsc	status,2,c
  4193  001998  D7D8               	goto	l324
  4194  00199A  D7EF               	goto	l328
  4195  00199C                     __end_of_lcd_putc:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           intcon2	equ	0xFF1
  4205                           intcon3	equ	0xFF0
  4206                           postinc0	equ	0xFEE
  4207                           wreg	equ	0xFE8
  4208                           postdec1	equ	0xFE5
  4209                           fsr1l	equ	0xFE1
  4210                           indf2	equ	0xFDF
  4211                           postinc2	equ	0xFDE
  4212                           postdec2	equ	0xFDD
  4213                           fsr2h	equ	0xFDA
  4214                           fsr2l	equ	0xFD9
  4215                           status	equ	0xFD8
  4216                           
  4217 ;; *************** function _lcd_gotoxy *****************
  4218 ;; Defined at:
  4219 ;;		line 96 in file "Lcd.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  x               1    wreg     unsigned char 
  4222 ;;  y               1   49[COMRAM] unsigned char 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  x               1   50[COMRAM] unsigned char 
  4225 ;;  address         1   51[COMRAM] unsigned char 
  4226 ;; Return value:  Size  Location     Type
  4227 ;;                  1    wreg      void 
  4228 ;; Registers used:
  4229 ;;		wreg, status,2, status,0, cstack
  4230 ;; Tracked objects:
  4231 ;;		On entry : 0/0
  4232 ;;		On exit  : 0/0
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4235 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;Total ram usage:        3 bytes
  4240 ;; Hardware stack levels used:    1
  4241 ;; Hardware stack levels required when called:    5
  4242 ;; This function calls:
  4243 ;;		_lcd_send_byte
  4244 ;; This function is called by:
  4245 ;;		_updateAlarmDisplay
  4246 ;;		_updateClockDisplay
  4247 ;;		_updateAlarmStateDisplay
  4248 ;;		_DisplayNames
  4249 ;;		_lcd_putc
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           	psect	text24
  4254  001A78                     __ptext24:
  4255                           	opt stack 0
  4256  001A78                     _lcd_gotoxy:
  4257                           	opt stack 22
  4258                           
  4259                           ;incstack = 0
  4260                           ;lcd_gotoxy@x stored from wreg
  4261  001A78  6E33               	movwf	lcd_gotoxy@x,c
  4262                           
  4263                           ;Lcd.c: 97: unsigned char address;
  4264                           ;Lcd.c: 99: switch (y) {
  4265  001A7A  D009               	goto	l314
  4266  001A7C  0E80               	movlw	128
  4267  001A7E  D005               	goto	L9
  4268  001A80  0EC0               	movlw	192
  4269  001A82  D003               	goto	L9
  4270  001A84  0E90               	movlw	144
  4271  001A86  D001               	goto	L9
  4272  001A88  0ED0               	movlw	208
  4273  001A8A                     L9:
  4274  001A8A  6E34               	movwf	lcd_gotoxy@address,c
  4275                           
  4276                           ;Lcd.c: 108: }
  4277                           
  4278                           ;Lcd.c: 107: break;
  4279  001A8C  D00D               	goto	l316
  4280  001A8E                     l314:
  4281  001A8E  5032               	movf	lcd_gotoxy@y,w,c
  4282                           
  4283                           ; Switch size 1, requested type "space"
  4284                           ; Number of cases is 4, Range of values is 1 to 4
  4285                           ; switch strategies available:
  4286                           ; Name         Instructions Cycles
  4287                           ; simple_byte           13     7 (average)
  4288                           ;	Chosen strategy is simple_byte
  4289  001A90  0A01               	xorlw	1	; case 1
  4290  001A92  B4D8               	btfsc	status,2,c
  4291  001A94  D7F3               	goto	l315
  4292  001A96  0A03               	xorlw	3	; case 2
  4293  001A98  B4D8               	btfsc	status,2,c
  4294  001A9A  D7F2               	goto	l317
  4295  001A9C  0A01               	xorlw	1	; case 3
  4296  001A9E  B4D8               	btfsc	status,2,c
  4297  001AA0  D7F1               	goto	l318
  4298  001AA2  0A07               	xorlw	7	; case 4
  4299  001AA4  B4D8               	btfsc	status,2,c
  4300  001AA6  D7F0               	goto	l319
  4301  001AA8                     l316:
  4302                           
  4303                           ;Lcd.c: 109: address += x - 1;
  4304  001AA8  0433               	decf	lcd_gotoxy@x,w,c
  4305  001AAA  2634               	addwf	lcd_gotoxy@address,f,c
  4306                           
  4307                           ;Lcd.c: 110: lcd_send_byte(0, (unsigned char) (0x80 | address));
  4308  001AAC  5034               	movf	lcd_gotoxy@address,w,c
  4309  001AAE  0980               	iorlw	128
  4310  001AB0  6E30               	movwf	lcd_send_byte@n,c
  4311  001AB2  0E00               	movlw	0
  4312  001AB4  ECF7  F00C         	call	_lcd_send_byte
  4313  001AB8  0012               	return		;funcret
  4314  001ABA                     __end_of_lcd_gotoxy:
  4315                           	opt stack 0
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           prodh	equ	0xFF4
  4321                           prodl	equ	0xFF3
  4322                           intcon	equ	0xFF2
  4323                           intcon2	equ	0xFF1
  4324                           intcon3	equ	0xFF0
  4325                           postinc0	equ	0xFEE
  4326                           wreg	equ	0xFE8
  4327                           postdec1	equ	0xFE5
  4328                           fsr1l	equ	0xFE1
  4329                           indf2	equ	0xFDF
  4330                           postinc2	equ	0xFDE
  4331                           postdec2	equ	0xFDD
  4332                           fsr2h	equ	0xFDA
  4333                           fsr2l	equ	0xFD9
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function _lcd_send_byte *****************
  4337 ;; Defined at:
  4338 ;;		line 46 in file "Lcd.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  cm_data         1    wreg     unsigned char 
  4341 ;;  n               1   47[COMRAM] unsigned char 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  cm_data         1   48[COMRAM] unsigned char 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		wreg, status,2, status,0, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4353 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;Total ram usage:        2 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    4
  4360 ;; This function calls:
  4361 ;;		_delay_cycles
  4362 ;;		_delay_ms
  4363 ;;		_lcd_send_nibble
  4364 ;; This function is called by:
  4365 ;;		_lcd_init
  4366 ;;		_lcd_gotoxy
  4367 ;;		_lcd_putc
  4368 ;;		_Lcd_Shift_Right
  4369 ;;		_Lcd_Shift_Left
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text25
  4374  0019EE                     __ptext25:
  4375                           	opt stack 0
  4376  0019EE                     _lcd_send_byte:
  4377                           	opt stack 23
  4378                           
  4379                           ;incstack = 0
  4380                           ;lcd_send_byte@cm_data stored from wreg
  4381  0019EE  6E31               	movwf	lcd_send_byte@cm_data,c
  4382                           
  4383                           ;Lcd.c: 50: PORTEbits.RE2 = cm_data;
  4384  0019F0  B031               	btfsc	lcd_send_byte@cm_data,0,c
  4385  0019F2  D002               	bra	u1245
  4386  0019F4  9484               	bcf	3972,2,c	;volatile
  4387  0019F6  D001               	bra	u1246
  4388  0019F8                     u1245:
  4389  0019F8  8484               	bsf	3972,2,c	;volatile
  4390  0019FA                     u1246:
  4391                           
  4392                           ;Lcd.c: 51: delay_cycles(1);
  4393  0019FA  0E01               	movlw	1
  4394  0019FC  ECF0  F00D         	call	_delay_cycles
  4395                           
  4396                           ;Lcd.c: 53: delay_cycles(1);
  4397  001A00  0E01               	movlw	1
  4398  001A02  ECF0  F00D         	call	_delay_cycles
  4399                           
  4400                           ;Lcd.c: 54: PORTEbits.RE1 = 0;
  4401  001A06  9284               	bcf	3972,1,c	;volatile
  4402                           
  4403                           ;Lcd.c: 55: lcd_send_nibble(n >> 4);
  4404  001A08  3830               	swapf	lcd_send_byte@n,w,c
  4405  001A0A  0B0F               	andlw	15
  4406  001A0C  EC64  F00E         	call	_lcd_send_nibble
  4407                           
  4408                           ;Lcd.c: 56: lcd_send_nibble(n & 0x0f);
  4409  001A10  5030               	movf	lcd_send_byte@n,w,c
  4410  001A12  0B0F               	andlw	15
  4411  001A14  EC64  F00E         	call	_lcd_send_nibble
  4412                           
  4413                           ;Lcd.c: 57: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  4414  001A18  5031               	movf	lcd_send_byte@cm_data,w,c
  4415  001A1A  B4D8               	btfsc	status,2,c
  4416  001A1C  D005               	goto	l302
  4417  001A1E  0E32               	movlw	50
  4418  001A20                     u2397:
  4419  001A20  0004               	clrwdt	
  4420  001A22  2EE8               	decfsz	wreg,f,c
  4421  001A24  D7FD               	bra	u2397
  4422  001A26  0012               	return	
  4423  001A28                     l302:
  4424                           
  4425                           ;Lcd.c: 58: else
  4426                           ;Lcd.c: 59: delay_ms(2);
  4427  001A28  0E00               	movlw	0
  4428  001A2A  6E29               	movwf	delay_ms@n+1,c
  4429  001A2C  0E02               	movlw	2
  4430  001A2E  6E28               	movwf	delay_ms@n,c
  4431  001A30  EC2E  F00E         	call	_delay_ms	;wreg free
  4432  001A34  0012               	return	
  4433  001A36                     __end_of_lcd_send_byte:
  4434                           	opt stack 0
  4435                           tblptru	equ	0xFF8
  4436                           tblptrh	equ	0xFF7
  4437                           tblptrl	equ	0xFF6
  4438                           tablat	equ	0xFF5
  4439                           prodh	equ	0xFF4
  4440                           prodl	equ	0xFF3
  4441                           intcon	equ	0xFF2
  4442                           intcon2	equ	0xFF1
  4443                           intcon3	equ	0xFF0
  4444                           postinc0	equ	0xFEE
  4445                           wreg	equ	0xFE8
  4446                           postdec1	equ	0xFE5
  4447                           fsr1l	equ	0xFE1
  4448                           indf2	equ	0xFDF
  4449                           postinc2	equ	0xFDE
  4450                           postdec2	equ	0xFDD
  4451                           fsr2h	equ	0xFDA
  4452                           fsr2l	equ	0xFD9
  4453                           status	equ	0xFD8
  4454                           
  4455 ;; *************** function _lcd_send_nibble *****************
  4456 ;; Defined at:
  4457 ;;		line 36 in file "Lcd.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  n               1    wreg     unsigned char 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  n               1   46[COMRAM] unsigned char 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      void 
  4464 ;; Registers used:
  4465 ;;		wreg, status,2, status,0, cstack
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4472 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;Total ram usage:        2 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    3
  4478 ;; This function calls:
  4479 ;;		_delay_cycles
  4480 ;; This function is called by:
  4481 ;;		_lcd_send_byte
  4482 ;;		_lcd_init
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text26
  4487  001CC8                     __ptext26:
  4488                           	opt stack 0
  4489  001CC8                     _lcd_send_nibble:
  4490                           	opt stack 23
  4491                           
  4492                           ;incstack = 0
  4493                           ;lcd_send_nibble@n stored from wreg
  4494  001CC8  6E2F               	movwf	lcd_send_nibble@n,c
  4495                           
  4496                           ;Lcd.c: 38: lcd.data = n;
  4497  001CCA  C02F  F02E         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  4498  001CCE  3A2E               	swapf	??_lcd_send_nibble,f,c
  4499  001CD0  5083               	movf	3971,w,c
  4500  001CD2  182E               	xorwf	??_lcd_send_nibble,w,c
  4501  001CD4  0B0F               	andlw	-241
  4502  001CD6  182E               	xorwf	??_lcd_send_nibble,w,c
  4503  001CD8  6E83               	movwf	3971,c
  4504                           
  4505                           ;Lcd.c: 40: delay_cycles(1);
  4506  001CDA  0E01               	movlw	1
  4507  001CDC  ECF0  F00D         	call	_delay_cycles
  4508                           
  4509                           ;Lcd.c: 41: PORTEbits.RE1 = 1;
  4510  001CE0  8284               	bsf	3972,1,c	;volatile
  4511                           
  4512                           ;Lcd.c: 42: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  4513  001CE2  0004               	clrwdt	
  4514  001CE4  F000               	nop		;2 cycle nop
  4515                           
  4516                           ;Lcd.c: 43: PORTEbits.RE1 = 0;
  4517  001CE6  9284               	bcf	3972,1,c	;volatile
  4518  001CE8  0012               	return		;funcret
  4519  001CEA                     __end_of_lcd_send_nibble:
  4520                           	opt stack 0
  4521                           tblptru	equ	0xFF8
  4522                           tblptrh	equ	0xFF7
  4523                           tblptrl	equ	0xFF6
  4524                           tablat	equ	0xFF5
  4525                           prodh	equ	0xFF4
  4526                           prodl	equ	0xFF3
  4527                           intcon	equ	0xFF2
  4528                           intcon2	equ	0xFF1
  4529                           intcon3	equ	0xFF0
  4530                           postinc0	equ	0xFEE
  4531                           wreg	equ	0xFE8
  4532                           postdec1	equ	0xFE5
  4533                           fsr1l	equ	0xFE1
  4534                           indf2	equ	0xFDF
  4535                           postinc2	equ	0xFDE
  4536                           postdec2	equ	0xFDD
  4537                           fsr2h	equ	0xFDA
  4538                           fsr2l	equ	0xFD9
  4539                           status	equ	0xFD8
  4540                           
  4541 ;; *************** function _delay_cycles *****************
  4542 ;; Defined at:
  4543 ;;		line 27 in file "Lcd.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;  n               1    wreg     unsigned char 
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;  n               1   42[COMRAM] unsigned char 
  4548 ;;  x               2   43[COMRAM] int 
  4549 ;; Return value:  Size  Location     Type
  4550 ;;                  1    wreg      void 
  4551 ;; Registers used:
  4552 ;;		wreg, status,2, status,0
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4559 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4560 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4561 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;Total ram usage:        6 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:    2
  4565 ;; This function calls:
  4566 ;;		Nothing
  4567 ;; This function is called by:
  4568 ;;		_lcd_send_nibble
  4569 ;;		_lcd_send_byte
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573                           	psect	text27
  4574  001BE0                     __ptext27:
  4575                           	opt stack 0
  4576  001BE0                     _delay_cycles:
  4577                           	opt stack 23
  4578                           
  4579                           ;incstack = 0
  4580                           ;delay_cycles@n stored from wreg
  4581  001BE0  6E2B               	movwf	delay_cycles@n,c
  4582                           
  4583                           ;Lcd.c: 28: int x;
  4584                           ;Lcd.c: 29: for (x = 0; x <= n; x++) {
  4585  001BE2  0E00               	movlw	0
  4586  001BE4  6E2D               	movwf	delay_cycles@x+1,c
  4587  001BE6  0E00               	movlw	0
  4588  001BE8  6E2C               	movwf	delay_cycles@x,c
  4589  001BEA  D003               	goto	l293
  4590  001BEC                     l294:
  4591  001BEC  0004               	clrwdt		;# 
  4592  001BEE  4A2C               	infsnz	delay_cycles@x,f,c
  4593  001BF0  2A2D               	incf	delay_cycles@x+1,f,c
  4594  001BF2                     l293:
  4595  001BF2  502B               	movf	delay_cycles@n,w,c
  4596  001BF4  6E28               	movwf	??_delay_cycles& (0+255),c
  4597  001BF6  6A29               	clrf	(??_delay_cycles+1)& (0+255),c
  4598  001BF8  502C               	movf	delay_cycles@x,w,c
  4599  001BFA  5C28               	subwf	??_delay_cycles,w,c
  4600  001BFC  5029               	movf	??_delay_cycles+1,w,c
  4601  001BFE  0A80               	xorlw	128
  4602  001C00  6E2A               	movwf	(??_delay_cycles+2)& (0+255),c
  4603  001C02  502D               	movf	delay_cycles@x+1,w,c
  4604  001C04  0A80               	xorlw	128
  4605  001C06  582A               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  4606  001C08  A0D8               	btfss	status,0,c
  4607  001C0A  0012               	return	
  4608  001C0C  D7EF               	goto	l294
  4609  001C0E                     __end_of_delay_cycles:
  4610                           	opt stack 0
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           intcon	equ	0xFF2
  4618                           intcon2	equ	0xFF1
  4619                           intcon3	equ	0xFF0
  4620                           postinc0	equ	0xFEE
  4621                           wreg	equ	0xFE8
  4622                           postdec1	equ	0xFE5
  4623                           fsr1l	equ	0xFE1
  4624                           indf2	equ	0xFDF
  4625                           postinc2	equ	0xFDE
  4626                           postdec2	equ	0xFDD
  4627                           fsr2h	equ	0xFDA
  4628                           fsr2l	equ	0xFD9
  4629                           status	equ	0xFD8
  4630                           
  4631 ;; *************** function _delay_ms *****************
  4632 ;; Defined at:
  4633 ;;		line 19 in file "Lcd.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;  n               2   39[COMRAM] unsigned int 
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;  x               2   41[COMRAM] int 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  1    wreg      void 
  4640 ;; Registers used:
  4641 ;;		wreg, status,2, status,0
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4647 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;Total ram usage:        4 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    2
  4654 ;; This function calls:
  4655 ;;		Nothing
  4656 ;; This function is called by:
  4657 ;;		_lcd_send_byte
  4658 ;;		_lcd_init
  4659 ;;		_lcd_putc
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663                           	psect	text28
  4664  001C5C                     __ptext28:
  4665                           	opt stack 0
  4666  001C5C                     _delay_ms:
  4667                           	opt stack 24
  4668                           
  4669                           ;Lcd.c: 20: int x;
  4670                           ;Lcd.c: 21: for (x = 0; x <= n; x++) {
  4671                           
  4672                           ;incstack = 0
  4673  001C5C  0E00               	movlw	0
  4674  001C5E  6E2B               	movwf	delay_ms@x+1,c
  4675  001C60  0E00               	movlw	0
  4676  001C62  6E2A               	movwf	delay_ms@x,c
  4677  001C64  D007               	goto	l287
  4678  001C66                     
  4679                           ;Lcd.c: 22: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
  4680  001C66  0EC8               	movlw	200
  4681  001C68                     u2407:
  4682  001C68  0004               	clrwdt	
  4683  001C6A  0004               	clrwdt	
  4684  001C6C  2EE8               	decfsz	wreg,f,c
  4685  001C6E  D7FC               	bra	u2407
  4686  001C70  4A2A               	infsnz	delay_ms@x,f,c
  4687  001C72  2A2B               	incf	delay_ms@x+1,f,c
  4688  001C74                     l287:
  4689  001C74  502A               	movf	delay_ms@x,w,c
  4690  001C76  5C28               	subwf	delay_ms@n,w,c
  4691  001C78  502B               	movf	delay_ms@x+1,w,c
  4692  001C7A  5829               	subwfb	delay_ms@n+1,w,c
  4693  001C7C  A0D8               	btfss	status,0,c
  4694  001C7E  0012               	return	
  4695  001C80  D7F2               	goto	l288
  4696  001C82                     __end_of_delay_ms:
  4697                           	opt stack 0
  4698                           tblptru	equ	0xFF8
  4699                           tblptrh	equ	0xFF7
  4700                           tblptrl	equ	0xFF6
  4701                           tablat	equ	0xFF5
  4702                           prodh	equ	0xFF4
  4703                           prodl	equ	0xFF3
  4704                           intcon	equ	0xFF2
  4705                           intcon2	equ	0xFF1
  4706                           intcon3	equ	0xFF0
  4707                           postinc0	equ	0xFEE
  4708                           wreg	equ	0xFE8
  4709                           postdec1	equ	0xFE5
  4710                           fsr1l	equ	0xFE1
  4711                           indf2	equ	0xFDF
  4712                           postinc2	equ	0xFDE
  4713                           postdec2	equ	0xFDD
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function _lowIsr *****************
  4719 ;; Defined at:
  4720 ;;		line 430 in file "DigitalClock.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;		None
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      void 
  4727 ;; Registers used:
  4728 ;;		None
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;Total ram usage:       21 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    1
  4741 ;; This function calls:
  4742 ;;		Nothing
  4743 ;; This function is called by:
  4744 ;;		Interrupt level 1
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           	psect	intcodelo
  4749  000018                     __pintcodelo:
  4750                           	opt stack 0
  4751  000018                     _lowIsr:
  4752                           	opt stack 22
  4753                           
  4754                           ;incstack = 0
  4755  000018  8055               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4756  00001A  CFD8 F013          	movff	status,??_lowIsr
  4757  00001E  CFE8 F014          	movff	wreg,??_lowIsr+1
  4758  000022  CFE0 F015          	movff	bsr,??_lowIsr+2
  4759  000026  CFFA F016          	movff	pclath,??_lowIsr+3
  4760  00002A  CFFB F017          	movff	pclatu,??_lowIsr+4
  4761  00002E  CFE9 F018          	movff	fsr0l,??_lowIsr+5
  4762  000032  CFEA F019          	movff	fsr0h,??_lowIsr+6
  4763  000036  CFE1 F01A          	movff	fsr1l,??_lowIsr+7
  4764  00003A  CFE2 F01B          	movff	fsr1h,??_lowIsr+8
  4765  00003E  CFD9 F01C          	movff	fsr2l,??_lowIsr+9
  4766  000042  CFDA F01D          	movff	fsr2h,??_lowIsr+10
  4767  000046  CFF3 F01E          	movff	prodl,??_lowIsr+11
  4768  00004A  CFF4 F01F          	movff	prodh,??_lowIsr+12
  4769  00004E  CFF6 F020          	movff	tblptrl,??_lowIsr+13
  4770  000052  CFF7 F021          	movff	tblptrh,??_lowIsr+14
  4771  000056  CFF8 F022          	movff	tblptru,??_lowIsr+15
  4772  00005A  CFF5 F023          	movff	tablat,??_lowIsr+16
  4773  00005E  C055  F024         	movff	btemp,??_lowIsr+17
  4774  000062  C056  F025         	movff	btemp+1,??_lowIsr+18
  4775  000066  C057  F026         	movff	btemp+2,??_lowIsr+19
  4776  00006A  C058  F027         	movff	btemp+3,??_lowIsr+20
  4777  00006E  C027  F058         	movff	??_lowIsr+20,btemp+3
  4778  000072  C026  F057         	movff	??_lowIsr+19,btemp+2
  4779  000076  C025  F056         	movff	??_lowIsr+18,btemp+1
  4780  00007A  C024  F055         	movff	??_lowIsr+17,btemp
  4781  00007E  C023  FFF5         	movff	??_lowIsr+16,tablat
  4782  000082  C022  FFF8         	movff	??_lowIsr+15,tblptru
  4783  000086  C021  FFF7         	movff	??_lowIsr+14,tblptrh
  4784  00008A  C020  FFF6         	movff	??_lowIsr+13,tblptrl
  4785  00008E  C01F  FFF4         	movff	??_lowIsr+12,prodh
  4786  000092  C01E  FFF3         	movff	??_lowIsr+11,prodl
  4787  000096  C01D  FFDA         	movff	??_lowIsr+10,fsr2h
  4788  00009A  C01C  FFD9         	movff	??_lowIsr+9,fsr2l
  4789  00009E  C01B  FFE2         	movff	??_lowIsr+8,fsr1h
  4790  0000A2  C01A  FFE1         	movff	??_lowIsr+7,fsr1l
  4791  0000A6  C019  FFEA         	movff	??_lowIsr+6,fsr0h
  4792  0000AA  C018  FFE9         	movff	??_lowIsr+5,fsr0l
  4793  0000AE  C017  FFFB         	movff	??_lowIsr+4,pclatu
  4794  0000B2  C016  FFFA         	movff	??_lowIsr+3,pclath
  4795  0000B6  C015  FFE0         	movff	??_lowIsr+2,bsr
  4796  0000BA  C014  FFE8         	movff	??_lowIsr+1,wreg
  4797  0000BE  C013  FFD8         	movff	??_lowIsr,status
  4798  0000C2  9055               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4799  0000C4  0010               	retfie	
  4800  0000C6                     __end_of_lowIsr:
  4801                           	opt stack 0
  4802                           pclatu	equ	0xFFB
  4803                           pclath	equ	0xFFA
  4804                           tblptru	equ	0xFF8
  4805                           tblptrh	equ	0xFF7
  4806                           tblptrl	equ	0xFF6
  4807                           tablat	equ	0xFF5
  4808                           prodh	equ	0xFF4
  4809                           prodl	equ	0xFF3
  4810                           intcon	equ	0xFF2
  4811                           intcon2	equ	0xFF1
  4812                           intcon3	equ	0xFF0
  4813                           postinc0	equ	0xFEE
  4814                           fsr0h	equ	0xFEA
  4815                           fsr0l	equ	0xFE9
  4816                           wreg	equ	0xFE8
  4817                           postdec1	equ	0xFE5
  4818                           fsr1h	equ	0xFE2
  4819                           fsr1l	equ	0xFE1
  4820                           bsr	equ	0xFE0
  4821                           indf2	equ	0xFDF
  4822                           postinc2	equ	0xFDE
  4823                           postdec2	equ	0xFDD
  4824                           fsr2h	equ	0xFDA
  4825                           fsr2l	equ	0xFD9
  4826                           status	equ	0xFD8
  4827                           
  4828 ;; *************** function _highIsr *****************
  4829 ;; Defined at:
  4830 ;;		line 400 in file "DigitalClock.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;		None
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;		None
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  1    wreg      void 
  4837 ;; Registers used:
  4838 ;;		wreg, status,2, status,0
  4839 ;; Tracked objects:
  4840 ;;		On entry : 0/0
  4841 ;;		On exit  : 0/0
  4842 ;;		Unchanged: 0/0
  4843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4846 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4847 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;Total ram usage:       18 bytes
  4849 ;; Hardware stack levels used:    1
  4850 ;; This function calls:
  4851 ;;		Nothing
  4852 ;; This function is called by:
  4853 ;;		Interrupt level 2
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           	psect	intcode
  4858  000008                     __pintcode:
  4859                           	opt stack 0
  4860  000008                     _highIsr:
  4861                           	opt stack 22
  4862                           
  4863                           ;incstack = 0
  4864  000008  8255               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4865  00000A  EDB0  F00B         	call	int_func,f	;refresh shadow registers
  4866                           pclatu	equ	0xFFB
  4867                           pclath	equ	0xFFA
  4868                           tblptru	equ	0xFF8
  4869                           tblptrh	equ	0xFF7
  4870                           tblptrl	equ	0xFF6
  4871                           tablat	equ	0xFF5
  4872                           prodh	equ	0xFF4
  4873                           prodl	equ	0xFF3
  4874                           intcon	equ	0xFF2
  4875                           intcon2	equ	0xFF1
  4876                           intcon3	equ	0xFF0
  4877                           postinc0	equ	0xFEE
  4878                           fsr0h	equ	0xFEA
  4879                           fsr0l	equ	0xFE9
  4880                           wreg	equ	0xFE8
  4881                           postdec1	equ	0xFE5
  4882                           fsr1h	equ	0xFE2
  4883                           fsr1l	equ	0xFE1
  4884                           bsr	equ	0xFE0
  4885                           indf2	equ	0xFDF
  4886                           postinc2	equ	0xFDE
  4887                           postdec2	equ	0xFDD
  4888                           fsr2h	equ	0xFDA
  4889                           fsr2l	equ	0xFD9
  4890                           status	equ	0xFD8
  4891                           
  4892                           	psect	intcode_body
  4893  001760                     __pintcode_body:
  4894                           	opt stack 22
  4895  001760                     int_func:
  4896                           	opt stack 22
  4897  001760  0006               	pop		; remove dummy address from shadow register refresh
  4898  001762  CFFA F001          	movff	pclath,??_highIsr
  4899  001766  CFFB F002          	movff	pclatu,??_highIsr+1
  4900  00176A  CFE9 F003          	movff	fsr0l,??_highIsr+2
  4901  00176E  CFEA F004          	movff	fsr0h,??_highIsr+3
  4902  001772  CFE1 F005          	movff	fsr1l,??_highIsr+4
  4903  001776  CFE2 F006          	movff	fsr1h,??_highIsr+5
  4904  00177A  CFD9 F007          	movff	fsr2l,??_highIsr+6
  4905  00177E  CFDA F008          	movff	fsr2h,??_highIsr+7
  4906  001782  CFF3 F009          	movff	prodl,??_highIsr+8
  4907  001786  CFF4 F00A          	movff	prodh,??_highIsr+9
  4908  00178A  CFF6 F00B          	movff	tblptrl,??_highIsr+10
  4909  00178E  CFF7 F00C          	movff	tblptrh,??_highIsr+11
  4910  001792  CFF8 F00D          	movff	tblptru,??_highIsr+12
  4911  001796  CFF5 F00E          	movff	tablat,??_highIsr+13
  4912  00179A  C055  F00F         	movff	btemp,??_highIsr+14
  4913  00179E  C056  F010         	movff	btemp+1,??_highIsr+15
  4914  0017A2  C057  F011         	movff	btemp+2,??_highIsr+16
  4915  0017A6  C058  F012         	movff	btemp+3,??_highIsr+17
  4916                           
  4917                           ;DigitalClock.c: 402: if (INTCONbits.INT0IF) {
  4918  0017AA  A2F2               	btfss	intcon,1,c	;volatile
  4919  0017AC  D009               	goto	i2l218
  4920                           
  4921                           ;DigitalClock.c: 403: INTCONbits.INT0IF = 0;
  4922  0017AE  92F2               	bcf	intcon,1,c	;volatile
  4923                           
  4924                           ;DigitalClock.c: 406: alarm_enabled = !alarm_enabled;
  4925  0017B0  0100               	movlb	0	; () banked
  4926  0017B2  51C5               	movf	_alarm_enabled& (0+255),w,b	;volatile
  4927  0017B4  A4D8               	btfss	status,2,c
  4928  0017B6  D002               	goto	i2u233_40
  4929  0017B8  0E01               	movlw	1
  4930  0017BA  D001               	goto	i2u234_40
  4931  0017BC                     i2u233_40:
  4932  0017BC  0E00               	movlw	0
  4933  0017BE                     i2u234_40:
  4934  0017BE  6FC5               	movwf	_alarm_enabled& (0+255),b	;volatile
  4935  0017C0                     i2l218:
  4936                           
  4937                           ;DigitalClock.c: 408: }
  4938                           ;DigitalClock.c: 409: if (INTCONbits.TMR0IF) {
  4939                           
  4940                           ; BSR set to: 0
  4941  0017C0  A4F2               	btfss	intcon,2,c	;volatile
  4942  0017C2  D014               	goto	i2l222
  4943                           
  4944                           ;DigitalClock.c: 410: INTCONbits.TMR0IF = 0;
  4945  0017C4  94F2               	bcf	intcon,2,c	;volatile
  4946                           
  4947                           ;DigitalClock.c: 412: seconds++;
  4948  0017C6  0100               	movlb	0	; () banked
  4949  0017C8  2BC9               	incf	_seconds& (0+255),f,b
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;DigitalClock.c: 413: if (seconds >= 60) {
  4953  0017CA  0E3B               	movlw	59
  4954  0017CC  65C9               	cpfsgt	_seconds& (0+255),b
  4955  0017CE  D00E               	goto	i2l222
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;DigitalClock.c: 414: seconds = 0;
  4959  0017D0  0E00               	movlw	0
  4960  0017D2  6FC9               	movwf	_seconds& (0+255),b
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;DigitalClock.c: 415: minutes++;
  4964  0017D4  2BCA               	incf	_minutes& (0+255),f,b
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;DigitalClock.c: 416: if (minutes >= 60) {
  4968  0017D6  0E3B               	movlw	59
  4969  0017D8  65CA               	cpfsgt	_minutes& (0+255),b
  4970  0017DA  D008               	goto	i2l222
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;DigitalClock.c: 417: minutes = 0;
  4974  0017DC  0E00               	movlw	0
  4975  0017DE  6FCA               	movwf	_minutes& (0+255),b
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;DigitalClock.c: 418: hours++;
  4979  0017E0  2BCB               	incf	_hours& (0+255),f,b
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;DigitalClock.c: 419: if (hours >= 24) {
  4983  0017E2  0E17               	movlw	23
  4984  0017E4  65CB               	cpfsgt	_hours& (0+255),b
  4985  0017E6  D002               	goto	i2l222
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;DigitalClock.c: 420: hours = 0;
  4989  0017E8  0E00               	movlw	0
  4990  0017EA  6FCB               	movwf	_hours& (0+255),b
  4991  0017EC                     i2l222:
  4992                           
  4993                           ; BSR set to: 0
  4994                           
  4995                           ; BSR set to: 0
  4996                           
  4997                           ; BSR set to: 0
  4998                           
  4999                           ; BSR set to: 0
  5000  0017EC  C012  F058         	movff	??_highIsr+17,btemp+3
  5001  0017F0  C011  F057         	movff	??_highIsr+16,btemp+2
  5002  0017F4  C010  F056         	movff	??_highIsr+15,btemp+1
  5003  0017F8  C00F  F055         	movff	??_highIsr+14,btemp
  5004  0017FC  C00E  FFF5         	movff	??_highIsr+13,tablat
  5005  001800  C00D  FFF8         	movff	??_highIsr+12,tblptru
  5006  001804  C00C  FFF7         	movff	??_highIsr+11,tblptrh
  5007  001808  C00B  FFF6         	movff	??_highIsr+10,tblptrl
  5008  00180C  C00A  FFF4         	movff	??_highIsr+9,prodh
  5009  001810  C009  FFF3         	movff	??_highIsr+8,prodl
  5010  001814  C008  FFDA         	movff	??_highIsr+7,fsr2h
  5011  001818  C007  FFD9         	movff	??_highIsr+6,fsr2l
  5012  00181C  C006  FFE2         	movff	??_highIsr+5,fsr1h
  5013  001820  C005  FFE1         	movff	??_highIsr+4,fsr1l
  5014  001824  C004  FFEA         	movff	??_highIsr+3,fsr0h
  5015  001828  C003  FFE9         	movff	??_highIsr+2,fsr0l
  5016  00182C  C002  FFFB         	movff	??_highIsr+1,pclatu
  5017  001830  C001  FFFA         	movff	??_highIsr,pclath
  5018  001834  9255               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5019  001836  0011               	retfie		f
  5020  001838                     __end_of_highIsr:
  5021                           	opt stack 0
  5022                           pclatu	equ	0xFFB
  5023                           pclath	equ	0xFFA
  5024                           tblptru	equ	0xFF8
  5025                           tblptrh	equ	0xFF7
  5026                           tblptrl	equ	0xFF6
  5027                           tablat	equ	0xFF5
  5028                           prodh	equ	0xFF4
  5029                           prodl	equ	0xFF3
  5030                           intcon	equ	0xFF2
  5031                           intcon2	equ	0xFF1
  5032                           intcon3	equ	0xFF0
  5033                           postinc0	equ	0xFEE
  5034                           fsr0h	equ	0xFEA
  5035                           fsr0l	equ	0xFE9
  5036                           wreg	equ	0xFE8
  5037                           postdec1	equ	0xFE5
  5038                           fsr1h	equ	0xFE2
  5039                           fsr1l	equ	0xFE1
  5040                           bsr	equ	0xFE0
  5041                           indf2	equ	0xFDF
  5042                           postinc2	equ	0xFDE
  5043                           postdec2	equ	0xFDD
  5044                           fsr2h	equ	0xFDA
  5045                           fsr2l	equ	0xFD9
  5046                           status	equ	0xFD8
  5047                           pclatu	equ	0xFFB
  5048                           pclath	equ	0xFFA
  5049                           tblptru	equ	0xFF8
  5050                           tblptrh	equ	0xFF7
  5051                           tblptrl	equ	0xFF6
  5052                           tablat	equ	0xFF5
  5053                           prodh	equ	0xFF4
  5054                           prodl	equ	0xFF3
  5055                           intcon	equ	0xFF2
  5056                           intcon2	equ	0xFF1
  5057                           intcon3	equ	0xFF0
  5058                           postinc0	equ	0xFEE
  5059                           fsr0h	equ	0xFEA
  5060                           fsr0l	equ	0xFE9
  5061                           wreg	equ	0xFE8
  5062                           postdec1	equ	0xFE5
  5063                           fsr1h	equ	0xFE2
  5064                           fsr1l	equ	0xFE1
  5065                           bsr	equ	0xFE0
  5066                           indf2	equ	0xFDF
  5067                           postinc2	equ	0xFDE
  5068                           postdec2	equ	0xFDD
  5069                           fsr2h	equ	0xFDA
  5070                           fsr2l	equ	0xFD9
  5071                           status	equ	0xFD8
  5072                           
  5073                           	psect	rparam
  5074  0000                     pclatu	equ	0xFFB
  5075                           pclath	equ	0xFFA
  5076                           tblptru	equ	0xFF8
  5077                           tblptrh	equ	0xFF7
  5078                           tblptrl	equ	0xFF6
  5079                           tablat	equ	0xFF5
  5080                           prodh	equ	0xFF4
  5081                           prodl	equ	0xFF3
  5082                           intcon	equ	0xFF2
  5083                           intcon2	equ	0xFF1
  5084                           intcon3	equ	0xFF0
  5085                           postinc0	equ	0xFEE
  5086                           fsr0h	equ	0xFEA
  5087                           fsr0l	equ	0xFE9
  5088                           wreg	equ	0xFE8
  5089                           postdec1	equ	0xFE5
  5090                           fsr1h	equ	0xFE2
  5091                           fsr1l	equ	0xFE1
  5092                           bsr	equ	0xFE0
  5093                           indf2	equ	0xFDF
  5094                           postinc2	equ	0xFDE
  5095                           postdec2	equ	0xFDD
  5096                           fsr2h	equ	0xFDA
  5097                           fsr2l	equ	0xFD9
  5098                           status	equ	0xFD8
  5099                           
  5100                           	psect	temp
  5101  000055                     btemp:
  5102                           	opt stack 0
  5103  000055                     	ds	1
  5104  0000                     int$flags	set	btemp
  5105  0000                     wtemp6	set	btemp+1
  5106                           pclatu	equ	0xFFB
  5107                           pclath	equ	0xFFA
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           prodh	equ	0xFF4
  5113                           prodl	equ	0xFF3
  5114                           intcon	equ	0xFF2
  5115                           intcon2	equ	0xFF1
  5116                           intcon3	equ	0xFF0
  5117                           postinc0	equ	0xFEE
  5118                           fsr0h	equ	0xFEA
  5119                           fsr0l	equ	0xFE9
  5120                           wreg	equ	0xFE8
  5121                           postdec1	equ	0xFE5
  5122                           fsr1h	equ	0xFE2
  5123                           fsr1l	equ	0xFE1
  5124                           bsr	equ	0xFE0
  5125                           indf2	equ	0xFDF
  5126                           postinc2	equ	0xFDE
  5127                           postdec2	equ	0xFDD
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8


Data Sizes:
    Strings     117
    Constant    10
    Data        4
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     80      84
    BANK0           128     57      76
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_5(CODE[4]), STR_4(CODE[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_7(CODE[21]), STR_6(CODE[22]), STR_3(CODE[18]), STR_2(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> updateClockDisplay@Buffer(BANK0[32]), updateAlarmDisplay@alarm_string(BANK0[17]), main@alarm_response(BANK0[13]), main@time_response(BANK0[9]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> STR_11(CODE[17]), STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[14]), 
		 -> updateClockDisplay@Buffer(BANK0[32]), updateAlarmDisplay@alarm_string(BANK0[17]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 13
		 -> main@alarm_response(BANK0[13]), main@time_response(BANK0[9]), STR_1(CODE[7]), 

    updateAlarmStateDisplay$648	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_10(CODE[4]), STR_9(CODE[4]), 

    main$551	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), STR_4(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _updateClockDisplay->_sprintf
    _updateAlarmStateDisplay->_lcd_puts
    _updateAlarmDisplay->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _send_string_no_lib->_send_byte_no_lib
    _lcd_init->_lcd_send_byte
    _DisplayNames->_lcd_puts
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _lowIsr in COMRAM

    None.

Critical Paths under _highIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_updateClockDisplay

Critical Paths under _lowIsr in BANK0

    None.

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _lowIsr in BANK1

    None.

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _lowIsr in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _lowIsr in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _lowIsr in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _lowIsr in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _lowIsr in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _lowIsr in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _lowIsr in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _lowIsr in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _lowIsr in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _lowIsr in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _lowIsr in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _lowIsr in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _lowIsr in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _lowIsr in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0   30619
                                             32 BANK0     25    25      0
                       _DisplayNames
                  _disableInterrupts
                   _enableInterrupts
                       _initTimers01
                     _initialization
                            _isDigit
                           _lcd_init
                   _read_byte_no_lib
                 _send_string_no_lib
                         _setupPorts
                        _setupSerial
                            _sprintf
                 _updateAlarmDisplay
            _updateAlarmStateDisplay
                 _updateClockDisplay
 ---------------------------------------------------------------------------------
 (1) _updateClockDisplay                                  32    32      0    7647
                                              0 BANK0     32    32      0
                         _lcd_gotoxy
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _updateAlarmStateDisplay                              2     2      0    4997
                                             55 COMRAM     2     2      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (1) _updateAlarmDisplay                                  17    17      0    7647
                                              0 BANK0     17    17      0
                         _lcd_gotoxy
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             33    21     12    2614
                                             51 COMRAM    29    17     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             39 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                             46 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                             39 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _setupSerial                                          1     1      0       2
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_string_no_lib                                   2     0      2     295
                                             40 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (2) _send_byte_no_lib                                     1     1      0      22
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_byte_no_lib                                     1     1      0      23
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1616
                                             49 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (1) _isDigit                                              3     1      2      44
                                             39 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _initialization                                       0     0      0       0
                       _reloadTimer0
 ---------------------------------------------------------------------------------
 (2) _reloadTimer0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimers01                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableInterrupts                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _disableInterrupts                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DisplayNames                                         0     0      0    4973
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2    3438
                                             53 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    3013
                                             52 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1535
                                             49 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1    1084
                                             47 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      68
                                             45 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (6) _delay_cycles                                         6     6      0      46
                                             39 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             4     2      2     350
                                             39 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _lowIsr                                              21    21      0       0
                                             18 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _highIsr                                             18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DisplayNames
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
   _disableInterrupts
   _enableInterrupts
   _initTimers01
   _initialization
     _reloadTimer0
   _isDigit
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _read_byte_no_lib
   _send_string_no_lib
     _send_byte_no_lib
   _setupPorts
   _setupSerial
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _updateAlarmDisplay
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _updateAlarmStateDisplay
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
   _updateClockDisplay
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit

 _lowIsr (ROOT)

 _highIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     39      4C       5       59.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     50      54       1       66.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A0      34        0.0%
DATA                 0      0      A0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jul 31 00:46:32 2023

                  ?_lcd_send_byte 0030                                bsr 000FE0  
             ___wmul@multiplicand 002A                       __CFG_BORV$3 000000  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                     __CFG_OSC$XT 000000                       __CFG_LVP$ON 000000  
                     __CFG_WDT$ON 000000                               l121 10A6  
                             l130 11CC                               l122 10C8  
                             l203 1B5C                               l131 116E  
                             l212 1CBE                               l124 10E0  
                             l141 11FC                               l302 1A28  
                             l126 10F8                               l151 1284  
                             l143 1216                               l135 1182  
                             l160 1332                               l128 111A  
                             l153 1430                               l145 1230  
                             l314 1A8E                               l154 12D2  
                             l315 1A7C                               l323 1986  
                             l307 1854                               l163 1362  
                             l147 124A                               l139 11E4  
                             l316 1AA8                               l324 194A  
                             l332 191C                               l317 1A80  
                             l333 18F2                               l309 187C  
                             l173 140A                               l157 1302  
                             l149 1264                               l318 1A84  
                             l326 1962                               l166 1392  
                             l319 1A88                               l327 196E  
                             l328 197A                               l273 18C6  
                             l353 1452                               l169 13C2  
                             l274 189C                               l370 1546  
                             l362 14B2                               l354 146C  
                             l267 1D40                               l268 1D3E  
                             l364 15E4                               l372 1580  
                             l356 1480                               l293 1BF2  
                             l381 15DE                               l357 147A  
                             l294 1BEC                               l382 160E  
                             l374 159A                               l287 1C74  
                             l375 158A                               l367 1514  
                             l288 1C66                               l368 153C  
                             l377 15CC                               l369 154A  
                             l810 19B2                               l730 1D00  
                             l386 1680                               l378 15AC  
                             l387 1688                               l820 1A44  
                             l396 1730                               l388 16AC  
                             l813 19DA                               l397 16D8  
                             l814 19E4                               l823 1A64  
                             l824 1A6E                               l809 19BA  
                             l819 1A4C                      __CFG_CPB$OFF 000000  
                    __CFG_CPD$OFF 000000                               _lcd 000F83  
                             prod 000FF3                               wreg 000FE8  
                     lcd_gotoxy@x 0033                       lcd_gotoxy@y 0032  
                            l2061 184C                              l2075 1874  
                            l1915 15AC                              l1909 158A  
                            l1935 162A                              STR_1 106E  
                            STR_2 1027                              STR_3 1036  
                            STR_4 107D                              STR_5 1079  
                            STR_6 100B                              STR_7 1021  
                            STR_8 1059                              STR_9 1075  
                            u1320 1A50                              u1500 16D2  
                            u1245 19F8                              u1246 19FA  
                            u1510 1738                              u1520 1752  
                            u1440 165C                              u1530 1914  
                            u1610 18BE                              u1290 19BE  
                            u2250 1400                              u1540 193E  
                            u1620 18E8                              u2260 1402  
                            u2407 1C68                              u2280 1426  
                            u1537 190A                              u1617 18B4  
                            u1490 16B4                              u2290 1428  
                            u1547 1934                              u1627 18DE  
                            u1580 186A                              u2397 1A20  
                ?_lcd_send_nibble 0001   __end_of_updateAlarmStateDisplay 1B72  
                ??_initialization 0028                              _main 1082  
                _send_byte_no_lib 1D3A                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 0055                              prodh 000FF4  
                            prodl 000FF3                              start 00C6  
                   __CFG_IESO$OFF 000000                     __CFG_MCLRE$ON 000000  
                    ___param_bank 000000        __size_of_disableInterrupts 0006  
            __end_of_delay_cycles 1C0E        __end_of_updateClockDisplay 1AF8  
                           ?_main 0001                             STR_10 1079  
                           STR_11 1048                             STR_12 1067  
                           _T0CON 000FD5                   __end_of___lwdiv 19EE  
                 __end_of___lwmod 1A78                             i2l222 17EC  
                           i2l218 17C0                             _RCREG 000FAE  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _SPBRG 000FAF  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TXREG 000FAD  
                           _TXSTA 000FAC                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                 __end_of_isDigit 1CC8                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
                 __end_of_highIsr 1838                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                   __end_of_dpowers 100B  
                 __end_of_isdigit 1D08                             _hours 00CB  
                           main@c 00B8                    _capital_w_flag 00C0  
                           pclath 000FFA                             tablat 000FF5  
                _enableInterrupts 1D5C                             status 000FD8  
                           wtemp6 0056                   __end_of_sprintf 1760  
                  __CFG_PBADEN$ON 000000                   __initialization 1BAA  
                    __end_of_main 1448                   ??_lcd_send_byte 0031  
                          ??_main 0051                     __activetblptr 000003  
                   ?_initTimers01 0001              __end_of_DisplayNames 1D3A  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          _SPBRGH 000FB0                  __end_of_delay_ms 1C82  
                  __CFG_XINST$OFF 000000                  __end_of_lcd_init 189A  
                __end_of_lcd_putc 199C                  __end_of_lcd_puts 1946  
                          _a_flag 00BA                            ___wmul 1C36  
                  __CFG_STVREN$ON 000000                            _h_flag 00BD  
                       ??___lwdiv 002C                         ??___lwmod 0033  
                          _m_flag 00BC                    _start_recieved 00C4  
                          _s_flag 00BB                            clear_0 1BD0  
                          _lowIsr 0018                         ??_isDigit 002A  
                       ??_highIsr 0001                    ??_initTimers01 0028  
                    __pdataCOMRAM 0051                         ??_isdigit 0028  
                    __mediumconst 0000               send_string_no_lib@p 0029  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                _send_string_no_lib 189A  
                    ?_setupSerial 0001                         ??_sprintf 0040  
                      __accesstop 0080           __end_of__initialization 1BD6  
             ?_send_string_no_lib 0029                 ?_read_byte_no_lib 0001  
                   ___rparam_used 000001                _updateAlarmDisplay 1AF8  
              ??_read_byte_no_lib 0028                    __pcstackCOMRAM 0001  
           __size_of_delay_cycles 002E               ?_updateAlarmDisplay 0001  
            ??_send_string_no_lib 002B          __end_of_send_byte_no_lib 1D4A  
                 _read_alarm_flag 00C1                 lcd_gotoxy@address 0034  
            ??_updateAlarmDisplay 0051                      sprintf@width 004E  
                      __pbssBANK0 00B9                      _delay_cycles 1BE0  
               read_byte_no_lib@c 0028                     ?_reloadTimer0 0001  
                  lcd_send_byte@n 0030                           ?___wmul 0028  
        ?_updateAlarmStateDisplay 0001                  lcd_send_nibble@n 002F  
                         ?_lowIsr 0001          __end_of_enableInterrupts 1D62  
           __size_of_DisplayNames 0018                           _INTCON2 000FF1  
                         _INTCON3 000FF0                         ?_delay_ms 0028  
                      _lcd_gotoxy 1A78                         ?_lcd_init 0001  
                       ?_lcd_putc 0001                         ?_lcd_puts 0036  
              _updateClockDisplay 1ABA                    ??_reloadTimer0 0028  
            __end_of_initTimers01 1CA6               ?_updateClockDisplay 0001  
                         __Hparam 0000                           __Lparam 0000  
        __size_of_lcd_send_nibble 0022                      _DisplayNames 1D22  
                 __size_of___wmul 0026                           ___lwdiv 199C  
                         ___lwmod 1A36                      __psmallconst 1000  
                         __pcinit 1BAA                           __ramtop 1000  
                 __size_of_lowIsr 00AE                           _isDigit 1CA6  
                         __ptext0 1082                           __ptext1 1ABA  
                         __ptext2 1B36                           __ptext3 1AF8  
                         __ptext4 1448                           __ptext5 1CEA  
                         __ptext6 1C36                           __ptext7 1A36  
                         __ptext8 199C                           __ptext9 1C0E  
                         _highIsr 0008                         _T0CONbits 000FD5  
                       _T1CONbits 000FCD                           _dpowers 1001  
            ??_updateClockDisplay 0051                           _isdigit 1CEA  
                       _T3CONbits 000FB1                           _minutes 00CA  
                         _seconds 00C9                        ??_delay_ms 002A  
                         _sprintf 1448                        ??_lcd_init 0032  
                  __pintcode_body 1760                        ??_lcd_putc 0035  
                      ??_lcd_puts 0038              end_of_initialization 1BD6  
            __size_of_setupSerial 0028                           int_func 1760  
            lcd_send_byte@cm_data 0031                         _RCSTAbits 000FAB  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
         __size_of_initialization 0038             __end_of_lcd_send_byte 1A36  
                setupSerial@dummy 0028                         _PORTCbits 000F82  
                       _PORTEbits 000F84                        _setupPorts 1D08  
                       _TRISCbits 000F94                       ?_lcd_gotoxy 0032  
                 _LCD_INIT_STRING 0051    updateAlarmDisplay@alarm_string 0080  
        updateClockDisplay@Buffer 0080                         _TXSTAbits 000FAC  
               send_byte_no_lib@c 0028                 _toggle_alarm_flag 00B9  
                  __end_of___wmul 1C5C                       _BAUDCONbits 000FB8  
                   __pidataCOMRAM 1D68                     delay_cycles@n 002B  
                   delay_cycles@x 002C                 ??_lcd_send_nibble 002E  
       __size_of_read_byte_no_lib 0008                    __end_of_lowIsr 00C6  
               ?_send_byte_no_lib 0001              __end_of_reloadTimer0 1D54  
             start_initialization 1BAA                ??_send_byte_no_lib 0028  
               main@time_response 00AD                     _alarm_enabled 00C5  
           __size_of_initTimers01 0024                     _alarm_minutes 00C7  
                   _alarm_seconds 00C6               __size_of_lcd_gotoxy 0042  
                        ??___wmul 002C                  __CFG_LPT1OSC$OFF 000000  
                        ??_lowIsr 0013                 ?_enableInterrupts 0001  
     __size_of_send_string_no_lib 0056                       ?_setupPorts 0001  
              ??_enableInterrupts 0028                      _initTimers01 1C82  
                   __pcstackBANK0 0080  __size_of_updateAlarmStateDisplay 003C  
                    _isdigit$1321 0029                 __size_of_delay_ms 0026  
     __size_of_updateAlarmDisplay 003E                main@alarm_response 00A0  
                     _alarm_hours 00C8                 __size_of_lcd_init 0062  
                     sprintf@flag 0044                 __size_of_lcd_putc 0056  
               __size_of_lcd_puts 0056                       sprintf@prec 0047  
                ___lwdiv@dividend 0028                 __CFG_CCP2MX$PORTC 000000  
                       __pintcode 0008                    _initialization 1B72  
                        ?___lwdiv 0028                          ?___lwmod 002F  
                     __pintcodelo 0018                          ?_isDigit 0028  
                        ?_highIsr 0001                       __smallconst 1000  
                        ?_isdigit 0001                  ___lwdiv@quotient 002C  
                        ?_sprintf 0034                         _read_flag 00C2  
                  ___wmul@product 002C                    _read_time_flag 00C3  
                       delay_ms@n 0028                         delay_ms@x 002A  
             __size_of_setupPorts 001A                          i2u233_40 17BC  
                        i2u234_40 17BE                          _PIR1bits 000F9E  
          __end_of_initialization 1BAA                          _RCONbits 000FD0  
                __CFG_WDTPS$32768 000000             __size_of_reloadTimer0 000A  
                _read_byte_no_lib 1D54                 ___wmul@multiplier 0028  
                       lcd_init@i 0032       __size_of_updateClockDisplay 003E  
                       lcd_putc@c 0035                         lcd_puts@s 0036  
                    ??_lcd_gotoxy 0033                     ??_setupSerial 0028  
                     _INTCON2bits 000FF1                       _INTCON3bits 000FF0  
                       copy_data0 1BBE                       _first_digit 00BE  
     _updateAlarmStateDisplay$648 0038                   _lcd_send_nibble 1CC8  
                    _reloadTimer0 1D4A                          __Hrparam 0000  
                 ?_initialization 0001                          __Lrparam 0000  
              __CFG_BOREN$SBORDIS 000000                __end_of_lcd_gotoxy 1ABA  
                __size_of___lwdiv 0052                  __size_of___lwmod 0042  
                __size_of_isDigit 0022                  __size_of_highIsr 1830  
                      sprintf@len 004C                        sprintf@val 0045  
         _updateAlarmStateDisplay 1B36                  __size_of_isdigit 001E  
                        _main$551 00B6                          _delay_ms 1C5C  
                 ___lwdiv@divisor 002A                   ___lwdiv@counter 002E  
                        __ptext10 1D08                          __ptext11 189A  
                        __ptext20 1D62                          __ptext12 1D3A  
                        __ptext21 1D22                          __ptext13 1D54  
                        __ptext22 18F0                          __ptext14 1838  
                        __ptext23 1946                          __ptext15 1CA6  
                        __ptext24 1A78                          __ptext16 1B72  
                        __ptext25 19EE                          __ptext17 1D4A  
                        __ptext26 1CC8                          __ptext18 1C82  
                        __ptext27 1BE0                          __ptext19 1D5C  
                        __ptext28 1C5C                          _lcd_init 1838  
                        _lcd_putc 1946                          _lcd_puts 18F0  
                __size_of_sprintf 0318            __size_of_lcd_send_byte 0048  
                   ?_delay_cycles 0001                     __size_of_main 03C6  
       __size_of_send_byte_no_lib 0010               __end_of_setupSerial 1C36  
                        isDigit@c 002A                          int$flags 0055  
                    ??_setupPorts 0028                 _disableInterrupts 1D62  
                    _small_w_flag 00BF                        _INTCONbits 000FF2  
              ?_disableInterrupts 0001                          isdigit@c 002A  
                        intlevel1 0000                          intlevel2 0000  
                       sprintf@ap 0048                         sprintf@cp 004A  
         __end_of_lcd_send_nibble 1CEA                         sprintf@sp 0034  
                  ??_delay_cycles 0028         __size_of_enableInterrupts 0006  
             ??_disableInterrupts 0028                  ___lwmod@dividend 002F  
              __end_of_setupPorts 1D22                     ?_DisplayNames 0001  
      __end_of_send_string_no_lib 18F0                     _lcd_send_byte 19EE  
       __end_of_disableInterrupts 1D68         ??_updateAlarmStateDisplay 0038  
                        sprintf@c 0050                          sprintf@f 0036  
                 ___lwmod@divisor 0031                   ___lwmod@counter 0033  
      __end_of_updateAlarmDisplay 1B36                       _setupSerial 1C0E  
        __end_of_read_byte_no_lib 1D5C                    ??_DisplayNames 0038  
