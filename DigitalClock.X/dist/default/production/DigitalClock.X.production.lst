

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jul 31 00:35:08 2023

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4620 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataCOMRAM
    86  001D80                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _LCD_INIT_STRING
    90  001D80  28                 	db	40
    91  001D81  0C                 	db	12
    92  001D82  01                 	db	1
    93  001D83  06                 	db	6
    94                           
    95                           	psect	smallconst
    96  001000                     __psmallconst:
    97                           	opt stack 0
    98  001000  00                 	db	0
    99  001001                     _dpowers:
   100                           	opt stack 0
   101  001001  0001               	dw	1
   102  001003  000A               	dw	10
   103  001005  0064               	dw	100
   104  001007  03E8               	dw	1000
   105  001009  2710               	dw	10000
   106  00100B                     __end_of_dpowers:
   107                           	opt stack 0
   108  0000                     _PORTEbits	set	3972
   109  0000                     _TXREG	set	4013
   110  0000                     _PIR1bits	set	3998
   111  0000                     _TRISCbits	set	3988
   112  0000                     _RCREG	set	4014
   113  0000                     _RCSTAbits	set	4011
   114  0000                     _RCSTA	set	4011
   115  0000                     _TXSTAbits	set	4012
   116  0000                     _SPBRGH	set	4016
   117  0000                     _SPBRG	set	4015
   118  0000                     _TXSTA	set	4012
   119  0000                     _BAUDCONbits	set	4024
   120  0000                     _T3CONbits	set	4017
   121  0000                     _PORTCbits	set	3970
   122  0000                     _RCONbits	set	4048
   123  0000                     _INTCON3bits	set	4080
   124  0000                     _INTCON2bits	set	4081
   125  0000                     _INTCON3	set	4080
   126  0000                     _INTCON2	set	4081
   127  0000                     _T1CONbits	set	4045
   128  0000                     _T0CONbits	set	4053
   129  0000                     _T0CON	set	4053
   130  0000                     _TMR0L	set	4054
   131  0000                     _TMR0H	set	4055
   132  0000                     _TRISE	set	3990
   133  0000                     _TRISD	set	3989
   134  0000                     _TRISA	set	3986
   135  0000                     _TRISC	set	3988
   136  0000                     _TRISB	set	3987
   137  0000                     _ADCON1	set	4033
   138  0000                     _ADCON0	set	4034
   139  0000                     _INTCONbits	set	4082
   140  00100B                     STR_6:
   141  00100B  41                 	db	65	;'A'
   142  00100C  6C                 	db	108	;'l'
   143  00100D  61                 	db	97	;'a'
   144  00100E  72                 	db	114	;'r'
   145  00100F  6D                 	db	109	;'m'
   146  001010  3A                 	db	58	;':'
   147  001011  20                 	db	32
   148  001012  25                 	db	37
   149  001013  30                 	db	48	;'0'
   150  001014  32                 	db	50	;'2'
   151  001015  75                 	db	117	;'u'
   152  001016  3A                 	db	58	;':'
   153  001017  25                 	db	37
   154  001018  30                 	db	48	;'0'
   155  001019  32                 	db	50	;'2'
   156  00101A  75                 	db	117	;'u'
   157  00101B  3A                 	db	58	;':'
   158  00101C  25                 	db	37
   159  00101D  30                 	db	48	;'0'
   160  00101E  32                 	db	50	;'2'
   161  00101F  75                 	db	117	;'u'
   162  001020  00                 	db	0
   163  001021                     STR_7:
   164  001021  54                 	db	84	;'T'
   165  001022  69                 	db	105	;'i'
   166  001023  6D                 	db	109	;'m'
   167  001024  65                 	db	101	;'e'
   168  001025  3A                 	db	58	;':'
   169  001026  20                 	db	32
   170  001027  25                 	db	37
   171  001028  30                 	db	48	;'0'
   172  001029  32                 	db	50	;'2'
   173  00102A  75                 	db	117	;'u'
   174  00102B  3A                 	db	58	;':'
   175  00102C  25                 	db	37
   176  00102D  30                 	db	48	;'0'
   177  00102E  32                 	db	50	;'2'
   178  00102F  75                 	db	117	;'u'
   179  001030  3A                 	db	58	;':'
   180  001031  25                 	db	37
   181  001032  30                 	db	48	;'0'
   182  001033  32                 	db	50	;'2'
   183  001034  75                 	db	117	;'u'
   184  001035  00                 	db	0
   185  001036                     STR_3:
   186  001036  25                 	db	37
   187  001037  30                 	db	48	;'0'
   188  001038  32                 	db	50	;'2'
   189  001039  75                 	db	117	;'u'
   190  00103A  3A                 	db	58	;':'
   191  00103B  25                 	db	37
   192  00103C  30                 	db	48	;'0'
   193  00103D  32                 	db	50	;'2'
   194  00103E  75                 	db	117	;'u'
   195  00103F  3A                 	db	58	;':'
   196  001040  25                 	db	37
   197  001041  30                 	db	48	;'0'
   198  001042  32                 	db	50	;'2'
   199  001043  75                 	db	117	;'u'
   200  001044  20                 	db	32
   201  001045  25                 	db	37
   202  001046  73                 	db	115	;'s'
   203  001047  00                 	db	0
   204  001048                     STR_11:
   205  001048  4D                 	db	77	;'M'
   206  001049  61                 	db	97	;'a'
   207  00104A  73                 	db	115	;'s'
   208  00104B  61                 	db	97	;'a'
   209  00104C  20                 	db	32
   210  00104D  26                 	db	38
   211  00104E  20                 	db	32
   212  00104F  53                 	db	83	;'S'
   213  001050  61                 	db	97	;'a'
   214  001051  6C                 	db	108	;'l'
   215  001052  73                 	db	115	;'s'
   216  001053  61                 	db	97	;'a'
   217  001054  62                 	db	98	;'b'
   218  001055  65                 	db	101	;'e'
   219  001056  65                 	db	101	;'e'
   220  001057  6C                 	db	108	;'l'
   221  001058  00                 	db	0
   222  001059                     STR_8:
   223  001059  41                 	db	65	;'A'
   224  00105A  6C                 	db	108	;'l'
   225  00105B  61                 	db	97	;'a'
   226  00105C  72                 	db	114	;'r'
   227  00105D  6D                 	db	109	;'m'
   228  00105E  20                 	db	32
   229  00105F  53                 	db	83	;'S'
   230  001060  74                 	db	116	;'t'
   231  001061  61                 	db	97	;'a'
   232  001062  74                 	db	116	;'t'
   233  001063  65                 	db	101	;'e'
   234  001064  3A                 	db	58	;':'
   235  001065  20                 	db	32
   236  001066  00                 	db	0
   237  001067                     STR_12:
   238  001067  28                 	db	40
   239  001068  6E                 	db	110	;'n'
   240  001069  75                 	db	117	;'u'
   241  00106A  6C                 	db	108	;'l'
   242  00106B  6C                 	db	108	;'l'
   243  00106C  29                 	db	41
   244  00106D  00                 	db	0
   245  00106E                     STR_1:
   246  00106E  48                 	db	72	;'H'
   247  00106F  65                 	db	101	;'e'
   248  001070  6C                 	db	108	;'l'
   249  001071  6C                 	db	108	;'l'
   250  001072  6F                 	db	111	;'o'
   251  001073  0A                 	db	10
   252  001074  00                 	db	0
   253  001075                     STR_9:
   254  001075  4F                 	db	79	;'O'
   255  001076  4E                 	db	78	;'N'
   256  001077  20                 	db	32
   257  001078  00                 	db	0
   258  001079                     STR_5:
   259  001079  4F                 	db	79	;'O'
   260  00107A  46                 	db	70	;'F'
   261  00107B  46                 	db	70	;'F'
   262  00107C  00                 	db	0
   263  00107D                     STR_4:
   264  00107D  4F                 	db	79	;'O'
   265  00107E  4E                 	db	78	;'N'
   266  00107F  00                 	db	0
   267  0000                     
   268                           ; #config settings
   269  001080  00                 	db	0	; dummy byte at the end
   270  0000                     
   271                           	psect	cinit
   272  001BB6                     __pcinit:
   273                           	opt stack 0
   274  001BB6                     start_initialization:
   275                           	opt stack 0
   276  001BB6                     __initialization:
   277                           	opt stack 0
   278                           
   279                           ; Initialize objects allocated to COMRAM (4 bytes)
   280                           ; load TBLPTR registers with __pidataCOMRAM
   281  001BB6  0E80               	movlw	low __pidataCOMRAM
   282  001BB8  6EF6               	movwf	tblptrl,c
   283  001BBA  0E1D               	movlw	high __pidataCOMRAM
   284  001BBC  6EF7               	movwf	tblptrh,c
   285  001BBE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   286  001BC0  6EF8               	movwf	tblptru,c
   287  001BC2  EE00  F051         	lfsr	0,__pdataCOMRAM
   288  001BC6  EE10 F004          	lfsr	1,4
   289  001BCA                     copy_data0:
   290  001BCA  0009               	tblrd		*+
   291  001BCC  CFF5 FFEE          	movff	tablat,postinc0
   292  001BD0  50E5               	movf	postdec1,w,c
   293  001BD2  50E1               	movf	fsr1l,w,c
   294  001BD4  E1FA               	bnz	copy_data0
   295                           
   296                           ; Clear objects allocated to BANK0 (19 bytes)
   297  001BD6  EE00  F0B9         	lfsr	0,__pbssBANK0
   298  001BDA  0E13               	movlw	19
   299  001BDC                     clear_0:
   300  001BDC  6AEE               	clrf	postinc0,c
   301  001BDE  06E8               	decf	wreg,f,c
   302  001BE0  E1FD               	bnz	clear_0
   303  001BE2                     end_of_initialization:
   304                           	opt stack 0
   305  001BE2                     __end_of__initialization:
   306                           	opt stack 0
   307  001BE2  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   308  001BE4  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   309  001BE6  0100               	movlb	0
   310  001BE8  EF41  F008         	goto	_main	;jump to C main() function
   311                           tblptru	equ	0xFF8
   312                           tblptrh	equ	0xFF7
   313                           tblptrl	equ	0xFF6
   314                           tablat	equ	0xFF5
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           postdec1	equ	0xFE5
   318                           fsr1l	equ	0xFE1
   319                           
   320                           	psect	dataCOMRAM
   321  000051                     __pdataCOMRAM:
   322                           	opt stack 0
   323  000051                     _LCD_INIT_STRING:
   324                           	opt stack 0
   325  000051                     	ds	4
   326                           tblptru	equ	0xFF8
   327                           tblptrh	equ	0xFF7
   328                           tblptrl	equ	0xFF6
   329                           tablat	equ	0xFF5
   330                           postinc0	equ	0xFEE
   331                           wreg	equ	0xFE8
   332                           postdec1	equ	0xFE5
   333                           fsr1l	equ	0xFE1
   334                           
   335                           	psect	bssBANK0
   336  0000B9                     __pbssBANK0:
   337                           	opt stack 0
   338  0000B9                     _toggle_alarm_flag:
   339                           	opt stack 0
   340  0000B9                     	ds	1
   341  0000BA                     _a_flag:
   342                           	opt stack 0
   343  0000BA                     	ds	1
   344  0000BB                     _s_flag:
   345                           	opt stack 0
   346  0000BB                     	ds	1
   347  0000BC                     _m_flag:
   348                           	opt stack 0
   349  0000BC                     	ds	1
   350  0000BD                     _h_flag:
   351                           	opt stack 0
   352  0000BD                     	ds	1
   353  0000BE                     _first_digit:
   354                           	opt stack 0
   355  0000BE                     	ds	1
   356  0000BF                     _small_w_flag:
   357                           	opt stack 0
   358  0000BF                     	ds	1
   359  0000C0                     _capital_w_flag:
   360                           	opt stack 0
   361  0000C0                     	ds	1
   362  0000C1                     _read_alarm_flag:
   363                           	opt stack 0
   364  0000C1                     	ds	1
   365  0000C2                     _read_flag:
   366                           	opt stack 0
   367  0000C2                     	ds	1
   368  0000C3                     _read_time_flag:
   369                           	opt stack 0
   370  0000C3                     	ds	1
   371  0000C4                     _start_recieved:
   372                           	opt stack 0
   373  0000C4                     	ds	1
   374  0000C5                     _alarm_enabled:
   375                           	opt stack 0
   376  0000C5                     	ds	1
   377  0000C6                     _alarm_seconds:
   378                           	opt stack 0
   379  0000C6                     	ds	1
   380  0000C7                     _alarm_minutes:
   381                           	opt stack 0
   382  0000C7                     	ds	1
   383  0000C8                     _alarm_hours:
   384                           	opt stack 0
   385  0000C8                     	ds	1
   386  0000C9                     _seconds:
   387                           	opt stack 0
   388  0000C9                     	ds	1
   389  0000CA                     _minutes:
   390                           	opt stack 0
   391  0000CA                     	ds	1
   392  0000CB                     _hours:
   393                           	opt stack 0
   394  0000CB                     	ds	1
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           postdec1	equ	0xFE5
   402                           fsr1l	equ	0xFE1
   403                           
   404                           	psect	cstackBANK0
   405  000080                     __pcstackBANK0:
   406                           	opt stack 0
   407  000080                     updateAlarmDisplay@alarm_string:
   408                           	opt stack 0
   409  000080                     updateClockDisplay@Buffer:
   410                           	opt stack 0
   411                           
   412                           ; 32 bytes @ 0x0
   413  000080                     	ds	32
   414  0000A0                     main@alarm_response:
   415                           	opt stack 0
   416                           
   417                           ; 13 bytes @ 0x20
   418  0000A0                     	ds	13
   419  0000AD                     main@time_response:
   420                           	opt stack 0
   421                           
   422                           ; 9 bytes @ 0x2D
   423  0000AD                     	ds	9
   424  0000B6                     _main$551:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x36
   428  0000B6                     	ds	2
   429  0000B8                     main@c:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x38
   433  0000B8                     	ds	1
   434                           tblptru	equ	0xFF8
   435                           tblptrh	equ	0xFF7
   436                           tblptrl	equ	0xFF6
   437                           tablat	equ	0xFF5
   438                           postinc0	equ	0xFEE
   439                           wreg	equ	0xFE8
   440                           postdec1	equ	0xFE5
   441                           fsr1l	equ	0xFE1
   442                           
   443                           	psect	cstackCOMRAM
   444  000001                     __pcstackCOMRAM:
   445                           	opt stack 0
   446  000001                     ??_highIsr:
   447  000001                     
   448                           ; 1 bytes @ 0x0
   449  000001                     	ds	18
   450  000013                     ??_lowIsr:
   451                           
   452                           ; 1 bytes @ 0x12
   453  000013                     	ds	21
   454  000028                     ??_isdigit:
   455  000028                     ??_delay_cycles:
   456  000028                     ?_isDigit:
   457                           	opt stack 0
   458  000028                     ?___wmul:
   459                           	opt stack 0
   460  000028                     ?___lwdiv:
   461                           	opt stack 0
   462  000028                     setupSerial@dummy:
   463                           	opt stack 0
   464  000028                     read_byte_no_lib@c:
   465                           	opt stack 0
   466  000028                     send_byte_no_lib@c:
   467                           	opt stack 0
   468  000028                     delay_ms@n:
   469                           	opt stack 0
   470  000028                     ___wmul@multiplier:
   471                           	opt stack 0
   472  000028                     ___lwdiv@dividend:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x27
   476  000028                     	ds	1
   477  000029                     _isdigit$1321:
   478                           	opt stack 0
   479  000029                     send_string_no_lib@p:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x28
   483  000029                     	ds	1
   484  00002A                     isDigit@c:
   485                           	opt stack 0
   486  00002A                     isdigit@c:
   487                           	opt stack 0
   488  00002A                     delay_ms@x:
   489                           	opt stack 0
   490  00002A                     ___wmul@multiplicand:
   491                           	opt stack 0
   492  00002A                     ___lwdiv@divisor:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x29
   496  00002A                     	ds	1
   497  00002B                     delay_cycles@n:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x2A
   501  00002B                     	ds	1
   502  00002C                     delay_cycles@x:
   503                           	opt stack 0
   504  00002C                     ___wmul@product:
   505                           	opt stack 0
   506  00002C                     ___lwdiv@quotient:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x2B
   510  00002C                     	ds	2
   511  00002E                     ??_lcd_send_nibble:
   512  00002E                     ___lwdiv@counter:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x2D
   516  00002E                     	ds	1
   517  00002F                     ?___lwmod:
   518                           	opt stack 0
   519  00002F                     lcd_send_nibble@n:
   520                           	opt stack 0
   521  00002F                     ___lwmod@dividend:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x2E
   525  00002F                     	ds	1
   526  000030                     lcd_send_byte@n:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x2F
   530  000030                     	ds	1
   531  000031                     lcd_send_byte@cm_data:
   532                           	opt stack 0
   533  000031                     ___lwmod@divisor:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x30
   537  000031                     	ds	1
   538  000032                     lcd_init@i:
   539                           	opt stack 0
   540  000032                     lcd_gotoxy@y:
   541                           	opt stack 0
   542                           
   543                           ; 1 bytes @ 0x31
   544  000032                     	ds	1
   545  000033                     lcd_gotoxy@x:
   546                           	opt stack 0
   547  000033                     ___lwmod@counter:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0x32
   551  000033                     	ds	1
   552  000034                     ?_sprintf:
   553                           	opt stack 0
   554  000034                     lcd_gotoxy@address:
   555                           	opt stack 0
   556  000034                     sprintf@sp:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x33
   560  000034                     	ds	1
   561  000035                     lcd_putc@c:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x34
   565  000035                     	ds	1
   566  000036                     lcd_puts@s:
   567                           	opt stack 0
   568  000036                     sprintf@f:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x35
   572  000036                     	ds	2
   573  000038                     _updateAlarmStateDisplay$648:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x37
   577  000038                     	ds	8
   578  000040                     ??_sprintf:
   579                           
   580                           ; 1 bytes @ 0x3F
   581  000040                     	ds	4
   582  000044                     sprintf@flag:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x43
   586  000044                     	ds	1
   587  000045                     sprintf@val:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x44
   591  000045                     	ds	2
   592  000047                     sprintf@prec:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x46
   596  000047                     	ds	1
   597  000048                     sprintf@ap:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x47
   601  000048                     	ds	2
   602  00004A                     sprintf@cp:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x49
   606  00004A                     	ds	2
   607  00004C                     sprintf@len:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x4B
   611  00004C                     	ds	2
   612  00004E                     sprintf@width:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x4D
   616  00004E                     	ds	2
   617  000050                     sprintf@c:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x4F
   621  000050                     	ds	1
   622  000051                     tblptru	equ	0xFF8
   623                           tblptrh	equ	0xFF7
   624                           tblptrl	equ	0xFF6
   625                           tablat	equ	0xFF5
   626                           postinc0	equ	0xFEE
   627                           wreg	equ	0xFE8
   628                           postdec1	equ	0xFE5
   629                           fsr1l	equ	0xFE1
   630                           
   631                           ; 1 bytes @ 0x50
   632 ;;
   633 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   634 ;;
   635 ;; *************** function _main *****************
   636 ;; Defined at:
   637 ;;		line 129 in file "DigitalClock.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;		None
   640 ;; Auto vars:     Size  Location     Type
   641 ;;  alarm_respon   13   32[BANK0 ] unsigned char [13]
   642 ;;  time_respons    9   45[BANK0 ] unsigned char [9]
   643 ;;  c               1   56[BANK0 ] unsigned char 
   644 ;; Return value:  Size  Location     Type
   645 ;;                  1    wreg      void 
   646 ;; Registers used:
   647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   648 ;; Tracked objects:
   649 ;;		On entry : 0/0
   650 ;;		On exit  : 0/0
   651 ;;		Unchanged: 0/0
   652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   654 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   656 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   657 ;;Total ram usage:       25 bytes
   658 ;; Hardware stack levels required when called:   10
   659 ;; This function calls:
   660 ;;		_DisplayNames
   661 ;;		_disableInterrupts
   662 ;;		_enableInterrupts
   663 ;;		_initTimers01
   664 ;;		_initialization
   665 ;;		_isDigit
   666 ;;		_lcd_init
   667 ;;		_read_byte_no_lib
   668 ;;		_send_string_no_lib
   669 ;;		_setupPorts
   670 ;;		_setupSerial
   671 ;;		_sprintf
   672 ;;		_updateAlarmDisplay
   673 ;;		_updateAlarmStateDisplay
   674 ;;		_updateClockDisplay
   675 ;; This function is called by:
   676 ;;		Startup code after reset
   677 ;; This function uses a non-reentrant model
   678 ;;
   679                           
   680                           	psect	text0
   681  001082                     __ptext0:
   682                           	opt stack 0
   683  001082                     _main:
   684                           	opt stack 21
   685                           
   686                           ;DigitalClock.c: 130: setupSerial();
   687                           
   688                           ;incstack = 0
   689  001082  EC0D  F00E         	call	_setupSerial	;wreg free
   690                           
   691                           ;DigitalClock.c: 131: initTimers01();
   692  001086  EC47  F00E         	call	_initTimers01	;wreg free
   693                           
   694                           ;DigitalClock.c: 132: setupPorts();
   695  00108A  EC8A  F00E         	call	_setupPorts	;wreg free
   696                           
   697                           ;DigitalClock.c: 133: lcd_init();
   698  00108E  EC22  F00C         	call	_lcd_init	;wreg free
   699                           
   700                           ;DigitalClock.c: 134: initialization();
   701  001092  ECBF  F00D         	call	_initialization	;wreg free
   702                           
   703                           ;DigitalClock.c: 135: DisplayNames();
   704  001096  EC97  F00E         	call	_DisplayNames	;wreg free
   705                           
   706                           ;DigitalClock.c: 136: send_string_no_lib("Hello\n");
   707  00109A  0E6E               	movlw	low STR_1
   708  00109C  6E29               	movwf	send_string_no_lib@p,c
   709  00109E  0E10               	movlw	high STR_1
   710  0010A0  6E2A               	movwf	send_string_no_lib@p+1,c
   711  0010A2  EC53  F00C         	call	_send_string_no_lib	;wreg free
   712  0010A6                     l121:
   713  0010A6  0004               	clrwdt		;# 
   714                           
   715                           ;DigitalClock.c: 139: updateAlarmDisplay();
   716  0010A8  EC82  F00D         	call	_updateAlarmDisplay	;wreg free
   717                           
   718                           ;DigitalClock.c: 140: updateAlarmStateDisplay();
   719  0010AC  ECA1  F00D         	call	_updateAlarmStateDisplay	;wreg free
   720                           
   721                           ;DigitalClock.c: 141: updateClockDisplay();
   722  0010B0  EC63  F00D         	call	_updateClockDisplay	;wreg free
   723                           
   724                           ;DigitalClock.c: 144: unsigned char c=read_byte_no_lib();
   725  0010B4  ECB0  F00E         	call	_read_byte_no_lib	;wreg free
   726  0010B8  0100               	movlb	0	; () banked
   727  0010BA  6FB8               	movwf	main@c& (0+255),b
   728                           
   729                           ; BSR set to: 0
   730                           ;DigitalClock.c: 147: if (c == '[') {
   731  0010BC  0E5B               	movlw	91
   732  0010BE  19B8               	xorwf	main@c& (0+255),w,b
   733  0010C0  A4D8               	btfss	status,2,c
   734  0010C2  D002               	goto	l122
   735                           
   736                           ; BSR set to: 0
   737                           ;DigitalClock.c: 148: start_recieved=1;
   738  0010C4  0E01               	movlw	1
   739  0010C6  D1BE               	goto	L4
   740  0010C8                     l122:
   741                           
   742                           ; BSR set to: 0
   743                           ;DigitalClock.c: 152: else if ((c=='r')&& (start_recieved==1)){
   744                           
   745                           ; BSR set to: 0
   746  0010C8  0E72               	movlw	114
   747  0010CA  19B8               	xorwf	main@c& (0+255),w,b
   748  0010CC  A4D8               	btfss	status,2,c
   749  0010CE  D008               	goto	l124
   750                           
   751                           ; BSR set to: 0
   752  0010D0  05C4               	decf	_start_recieved& (0+255),w,b
   753  0010D2  A4D8               	btfss	status,2,c
   754  0010D4  D005               	goto	l124
   755                           
   756                           ; BSR set to: 0
   757                           ;DigitalClock.c: 153: start_recieved=2;
   758  0010D6  0E02               	movlw	2
   759  0010D8  6FC4               	movwf	_start_recieved& (0+255),b
   760                           
   761                           ;DigitalClock.c: 154: read_flag=1;
   762  0010DA  0E01               	movlw	1
   763  0010DC  6FC2               	movwf	_read_flag& (0+255),b
   764                           
   765                           ;DigitalClock.c: 155: }
   766  0010DE  D7E3               	goto	l121
   767  0010E0                     l124:
   768                           
   769                           ; BSR set to: 0
   770                           ;DigitalClock.c: 156: else if ((c=='t')&& (start_recieved==2)){
   771                           
   772                           ; BSR set to: 0
   773  0010E0  0E74               	movlw	116
   774  0010E2  19B8               	xorwf	main@c& (0+255),w,b
   775  0010E4  A4D8               	btfss	status,2,c
   776  0010E6  D008               	goto	l126
   777                           
   778                           ; BSR set to: 0
   779  0010E8  0E02               	movlw	2
   780  0010EA  19C4               	xorwf	_start_recieved& (0+255),w,b
   781  0010EC  A4D8               	btfss	status,2,c
   782  0010EE  D004               	goto	l126
   783                           
   784                           ; BSR set to: 0
   785                           ;DigitalClock.c: 157: start_recieved=3;
   786  0010F0  0E03               	movlw	3
   787  0010F2  6FC4               	movwf	_start_recieved& (0+255),b
   788                           
   789                           ;DigitalClock.c: 158: read_time_flag=1;
   790  0010F4  0E01               	movlw	1
   791  0010F6  D039               	goto	L2
   792  0010F8                     l126:
   793                           
   794                           ; BSR set to: 0
   795                           ;DigitalClock.c: 162: else if ((c=='a')&& (start_recieved==2)&&read_flag==1){
   796                           
   797                           ; BSR set to: 0
   798  0010F8  0E61               	movlw	97
   799  0010FA  19B8               	xorwf	main@c& (0+255),w,b
   800  0010FC  A4D8               	btfss	status,2,c
   801  0010FE  D00D               	goto	l128
   802                           
   803                           ; BSR set to: 0
   804  001100  0E02               	movlw	2
   805  001102  19C4               	xorwf	_start_recieved& (0+255),w,b
   806  001104  A4D8               	btfss	status,2,c
   807  001106  D009               	goto	l128
   808                           
   809                           ; BSR set to: 0
   810  001108  05C2               	decf	_read_flag& (0+255),w,b
   811  00110A  A4D8               	btfss	status,2,c
   812  00110C  D006               	goto	l128
   813                           
   814                           ; BSR set to: 0
   815                           ;DigitalClock.c: 163: start_recieved=3;
   816  00110E  0E03               	movlw	3
   817  001110  6FC4               	movwf	_start_recieved& (0+255),b
   818                           
   819                           ;DigitalClock.c: 164: read_flag=0;
   820  001112  0E00               	movlw	0
   821  001114  6FC2               	movwf	_read_flag& (0+255),b
   822                           
   823                           ;DigitalClock.c: 165: read_alarm_flag=1;
   824  001116  0E01               	movlw	1
   825  001118  D057               	goto	L3
   826  00111A                     l128:
   827                           
   828                           ; BSR set to: 0
   829                           ;DigitalClock.c: 167: else if ((c==']')&& (start_recieved==3)){
   830                           
   831                           ; BSR set to: 0
   832  00111A  0E5D               	movlw	93
   833  00111C  19B8               	xorwf	main@c& (0+255),w,b
   834  00111E  A4D8               	btfss	status,2,c
   835  001120  D055               	goto	l130
   836                           
   837                           ; BSR set to: 0
   838  001122  0E03               	movlw	3
   839  001124  19C4               	xorwf	_start_recieved& (0+255),w,b
   840  001126  A4D8               	btfss	status,2,c
   841  001128  D051               	goto	l130
   842                           
   843                           ; BSR set to: 0
   844                           ;DigitalClock.c: 168: start_recieved=0;
   845  00112A  0E00               	movlw	0
   846  00112C  6FC4               	movwf	_start_recieved& (0+255),b
   847                           
   848                           ; BSR set to: 0
   849                           ;DigitalClock.c: 169: if(read_time_flag==1){
   850  00112E  05C3               	decf	_read_time_flag& (0+255),w,b
   851  001130  A4D8               	btfss	status,2,c
   852  001132  D01D               	goto	l131
   853                           
   854                           ; BSR set to: 0
   855                           ;DigitalClock.c: 170: char time_response[9];
   856                           ;DigitalClock.c: 171: sprintf(time_response, "%02u:%02u:%02u", hours, minutes, seconds);
   857  001134  0EAD               	movlw	low main@time_response
   858  001136  6E34               	movwf	sprintf@sp,c
   859  001138  0E00               	movlw	high main@time_response
   860  00113A  6E35               	movwf	sprintf@sp+1,c
   861  00113C  0E27               	movlw	low (STR_7+6)
   862  00113E  6E36               	movwf	sprintf@f,c
   863  001140  0E10               	movlw	high (STR_7+6)
   864  001142  6E37               	movwf	sprintf@f+1,c
   865  001144  C0CB  F038         	movff	_hours,?_sprintf+4
   866  001148  6A39               	clrf	?_sprintf+5,c
   867  00114A  C0CA  F03A         	movff	_minutes,?_sprintf+6
   868  00114E  6A3B               	clrf	?_sprintf+7,c
   869  001150  C0C9  F03C         	movff	_seconds,?_sprintf+8
   870  001154  6A3D               	clrf	?_sprintf+9,c
   871  001156  EC24  F00A         	call	_sprintf	;wreg free
   872                           
   873                           ;DigitalClock.c: 172: send_string_no_lib(time_response);
   874  00115A  0EAD               	movlw	low main@time_response
   875  00115C  6E29               	movwf	send_string_no_lib@p,c
   876  00115E  0E00               	movlw	high main@time_response
   877  001160  6E2A               	movwf	send_string_no_lib@p+1,c
   878  001162  EC53  F00C         	call	_send_string_no_lib	;wreg free
   879                           
   880                           ;DigitalClock.c: 173: read_time_flag=0;
   881  001166  0E00               	movlw	0
   882  001168  0100               	movlb	0	; () banked
   883  00116A                     L2:
   884  00116A  6FC3               	movwf	_read_time_flag& (0+255),b
   885                           
   886                           ;DigitalClock.c: 174: }
   887  00116C  D79C               	goto	l121
   888  00116E                     l131:
   889                           
   890                           ; BSR set to: 0
   891                           ;DigitalClock.c: 175: else if(read_alarm_flag==1){
   892                           
   893                           ; BSR set to: 0
   894  00116E  05C1               	decf	_read_alarm_flag& (0+255),w,b
   895  001170  A4D8               	btfss	status,2,c
   896  001172  D799               	goto	l121
   897                           
   898                           ; BSR set to: 0
   899                           ;DigitalClock.c: 176: char alarm_response[13];
   900                           ;DigitalClock.c: 177: sprintf(alarm_response, "%02u:%02u:%02u %s", alarm_hours, alarm_mi
      +                          nutes, alarm_seconds,alarm_enabled?"ON":"OFF");
   901  001174  51C5               	movf	_alarm_enabled& (0+255),w,b	;volatile
   902  001176  A4D8               	btfss	status,2,c
   903  001178  D004               	goto	l135
   904                           
   905                           ; BSR set to: 0
   906  00117A  0E79               	movlw	low STR_5
   907  00117C  6FB6               	movwf	_main$551& (0+255),b
   908  00117E  0E10               	movlw	high STR_5
   909  001180  D003               	goto	L5
   910  001182                     l135:
   911                           
   912                           ; BSR set to: 0
   913                           
   914                           ; BSR set to: 0
   915  001182  0E7D               	movlw	low STR_4
   916  001184  6FB6               	movwf	_main$551& (0+255),b
   917  001186  0E10               	movlw	high STR_4
   918  001188                     L5:
   919  001188  6FB7               	movwf	(_main$551+1)& (0+255),b
   920                           
   921                           ; BSR set to: 0
   922                           
   923                           ; BSR set to: 0
   924  00118A  0EA0               	movlw	low main@alarm_response
   925  00118C  6E34               	movwf	sprintf@sp,c
   926  00118E  0E00               	movlw	high main@alarm_response
   927  001190  6E35               	movwf	sprintf@sp+1,c
   928  001192  0E36               	movlw	low STR_3
   929  001194  6E36               	movwf	sprintf@f,c
   930  001196  0E10               	movlw	high STR_3
   931  001198  6E37               	movwf	sprintf@f+1,c
   932  00119A  C0C8  F038         	movff	_alarm_hours,?_sprintf+4
   933  00119E  6A39               	clrf	?_sprintf+5,c
   934  0011A0  C0C7  F03A         	movff	_alarm_minutes,?_sprintf+6
   935  0011A4  6A3B               	clrf	?_sprintf+7,c
   936  0011A6  C0C6  F03C         	movff	_alarm_seconds,?_sprintf+8
   937  0011AA  6A3D               	clrf	?_sprintf+9,c
   938  0011AC  C0B6  F03E         	movff	_main$551,?_sprintf+10
   939  0011B0  C0B7  F03F         	movff	_main$551+1,?_sprintf+11
   940  0011B4  EC24  F00A         	call	_sprintf	;wreg free
   941                           
   942                           ;DigitalClock.c: 178: send_string_no_lib(alarm_response);
   943  0011B8  0EA0               	movlw	low main@alarm_response
   944  0011BA  6E29               	movwf	send_string_no_lib@p,c
   945  0011BC  0E00               	movlw	high main@alarm_response
   946  0011BE  6E2A               	movwf	send_string_no_lib@p+1,c
   947  0011C0  EC53  F00C         	call	_send_string_no_lib	;wreg free
   948                           
   949                           ;DigitalClock.c: 179: read_alarm_flag=0;
   950  0011C4  0E00               	movlw	0
   951  0011C6  0100               	movlb	0	; () banked
   952  0011C8                     L3:
   953  0011C8  6FC1               	movwf	_read_alarm_flag& (0+255),b
   954                           
   955                           ; BSR set to: 0
   956                           ;DigitalClock.c: 180: }
   957                           ;DigitalClock.c: 183: }
   958                           
   959                           ; BSR set to: 0
   960  0011CA  D76D               	goto	l121
   961  0011CC                     l130:
   962                           
   963                           ; BSR set to: 0
   964                           ;DigitalClock.c: 186: else if((c=='w') &&(start_recieved==1)){
   965                           
   966                           ; BSR set to: 0
   967  0011CC  0E77               	movlw	119
   968  0011CE  19B8               	xorwf	main@c& (0+255),w,b
   969  0011D0  A4D8               	btfss	status,2,c
   970  0011D2  D008               	goto	l139
   971                           
   972                           ; BSR set to: 0
   973  0011D4  05C4               	decf	_start_recieved& (0+255),w,b
   974  0011D6  A4D8               	btfss	status,2,c
   975  0011D8  D005               	goto	l139
   976                           
   977                           ; BSR set to: 0
   978                           ;DigitalClock.c: 187: start_recieved=2;
   979  0011DA  0E02               	movlw	2
   980  0011DC  6FC4               	movwf	_start_recieved& (0+255),b
   981                           
   982                           ;DigitalClock.c: 188: small_w_flag=1;
   983  0011DE  0E01               	movlw	1
   984  0011E0  6FBF               	movwf	_small_w_flag& (0+255),b
   985                           
   986                           ;DigitalClock.c: 189: }
   987  0011E2  D761               	goto	l121
   988  0011E4                     l139:
   989                           
   990                           ; BSR set to: 0
   991                           ;DigitalClock.c: 190: else if((c=='W') &&(start_recieved==1)){
   992                           
   993                           ; BSR set to: 0
   994  0011E4  0E57               	movlw	87
   995  0011E6  19B8               	xorwf	main@c& (0+255),w,b
   996  0011E8  A4D8               	btfss	status,2,c
   997  0011EA  D008               	goto	l141
   998                           
   999                           ; BSR set to: 0
  1000  0011EC  05C4               	decf	_start_recieved& (0+255),w,b
  1001  0011EE  A4D8               	btfss	status,2,c
  1002  0011F0  D005               	goto	l141
  1003                           
  1004                           ; BSR set to: 0
  1005                           ;DigitalClock.c: 191: start_recieved=2;
  1006  0011F2  0E02               	movlw	2
  1007  0011F4  6FC4               	movwf	_start_recieved& (0+255),b
  1008                           
  1009                           ;DigitalClock.c: 192: capital_w_flag=1;
  1010  0011F6  0E01               	movlw	1
  1011  0011F8  6FC0               	movwf	_capital_w_flag& (0+255),b
  1012                           
  1013                           ;DigitalClock.c: 193: }
  1014  0011FA  D755               	goto	l121
  1015  0011FC                     l141:
  1016                           
  1017                           ; BSR set to: 0
  1018                           ;DigitalClock.c: 194: else if((c=='h') &&(start_recieved==2)){
  1019                           
  1020                           ; BSR set to: 0
  1021  0011FC  0E68               	movlw	104
  1022  0011FE  19B8               	xorwf	main@c& (0+255),w,b
  1023  001200  A4D8               	btfss	status,2,c
  1024  001202  D009               	goto	l143
  1025                           
  1026                           ; BSR set to: 0
  1027  001204  0E02               	movlw	2
  1028  001206  19C4               	xorwf	_start_recieved& (0+255),w,b
  1029  001208  A4D8               	btfss	status,2,c
  1030  00120A  D005               	goto	l143
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;DigitalClock.c: 195: start_recieved=3;
  1034  00120C  0E03               	movlw	3
  1035  00120E  6FC4               	movwf	_start_recieved& (0+255),b
  1036                           
  1037                           ;DigitalClock.c: 196: h_flag=1;
  1038  001210  0E01               	movlw	1
  1039  001212  6FBD               	movwf	_h_flag& (0+255),b
  1040                           
  1041                           ;DigitalClock.c: 197: }
  1042  001214  D748               	goto	l121
  1043  001216                     l143:
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;DigitalClock.c: 198: else if((c=='m') &&(start_recieved==2)){
  1047                           
  1048                           ; BSR set to: 0
  1049  001216  0E6D               	movlw	109
  1050  001218  19B8               	xorwf	main@c& (0+255),w,b
  1051  00121A  A4D8               	btfss	status,2,c
  1052  00121C  D009               	goto	l145
  1053                           
  1054                           ; BSR set to: 0
  1055  00121E  0E02               	movlw	2
  1056  001220  19C4               	xorwf	_start_recieved& (0+255),w,b
  1057  001222  A4D8               	btfss	status,2,c
  1058  001224  D005               	goto	l145
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;DigitalClock.c: 199: start_recieved=3;
  1062  001226  0E03               	movlw	3
  1063  001228  6FC4               	movwf	_start_recieved& (0+255),b
  1064                           
  1065                           ;DigitalClock.c: 200: m_flag=1;
  1066  00122A  0E01               	movlw	1
  1067  00122C  6FBC               	movwf	_m_flag& (0+255),b
  1068                           
  1069                           ;DigitalClock.c: 201: }
  1070  00122E  D73B               	goto	l121
  1071  001230                     l145:
  1072                           
  1073                           ; BSR set to: 0
  1074                           ;DigitalClock.c: 202: else if((c=='s') &&(start_recieved==2)){
  1075                           
  1076                           ; BSR set to: 0
  1077  001230  0E73               	movlw	115
  1078  001232  19B8               	xorwf	main@c& (0+255),w,b
  1079  001234  A4D8               	btfss	status,2,c
  1080  001236  D009               	goto	l147
  1081                           
  1082                           ; BSR set to: 0
  1083  001238  0E02               	movlw	2
  1084  00123A  19C4               	xorwf	_start_recieved& (0+255),w,b
  1085  00123C  A4D8               	btfss	status,2,c
  1086  00123E  D005               	goto	l147
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;DigitalClock.c: 203: start_recieved=3;
  1090  001240  0E03               	movlw	3
  1091  001242  6FC4               	movwf	_start_recieved& (0+255),b
  1092                           
  1093                           ;DigitalClock.c: 204: s_flag=1;
  1094  001244  0E01               	movlw	1
  1095  001246  6FBB               	movwf	_s_flag& (0+255),b
  1096                           
  1097                           ;DigitalClock.c: 205: }
  1098  001248  D72E               	goto	l121
  1099  00124A                     l147:
  1100                           
  1101                           ; BSR set to: 0
  1102                           ;DigitalClock.c: 206: else if((c=='a') &&(start_recieved==2)){
  1103                           
  1104                           ; BSR set to: 0
  1105  00124A  0E61               	movlw	97
  1106  00124C  19B8               	xorwf	main@c& (0+255),w,b
  1107  00124E  A4D8               	btfss	status,2,c
  1108  001250  D009               	goto	l149
  1109                           
  1110                           ; BSR set to: 0
  1111  001252  0E02               	movlw	2
  1112  001254  19C4               	xorwf	_start_recieved& (0+255),w,b
  1113  001256  A4D8               	btfss	status,2,c
  1114  001258  D005               	goto	l149
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;DigitalClock.c: 207: start_recieved=3;
  1118  00125A  0E03               	movlw	3
  1119  00125C  6FC4               	movwf	_start_recieved& (0+255),b
  1120                           
  1121                           ;DigitalClock.c: 208: a_flag=1;
  1122  00125E  0E01               	movlw	1
  1123  001260  6FBA               	movwf	_a_flag& (0+255),b
  1124                           
  1125                           ;DigitalClock.c: 209: }
  1126  001262  D721               	goto	l121
  1127  001264                     l149:
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;DigitalClock.c: 211: else if(isDigit(c)&&start_recieved==3){
  1131                           
  1132                           ; BSR set to: 0
  1133  001264  51B8               	movf	main@c& (0+255),w,b
  1134  001266  EC59  F00E         	call	_isDigit
  1135  00126A  5028               	movf	?_isDigit,w,c
  1136  00126C  1029               	iorwf	?_isDigit+1,w,c
  1137  00126E  B4D8               	btfsc	status,2,c
  1138  001270  D009               	goto	l151
  1139  001272  0E03               	movlw	3
  1140  001274  0100               	movlb	0	; () banked
  1141  001276  19C4               	xorwf	_start_recieved& (0+255),w,b
  1142  001278  A4D8               	btfss	status,2,c
  1143  00127A  D004               	goto	l151
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;DigitalClock.c: 212: first_digit=c;
  1147  00127C  C0B8  F0BE         	movff	main@c,_first_digit
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;DigitalClock.c: 213: start_recieved=4;
  1151  001280  0E04               	movlw	4
  1152  001282  D0E0               	goto	L4
  1153  001284                     l151:
  1154                           
  1155                           ;DigitalClock.c: 217: else if(isDigit(c)&&start_recieved==4){
  1156                           
  1157                           ; BSR set to: 0
  1158  001284  0100               	movlb	0	; () banked
  1159  001286  51B8               	movf	main@c& (0+255),w,b
  1160  001288  EC59  F00E         	call	_isDigit
  1161  00128C  5028               	movf	?_isDigit,w,c
  1162  00128E  1029               	iorwf	?_isDigit+1,w,c
  1163  001290  B4D8               	btfsc	status,2,c
  1164  001292  D0CE               	goto	l153
  1165  001294  0E04               	movlw	4
  1166  001296  0100               	movlb	0	; () banked
  1167  001298  19C4               	xorwf	_start_recieved& (0+255),w,b
  1168  00129A  A4D8               	btfss	status,2,c
  1169  00129C  D0C9               	goto	l153
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;DigitalClock.c: 218: start_recieved=5;
  1173  00129E  0E05               	movlw	5
  1174  0012A0  6FC4               	movwf	_start_recieved& (0+255),b
  1175                           
  1176                           ; BSR set to: 0
  1177                           ;DigitalClock.c: 219: if(small_w_flag==1 &&h_flag==1){
  1178  0012A2  05BF               	decf	_small_w_flag& (0+255),w,b
  1179  0012A4  A4D8               	btfss	status,2,c
  1180  0012A6  D015               	goto	l154
  1181                           
  1182                           ; BSR set to: 0
  1183  0012A8  05BD               	decf	_h_flag& (0+255),w,b
  1184  0012AA  A4D8               	btfss	status,2,c
  1185  0012AC  D012               	goto	l154
  1186                           
  1187                           ; BSR set to: 0
  1188                           ;DigitalClock.c: 220: small_w_flag=0;
  1189  0012AE  0E00               	movlw	0
  1190  0012B0  6FBF               	movwf	_small_w_flag& (0+255),b
  1191                           
  1192                           ;DigitalClock.c: 221: h_flag=0;
  1193  0012B2  0E00               	movlw	0
  1194  0012B4  6FBD               	movwf	_h_flag& (0+255),b
  1195                           
  1196                           ; BSR set to: 0
  1197                           ;DigitalClock.c: 222: if(first_digit<='1'&&c<='2')
  1198  0012B6  0E32               	movlw	50
  1199  0012B8  61BE               	cpfslt	_first_digit& (0+255),b
  1200  0012BA  D6F5               	goto	l121
  1201                           
  1202                           ; BSR set to: 0
  1203  0012BC  0E33               	movlw	51
  1204  0012BE  61B8               	cpfslt	main@c& (0+255),b
  1205  0012C0  D6F2               	goto	l121
  1206                           
  1207                           ; BSR set to: 0
  1208                           ;DigitalClock.c: 223: hours = (first_digit - '0') * 10 + (c - '0');
  1209  0012C2  51BE               	movf	_first_digit& (0+255),w,b
  1210  0012C4  0FD0               	addlw	208
  1211  0012C6  0D0A               	mullw	10
  1212  0012C8  50F3               	movf	prodl,w,c
  1213  0012CA  25B8               	addwf	main@c& (0+255),w,b
  1214  0012CC  0FD0               	addlw	208
  1215  0012CE  6FCB               	movwf	_hours& (0+255),b
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;DigitalClock.c: 224: }
  1219  0012D0  D6EA               	goto	l121
  1220  0012D2                     l154:
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;DigitalClock.c: 225: else if(small_w_flag==1 &&m_flag==1){
  1224                           
  1225                           ; BSR set to: 0
  1226  0012D2  05BF               	decf	_small_w_flag& (0+255),w,b
  1227  0012D4  A4D8               	btfss	status,2,c
  1228  0012D6  D015               	goto	l157
  1229                           
  1230                           ; BSR set to: 0
  1231  0012D8  05BC               	decf	_m_flag& (0+255),w,b
  1232  0012DA  A4D8               	btfss	status,2,c
  1233  0012DC  D012               	goto	l157
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;DigitalClock.c: 226: small_w_flag=0;
  1237  0012DE  0E00               	movlw	0
  1238  0012E0  6FBF               	movwf	_small_w_flag& (0+255),b
  1239                           
  1240                           ;DigitalClock.c: 227: m_flag=0;
  1241  0012E2  0E00               	movlw	0
  1242  0012E4  6FBC               	movwf	_m_flag& (0+255),b
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;DigitalClock.c: 228: if(first_digit<='5'&&c<='9')
  1246  0012E6  0E36               	movlw	54
  1247  0012E8  61BE               	cpfslt	_first_digit& (0+255),b
  1248  0012EA  D6DD               	goto	l121
  1249                           
  1250                           ; BSR set to: 0
  1251  0012EC  0E3A               	movlw	58
  1252  0012EE  61B8               	cpfslt	main@c& (0+255),b
  1253  0012F0  D6DA               	goto	l121
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;DigitalClock.c: 229: minutes = (first_digit - '0') * 10 + (c - '0');
  1257  0012F2  51BE               	movf	_first_digit& (0+255),w,b
  1258  0012F4  0FD0               	addlw	208
  1259  0012F6  0D0A               	mullw	10
  1260  0012F8  50F3               	movf	prodl,w,c
  1261  0012FA  25B8               	addwf	main@c& (0+255),w,b
  1262  0012FC  0FD0               	addlw	208
  1263  0012FE  6FCA               	movwf	_minutes& (0+255),b
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;DigitalClock.c: 230: }
  1267  001300  D6D2               	goto	l121
  1268  001302                     l157:
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;DigitalClock.c: 231: else if(small_w_flag==1 &&s_flag==1){
  1272                           
  1273                           ; BSR set to: 0
  1274  001302  05BF               	decf	_small_w_flag& (0+255),w,b
  1275  001304  A4D8               	btfss	status,2,c
  1276  001306  D015               	goto	l160
  1277                           
  1278                           ; BSR set to: 0
  1279  001308  05BB               	decf	_s_flag& (0+255),w,b
  1280  00130A  A4D8               	btfss	status,2,c
  1281  00130C  D012               	goto	l160
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;DigitalClock.c: 232: small_w_flag=0;
  1285  00130E  0E00               	movlw	0
  1286  001310  6FBF               	movwf	_small_w_flag& (0+255),b
  1287                           
  1288                           ;DigitalClock.c: 233: s_flag=0;
  1289  001312  0E00               	movlw	0
  1290  001314  6FBB               	movwf	_s_flag& (0+255),b
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;DigitalClock.c: 234: if(first_digit<='5'&&c<='9')
  1294  001316  0E36               	movlw	54
  1295  001318  61BE               	cpfslt	_first_digit& (0+255),b
  1296  00131A  D6C5               	goto	l121
  1297                           
  1298                           ; BSR set to: 0
  1299  00131C  0E3A               	movlw	58
  1300  00131E  61B8               	cpfslt	main@c& (0+255),b
  1301  001320  D6C2               	goto	l121
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;DigitalClock.c: 235: seconds = (first_digit - '0') * 10 + (c - '0');
  1305  001322  51BE               	movf	_first_digit& (0+255),w,b
  1306  001324  0FD0               	addlw	208
  1307  001326  0D0A               	mullw	10
  1308  001328  50F3               	movf	prodl,w,c
  1309  00132A  25B8               	addwf	main@c& (0+255),w,b
  1310  00132C  0FD0               	addlw	208
  1311  00132E  6FC9               	movwf	_seconds& (0+255),b
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;DigitalClock.c: 236: }
  1315  001330  D6BA               	goto	l121
  1316  001332                     l160:
  1317                           
  1318                           ; BSR set to: 0
  1319                           ;DigitalClock.c: 237: else if(capital_w_flag==1 &&h_flag==1){
  1320                           
  1321                           ; BSR set to: 0
  1322  001332  05C0               	decf	_capital_w_flag& (0+255),w,b
  1323  001334  A4D8               	btfss	status,2,c
  1324  001336  D015               	goto	l163
  1325                           
  1326                           ; BSR set to: 0
  1327  001338  05BD               	decf	_h_flag& (0+255),w,b
  1328  00133A  A4D8               	btfss	status,2,c
  1329  00133C  D012               	goto	l163
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;DigitalClock.c: 238: capital_w_flag=0;
  1333  00133E  0E00               	movlw	0
  1334  001340  6FC0               	movwf	_capital_w_flag& (0+255),b
  1335                           
  1336                           ;DigitalClock.c: 239: h_flag=0;
  1337  001342  0E00               	movlw	0
  1338  001344  6FBD               	movwf	_h_flag& (0+255),b
  1339                           
  1340                           ; BSR set to: 0
  1341                           ;DigitalClock.c: 240: if(first_digit<='1'&&c<='2')
  1342  001346  0E32               	movlw	50
  1343  001348  61BE               	cpfslt	_first_digit& (0+255),b
  1344  00134A  D6AD               	goto	l121
  1345                           
  1346                           ; BSR set to: 0
  1347  00134C  0E33               	movlw	51
  1348  00134E  61B8               	cpfslt	main@c& (0+255),b
  1349  001350  D6AA               	goto	l121
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;DigitalClock.c: 241: alarm_hours = (first_digit - '0') * 10 + (c - '0');
  1353  001352  51BE               	movf	_first_digit& (0+255),w,b
  1354  001354  0FD0               	addlw	208
  1355  001356  0D0A               	mullw	10
  1356  001358  50F3               	movf	prodl,w,c
  1357  00135A  25B8               	addwf	main@c& (0+255),w,b
  1358  00135C  0FD0               	addlw	208
  1359  00135E  6FC8               	movwf	_alarm_hours& (0+255),b
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;DigitalClock.c: 242: }
  1363  001360  D6A2               	goto	l121
  1364  001362                     l163:
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;DigitalClock.c: 243: else if(capital_w_flag==1 &&m_flag==1){
  1368                           
  1369                           ; BSR set to: 0
  1370  001362  05C0               	decf	_capital_w_flag& (0+255),w,b
  1371  001364  A4D8               	btfss	status,2,c
  1372  001366  D015               	goto	l166
  1373                           
  1374                           ; BSR set to: 0
  1375  001368  05BC               	decf	_m_flag& (0+255),w,b
  1376  00136A  A4D8               	btfss	status,2,c
  1377  00136C  D012               	goto	l166
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;DigitalClock.c: 244: capital_w_flag=0;
  1381  00136E  0E00               	movlw	0
  1382  001370  6FC0               	movwf	_capital_w_flag& (0+255),b
  1383                           
  1384                           ;DigitalClock.c: 245: m_flag=0;
  1385  001372  0E00               	movlw	0
  1386  001374  6FBC               	movwf	_m_flag& (0+255),b
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;DigitalClock.c: 246: if(first_digit<='5'&&c<='9')
  1390  001376  0E36               	movlw	54
  1391  001378  61BE               	cpfslt	_first_digit& (0+255),b
  1392  00137A  D695               	goto	l121
  1393                           
  1394                           ; BSR set to: 0
  1395  00137C  0E3A               	movlw	58
  1396  00137E  61B8               	cpfslt	main@c& (0+255),b
  1397  001380  D692               	goto	l121
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;DigitalClock.c: 247: alarm_minutes = (first_digit - '0') * 10 + (c - '0');
  1401  001382  51BE               	movf	_first_digit& (0+255),w,b
  1402  001384  0FD0               	addlw	208
  1403  001386  0D0A               	mullw	10
  1404  001388  50F3               	movf	prodl,w,c
  1405  00138A  25B8               	addwf	main@c& (0+255),w,b
  1406  00138C  0FD0               	addlw	208
  1407  00138E  6FC7               	movwf	_alarm_minutes& (0+255),b
  1408                           
  1409                           ; BSR set to: 0
  1410                           ;DigitalClock.c: 248: }
  1411  001390  D68A               	goto	l121
  1412  001392                     l166:
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;DigitalClock.c: 249: else if(capital_w_flag==1 && s_flag==1){
  1416                           
  1417                           ; BSR set to: 0
  1418  001392  05C0               	decf	_capital_w_flag& (0+255),w,b
  1419  001394  A4D8               	btfss	status,2,c
  1420  001396  D015               	goto	l169
  1421                           
  1422                           ; BSR set to: 0
  1423  001398  05BB               	decf	_s_flag& (0+255),w,b
  1424  00139A  A4D8               	btfss	status,2,c
  1425  00139C  D012               	goto	l169
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;DigitalClock.c: 250: capital_w_flag=0;
  1429  00139E  0E00               	movlw	0
  1430  0013A0  6FC0               	movwf	_capital_w_flag& (0+255),b
  1431                           
  1432                           ;DigitalClock.c: 251: s_flag=0;
  1433  0013A2  0E00               	movlw	0
  1434  0013A4  6FBB               	movwf	_s_flag& (0+255),b
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;DigitalClock.c: 252: if(first_digit<='5'&&c<='9')
  1438  0013A6  0E36               	movlw	54
  1439  0013A8  61BE               	cpfslt	_first_digit& (0+255),b
  1440  0013AA  D67D               	goto	l121
  1441                           
  1442                           ; BSR set to: 0
  1443  0013AC  0E3A               	movlw	58
  1444  0013AE  61B8               	cpfslt	main@c& (0+255),b
  1445  0013B0  D67A               	goto	l121
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;DigitalClock.c: 253: alarm_seconds = (first_digit - '0') * 10 + (c - '0');
  1449  0013B2  51BE               	movf	_first_digit& (0+255),w,b
  1450  0013B4  0FD0               	addlw	208
  1451  0013B6  0D0A               	mullw	10
  1452  0013B8  50F3               	movf	prodl,w,c
  1453  0013BA  25B8               	addwf	main@c& (0+255),w,b
  1454  0013BC  0FD0               	addlw	208
  1455  0013BE  6FC6               	movwf	_alarm_seconds& (0+255),b
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;DigitalClock.c: 254: }
  1459  0013C0  D672               	goto	l121
  1460  0013C2                     l169:
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;DigitalClock.c: 255: else if(capital_w_flag==1 && a_flag==1){
  1464                           
  1465                           ; BSR set to: 0
  1466  0013C2  05C0               	decf	_capital_w_flag& (0+255),w,b
  1467  0013C4  A4D8               	btfss	status,2,c
  1468  0013C6  D66F               	goto	l121
  1469                           
  1470                           ; BSR set to: 0
  1471  0013C8  05BA               	decf	_a_flag& (0+255),w,b
  1472  0013CA  A4D8               	btfss	status,2,c
  1473  0013CC  D66C               	goto	l121
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;DigitalClock.c: 256: capital_w_flag=0;
  1477  0013CE  0E00               	movlw	0
  1478  0013D0  6FC0               	movwf	_capital_w_flag& (0+255),b
  1479                           
  1480                           ;DigitalClock.c: 257: a_flag=0;
  1481  0013D2  0E00               	movlw	0
  1482  0013D4  6FBA               	movwf	_a_flag& (0+255),b
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;DigitalClock.c: 258: if(first_digit=='0'&& c=='0'){
  1486  0013D6  0E30               	movlw	48
  1487  0013D8  19BE               	xorwf	_first_digit& (0+255),w,b
  1488  0013DA  A4D8               	btfss	status,2,c
  1489  0013DC  D016               	goto	l173
  1490                           
  1491                           ; BSR set to: 0
  1492  0013DE  0E30               	movlw	48
  1493  0013E0  19B8               	xorwf	main@c& (0+255),w,b
  1494  0013E2  A4D8               	btfss	status,2,c
  1495  0013E4  D012               	goto	l173
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;DigitalClock.c: 260: if(alarm_enabled==1){
  1499  0013E6  05C5               	decf	_alarm_enabled& (0+255),w,b	;volatile
  1500  0013E8  A4D8               	btfss	status,2,c
  1501  0013EA  D65D               	goto	l121
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;DigitalClock.c: 262: disableInterrupts();
  1505  0013EC  ECB7  F00E         	call	_disableInterrupts	;wreg free
  1506                           
  1507                           ;DigitalClock.c: 263: alarm_enabled = !alarm_enabled;
  1508  0013F0  0100               	movlb	0	; () banked
  1509  0013F2  51C5               	movf	_alarm_enabled& (0+255),w,b	;volatile
  1510  0013F4  A4D8               	btfss	status,2,c
  1511  0013F6  D002               	goto	u2250
  1512  0013F8  0E01               	movlw	1
  1513  0013FA  D001               	goto	u2260
  1514  0013FC                     u2250:
  1515  0013FC  0E00               	movlw	0
  1516  0013FE                     u2260:
  1517  0013FE  6FC5               	movwf	_alarm_enabled& (0+255),b	;volatile
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;DigitalClock.c: 264: toggle_alarm_flag = 0;
  1521  001400  0E00               	movlw	0
  1522  001402  6FB9               	movwf	_toggle_alarm_flag& (0+255),b	;volatile
  1523                           
  1524                           ;DigitalClock.c: 265: enableInterrupts();
  1525  001404  ECB4  F00E         	call	_enableInterrupts	;wreg free
  1526                           
  1527                           ;DigitalClock.c: 266: }
  1528                           ;DigitalClock.c: 268: }
  1529  001408  D64E               	goto	l121
  1530  00140A                     l173:
  1531                           
  1532                           ;DigitalClock.c: 270: else {
  1533                           ;DigitalClock.c: 271: if(alarm_enabled==0){
  1534  00140A  0100               	movlb	0	; () banked
  1535  00140C  51C5               	movf	_alarm_enabled& (0+255),w,b	;volatile
  1536  00140E  A4D8               	btfss	status,2,c
  1537  001410  D64A               	goto	l121
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;DigitalClock.c: 273: disableInterrupts();
  1541  001412  ECB7  F00E         	call	_disableInterrupts	;wreg free
  1542                           
  1543                           ;DigitalClock.c: 274: alarm_enabled = !alarm_enabled;
  1544  001416  0100               	movlb	0	; () banked
  1545  001418  51C5               	movf	_alarm_enabled& (0+255),w,b	;volatile
  1546  00141A  A4D8               	btfss	status,2,c
  1547  00141C  D002               	goto	u2280
  1548  00141E  0E01               	movlw	1
  1549  001420  D001               	goto	u2290
  1550  001422                     u2280:
  1551  001422  0E00               	movlw	0
  1552  001424                     u2290:
  1553  001424  6FC5               	movwf	_alarm_enabled& (0+255),b	;volatile
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;DigitalClock.c: 275: toggle_alarm_flag = 0;
  1557  001426  0E00               	movlw	0
  1558  001428  6FB9               	movwf	_toggle_alarm_flag& (0+255),b	;volatile
  1559                           
  1560                           ;DigitalClock.c: 276: enableInterrupts();
  1561  00142A  ECB4  F00E         	call	_enableInterrupts	;wreg free
  1562                           
  1563                           ;DigitalClock.c: 277: }
  1564                           ;DigitalClock.c: 279: }
  1565                           ;DigitalClock.c: 286: }
  1566                           ;DigitalClock.c: 288: }
  1567  00142E  D63B               	goto	l121
  1568  001430                     l153:
  1569                           
  1570                           ;DigitalClock.c: 289: else if ((c==']')&& (start_recieved==5)){
  1571  001430  0E5D               	movlw	93
  1572  001432  0100               	movlb	0	; () banked
  1573  001434  19B8               	xorwf	main@c& (0+255),w,b
  1574  001436  A4D8               	btfss	status,2,c
  1575  001438  D636               	goto	l121
  1576                           
  1577                           ; BSR set to: 0
  1578  00143A  0E05               	movlw	5
  1579  00143C  19C4               	xorwf	_start_recieved& (0+255),w,b
  1580  00143E  A4D8               	btfss	status,2,c
  1581  001440  D632               	goto	l121
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;DigitalClock.c: 290: start_recieved=0;
  1585  001442  0E00               	movlw	0
  1586  001444                     L4:
  1587  001444  6FC4               	movwf	_start_recieved& (0+255),b
  1588                           
  1589                           ; BSR set to: 0
  1590                           
  1591                           ; BSR set to: 0
  1592                           
  1593                           ; BSR set to: 0
  1594                           
  1595                           ; BSR set to: 0
  1596                           
  1597                           ; BSR set to: 0
  1598                           
  1599                           ; BSR set to: 0
  1600                           
  1601                           ; BSR set to: 0
  1602                           
  1603                           ; BSR set to: 0
  1604                           
  1605                           ; BSR set to: 0
  1606                           
  1607                           ; BSR set to: 0
  1608                           
  1609                           ; BSR set to: 0
  1610                           
  1611                           ; BSR set to: 0
  1612                           
  1613                           ; BSR set to: 0
  1614                           
  1615                           ; BSR set to: 0
  1616                           
  1617                           ; BSR set to: 0
  1618  001446  D62F               	goto	l121
  1619  001448                     __end_of_main:
  1620                           	opt stack 0
  1621                           tblptru	equ	0xFF8
  1622                           tblptrh	equ	0xFF7
  1623                           tblptrl	equ	0xFF6
  1624                           tablat	equ	0xFF5
  1625                           prodl	equ	0xFF3
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           postdec1	equ	0xFE5
  1629                           fsr1l	equ	0xFE1
  1630                           status	equ	0xFD8
  1631                           
  1632 ;; *************** function _updateClockDisplay *****************
  1633 ;; Defined at:
  1634 ;;		line 374 in file "DigitalClock.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;		None
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;  Buffer         32    0[BANK0 ] unsigned char [32]
  1639 ;; Return value:  Size  Location     Type
  1640 ;;                  1    wreg      void 
  1641 ;; Registers used:
  1642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1643 ;; Tracked objects:
  1644 ;;		On entry : 0/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1651 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1652 ;;Total ram usage:       32 bytes
  1653 ;; Hardware stack levels used:    1
  1654 ;; Hardware stack levels required when called:    9
  1655 ;; This function calls:
  1656 ;;		_lcd_gotoxy
  1657 ;;		_lcd_puts
  1658 ;;		_sprintf
  1659 ;; This function is called by:
  1660 ;;		_main
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text1
  1665  001AC6                     __ptext1:
  1666                           	opt stack 0
  1667  001AC6                     _updateClockDisplay:
  1668                           	opt stack 21
  1669                           
  1670                           ;DigitalClock.c: 375: char Buffer[32];
  1671                           ;DigitalClock.c: 376: lcd_gotoxy(1, 1);
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;incstack = 0
  1675  001AC6  0E01               	movlw	1
  1676  001AC8  6E32               	movwf	lcd_gotoxy@y,c
  1677  001ACA  0E01               	movlw	1
  1678  001ACC  EC42  F00D         	call	_lcd_gotoxy
  1679                           
  1680                           ;DigitalClock.c: 377: sprintf(Buffer, "Time: %02u:%02u:%02u", hours, minutes, seconds);
  1681  001AD0  0E80               	movlw	low updateClockDisplay@Buffer
  1682  001AD2  6E34               	movwf	sprintf@sp,c
  1683  001AD4  0E00               	movlw	high updateClockDisplay@Buffer
  1684  001AD6  6E35               	movwf	sprintf@sp+1,c
  1685  001AD8  0E21               	movlw	low STR_7
  1686  001ADA  6E36               	movwf	sprintf@f,c
  1687  001ADC  0E10               	movlw	high STR_7
  1688  001ADE  6E37               	movwf	sprintf@f+1,c
  1689  001AE0  C0CB  F038         	movff	_hours,?_sprintf+4
  1690  001AE4  6A39               	clrf	?_sprintf+5,c
  1691  001AE6  C0CA  F03A         	movff	_minutes,?_sprintf+6
  1692  001AEA  6A3B               	clrf	?_sprintf+7,c
  1693  001AEC  C0C9  F03C         	movff	_seconds,?_sprintf+8
  1694  001AF0  6A3D               	clrf	?_sprintf+9,c
  1695  001AF2  EC24  F00A         	call	_sprintf	;wreg free
  1696                           
  1697                           ;DigitalClock.c: 378: lcd_puts(Buffer);
  1698  001AF6  0E80               	movlw	low updateClockDisplay@Buffer
  1699  001AF8  6E36               	movwf	lcd_puts@s,c
  1700  001AFA  0E00               	movlw	high updateClockDisplay@Buffer
  1701  001AFC  6E37               	movwf	lcd_puts@s+1,c
  1702  001AFE  EC7E  F00C         	call	_lcd_puts	;wreg free
  1703  001B02  0012               	return		;funcret
  1704  001B04                     __end_of_updateClockDisplay:
  1705                           	opt stack 0
  1706                           tblptru	equ	0xFF8
  1707                           tblptrh	equ	0xFF7
  1708                           tblptrl	equ	0xFF6
  1709                           tablat	equ	0xFF5
  1710                           prodl	equ	0xFF3
  1711                           postinc0	equ	0xFEE
  1712                           wreg	equ	0xFE8
  1713                           postdec1	equ	0xFE5
  1714                           fsr1l	equ	0xFE1
  1715                           status	equ	0xFD8
  1716                           
  1717 ;; *************** function _updateAlarmStateDisplay *****************
  1718 ;; Defined at:
  1719 ;;		line 380 in file "DigitalClock.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;		None
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;		None
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  1    wreg      void 
  1726 ;; Registers used:
  1727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1736 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1737 ;;Total ram usage:        2 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    9
  1740 ;; This function calls:
  1741 ;;		_lcd_gotoxy
  1742 ;;		_lcd_puts
  1743 ;; This function is called by:
  1744 ;;		_main
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           	psect	text2
  1749  001B42                     __ptext2:
  1750                           	opt stack 0
  1751  001B42                     _updateAlarmStateDisplay:
  1752                           	opt stack 21
  1753                           
  1754                           ;DigitalClock.c: 381: lcd_gotoxy(1, 3);
  1755                           
  1756                           ;incstack = 0
  1757  001B42  0E03               	movlw	3
  1758  001B44  6E32               	movwf	lcd_gotoxy@y,c
  1759  001B46  0E01               	movlw	1
  1760  001B48  EC42  F00D         	call	_lcd_gotoxy
  1761                           
  1762                           ;DigitalClock.c: 382: lcd_puts("Alarm State: ");
  1763  001B4C  0E59               	movlw	low STR_8
  1764  001B4E  6E36               	movwf	lcd_puts@s,c
  1765  001B50  0E10               	movlw	high STR_8
  1766  001B52  6E37               	movwf	lcd_puts@s+1,c
  1767  001B54  EC7E  F00C         	call	_lcd_puts	;wreg free
  1768                           
  1769                           ;DigitalClock.c: 383: lcd_puts(alarm_enabled?"ON ":"OFF");
  1770  001B58  0100               	movlb	0	; () banked
  1771  001B5A  51C5               	movf	_alarm_enabled& (0+255),w,b	;volatile
  1772  001B5C  A4D8               	btfss	status,2,c
  1773  001B5E  D004               	goto	l203
  1774                           
  1775                           ; BSR set to: 0
  1776  001B60  0E79               	movlw	low STR_5
  1777  001B62  6E38               	movwf	_updateAlarmStateDisplay$648,c
  1778  001B64  0E10               	movlw	high STR_5
  1779  001B66  D003               	goto	L6
  1780  001B68                     l203:
  1781                           
  1782                           ; BSR set to: 0
  1783                           
  1784                           ; BSR set to: 0
  1785  001B68  0E75               	movlw	low STR_9
  1786  001B6A  6E38               	movwf	_updateAlarmStateDisplay$648,c
  1787  001B6C  0E10               	movlw	high STR_9
  1788  001B6E                     L6:
  1789  001B6E  6E39               	movwf	_updateAlarmStateDisplay$648+1,c
  1790                           
  1791                           ; BSR set to: 0
  1792                           
  1793                           ; BSR set to: 0
  1794  001B70  C038  F036         	movff	_updateAlarmStateDisplay$648,lcd_puts@s
  1795  001B74  C039  F037         	movff	_updateAlarmStateDisplay$648+1,lcd_puts@s+1
  1796  001B78  EC7E  F00C         	call	_lcd_puts	;wreg free
  1797  001B7C  0012               	return		;funcret
  1798  001B7E                     __end_of_updateAlarmStateDisplay:
  1799                           	opt stack 0
  1800                           tblptru	equ	0xFF8
  1801                           tblptrh	equ	0xFF7
  1802                           tblptrl	equ	0xFF6
  1803                           tablat	equ	0xFF5
  1804                           prodl	equ	0xFF3
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           postdec1	equ	0xFE5
  1808                           fsr1l	equ	0xFE1
  1809                           status	equ	0xFD8
  1810                           
  1811 ;; *************** function _updateAlarmDisplay *****************
  1812 ;; Defined at:
  1813 ;;		line 315 in file "DigitalClock.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;		None
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;  alarm_string   17    0[BANK0 ] unsigned char [17]
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      void 
  1820 ;; Registers used:
  1821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;Total ram usage:       17 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    9
  1834 ;; This function calls:
  1835 ;;		_lcd_gotoxy
  1836 ;;		_lcd_puts
  1837 ;;		_sprintf
  1838 ;; This function is called by:
  1839 ;;		_main
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text3
  1844  001B04                     __ptext3:
  1845                           	opt stack 0
  1846  001B04                     _updateAlarmDisplay:
  1847                           	opt stack 21
  1848                           
  1849                           ;DigitalClock.c: 316: char alarm_string[17];
  1850                           ;DigitalClock.c: 317: sprintf(alarm_string, "Alarm: %02u:%02u:%02u", alarm_hours, alarm_
      +                          minutes, alarm_seconds);
  1851                           
  1852                           ;incstack = 0
  1853  001B04  0E80               	movlw	low updateAlarmDisplay@alarm_string
  1854  001B06  6E34               	movwf	sprintf@sp,c
  1855  001B08  0E00               	movlw	high updateAlarmDisplay@alarm_string
  1856  001B0A  6E35               	movwf	sprintf@sp+1,c
  1857  001B0C  0E0B               	movlw	low STR_6
  1858  001B0E  6E36               	movwf	sprintf@f,c
  1859  001B10  0E10               	movlw	high STR_6
  1860  001B12  6E37               	movwf	sprintf@f+1,c
  1861  001B14  C0C8  F038         	movff	_alarm_hours,?_sprintf+4
  1862  001B18  6A39               	clrf	?_sprintf+5,c
  1863  001B1A  C0C7  F03A         	movff	_alarm_minutes,?_sprintf+6
  1864  001B1E  6A3B               	clrf	?_sprintf+7,c
  1865  001B20  C0C6  F03C         	movff	_alarm_seconds,?_sprintf+8
  1866  001B24  6A3D               	clrf	?_sprintf+9,c
  1867  001B26  EC24  F00A         	call	_sprintf	;wreg free
  1868                           
  1869                           ;DigitalClock.c: 319: lcd_gotoxy(1, 2);
  1870  001B2A  0E02               	movlw	2
  1871  001B2C  6E32               	movwf	lcd_gotoxy@y,c
  1872  001B2E  0E01               	movlw	1
  1873  001B30  EC42  F00D         	call	_lcd_gotoxy
  1874                           
  1875                           ;DigitalClock.c: 320: lcd_puts(alarm_string);
  1876  001B34  0E80               	movlw	low updateAlarmDisplay@alarm_string
  1877  001B36  6E36               	movwf	lcd_puts@s,c
  1878  001B38  0E00               	movlw	high updateAlarmDisplay@alarm_string
  1879  001B3A  6E37               	movwf	lcd_puts@s+1,c
  1880  001B3C  EC7E  F00C         	call	_lcd_puts	;wreg free
  1881  001B40  0012               	return		;funcret
  1882  001B42                     __end_of_updateAlarmDisplay:
  1883                           	opt stack 0
  1884                           tblptru	equ	0xFF8
  1885                           tblptrh	equ	0xFF7
  1886                           tblptrl	equ	0xFF6
  1887                           tablat	equ	0xFF5
  1888                           prodl	equ	0xFF3
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           fsr1l	equ	0xFE1
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _sprintf *****************
  1896 ;; Defined at:
  1897 ;;		line 492 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  sp              2   51[COMRAM] PTR unsigned char 
  1900 ;;		 -> updateClockDisplay@Buffer(32), updateAlarmDisplay@alarm_string(17), main@alarm_response(13), main@time_response(
      +9), 
  1901 ;;  f               2   53[COMRAM] PTR const unsigned char 
  1902 ;;		 -> STR_7(21), STR_6(22), STR_3(18), STR_2(15), 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  tmpval          4    0        struct .
  1905 ;;  width           2   77[COMRAM] int 
  1906 ;;  len             2   75[COMRAM] unsigned int 
  1907 ;;  cp              2   73[COMRAM] PTR const unsigned char 
  1908 ;;		 -> STR_12(7), STR_5(4), STR_4(3), 
  1909 ;;  ap              2   71[COMRAM] PTR void [1]
  1910 ;;		 -> ?_sprintf(2), 
  1911 ;;  val             2   68[COMRAM] unsigned int 
  1912 ;;  c               1   79[COMRAM] char 
  1913 ;;  prec            1   70[COMRAM] char 
  1914 ;;  flag            1   67[COMRAM] unsigned char 
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  2   51[COMRAM] int 
  1917 ;; Registers used:
  1918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1924 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;Total ram usage:       29 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:    4
  1931 ;; This function calls:
  1932 ;;		___lwdiv
  1933 ;;		___lwmod
  1934 ;;		___wmul
  1935 ;;		_isdigit
  1936 ;; This function is called by:
  1937 ;;		_main
  1938 ;;		_updateAlarmDisplay
  1939 ;;		_updateClockDisplay
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text4
  1944  001448                     __ptext4:
  1945                           	opt stack 0
  1946  001448                     _sprintf:
  1947                           	opt stack 25
  1948                           
  1949                           ;doprnt.c: 494: va_list ap;
  1950                           ;doprnt.c: 499: signed char c;
  1951                           ;doprnt.c: 501: int width;
  1952                           ;doprnt.c: 506: signed char prec;
  1953                           ;doprnt.c: 508: unsigned char flag;
  1954                           ;doprnt.c: 523: union {
  1955                           ;doprnt.c: 524: unsigned long vd;
  1956                           ;doprnt.c: 525: double integ;
  1957                           ;doprnt.c: 526: } tmpval;
  1958                           ;doprnt.c: 528: unsigned int val;
  1959                           ;doprnt.c: 529: unsigned len;
  1960                           ;doprnt.c: 530: const char * cp;
  1961                           ;doprnt.c: 533: *ap = __va_start();
  1962                           
  1963                           ;incstack = 0
  1964  001448  0E38               	movlw	low (?_sprintf+4)
  1965  00144A  6E48               	movwf	sprintf@ap,c
  1966  00144C  0E00               	movlw	high (?_sprintf+4)
  1967  00144E  6E49               	movwf	sprintf@ap+1,c
  1968                           
  1969                           ;doprnt.c: 536: while(c = *f++) {
  1970  001450  D173               	goto	u1510
  1971  001452                     
  1972                           ;doprnt.c: 538: if(c != '%')
  1973  001452  0E25               	movlw	37
  1974  001454  1850               	xorwf	sprintf@c,w,c
  1975  001456  B4D8               	btfsc	status,2,c
  1976  001458  D009               	goto	l354
  1977                           
  1978                           ;doprnt.c: 540: {
  1979                           ;doprnt.c: 541: ((*sp++ = (c)));
  1980  00145A  C034  FFD9         	movff	sprintf@sp,fsr2l
  1981  00145E  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  1982  001462  C050  FFDF         	movff	sprintf@c,indf2
  1983  001466  4A34               	infsnz	sprintf@sp,f,c
  1984  001468  2A35               	incf	sprintf@sp+1,f,c
  1985                           
  1986                           ;doprnt.c: 542: continue;
  1987  00146A  D166               	goto	u1510
  1988  00146C                     l354:
  1989                           
  1990                           ;doprnt.c: 543: }
  1991                           ;doprnt.c: 546: width = 0;
  1992  00146C  0E00               	movlw	0
  1993  00146E  6E4F               	movwf	sprintf@width+1,c
  1994  001470  0E00               	movlw	0
  1995  001472  6E4E               	movwf	sprintf@width,c
  1996                           
  1997                           ;doprnt.c: 548: flag = 0;
  1998  001474  0E00               	movlw	0
  1999  001476  6E44               	movwf	sprintf@flag,c
  2000                           
  2001                           ;doprnt.c: 551: switch(*f) {
  2002                           
  2003                           ;doprnt.c: 550: for(;;) {
  2004  001478  D003               	goto	l356
  2005  00147A                     
  2006                           ;doprnt.c: 580: flag |= 0x04;
  2007  00147A  8444               	bsf	sprintf@flag,2,c
  2008                           
  2009                           ;doprnt.c: 581: f++;
  2010  00147C  4A36               	infsnz	sprintf@f,f,c
  2011  00147E  2A37               	incf	sprintf@f+1,f,c
  2012  001480                     l356:
  2013  001480  C036  FFF6         	movff	sprintf@f,tblptrl
  2014  001484  C037  FFF7         	movff	sprintf@f+1,tblptrh
  2015  001488                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2016  001488  6AF8               	clrf	tblptru,c
  2017  00148A                     	endif
  2018  00148A                     	if	0	;tblptru may be non-zero
  2019  00148A                     	endif
  2020  00148A  0008               	tblrd		*
  2021  00148C  50F5               	movf	tablat,w,c
  2022                           
  2023                           ; Switch size 1, requested type "space"
  2024                           ; Number of cases is 1, Range of values is 48 to 48
  2025                           ; switch strategies available:
  2026                           ; Name         Instructions Cycles
  2027                           ; simple_byte            4     3 (average)
  2028                           ;	Chosen strategy is simple_byte
  2029  00148E  0A30               	xorlw	48	; case 48
  2030  001490  B4D8               	btfsc	status,2,c
  2031  001492  D7F3               	goto	l357
  2032                           
  2033                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2034                           
  2035                           ;doprnt.c: 586: }
  2036                           
  2037                           ;doprnt.c: 585: break;
  2038  001494  C036  FFF6         	movff	sprintf@f,tblptrl
  2039  001498  C037  FFF7         	movff	sprintf@f+1,tblptrh
  2040  00149C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2041  00149C  6AF8               	clrf	tblptru,c
  2042  00149E                     	endif
  2043  00149E                     	if	0	;tblptru may be non-zero
  2044  00149E                     	endif
  2045  00149E  0008               	tblrd		*
  2046  0014A0  50F5               	movf	tablat,w,c
  2047  0014A2  EC7B  F00E         	call	_isdigit
  2048  0014A6  A0D8               	btfss	status,0,c
  2049  0014A8  D09D               	goto	l364
  2050                           
  2051                           ;doprnt.c: 598: width = 0;
  2052  0014AA  0E00               	movlw	0
  2053  0014AC  6E4F               	movwf	sprintf@width+1,c
  2054  0014AE  0E00               	movlw	0
  2055  0014B0  6E4E               	movwf	sprintf@width,c
  2056  0014B2                     
  2057                           ;doprnt.c: 600: width *= 10;
  2058  0014B2  C04E  F028         	movff	sprintf@width,___wmul@multiplier
  2059  0014B6  C04F  F029         	movff	sprintf@width+1,___wmul@multiplier+1
  2060  0014BA  0E00               	movlw	0
  2061  0014BC  6E2B               	movwf	___wmul@multiplicand+1,c
  2062  0014BE  0E0A               	movlw	10
  2063  0014C0  6E2A               	movwf	___wmul@multiplicand,c
  2064  0014C2  EC21  F00E         	call	___wmul	;wreg free
  2065  0014C6  C028  F04E         	movff	?___wmul,sprintf@width
  2066  0014CA  C029  F04F         	movff	?___wmul+1,sprintf@width+1
  2067                           
  2068                           ;doprnt.c: 601: width += *f++ - '0';
  2069  0014CE  0ED0               	movlw	208
  2070  0014D0  6E40               	movwf	??_sprintf& (0+255),c
  2071  0014D2  0EFF               	movlw	255
  2072  0014D4  6E41               	movwf	(??_sprintf+1)& (0+255),c
  2073  0014D6  C036  FFF6         	movff	sprintf@f,tblptrl
  2074  0014DA  C037  FFF7         	movff	sprintf@f+1,tblptrh
  2075  0014DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2076  0014DE  6AF8               	clrf	tblptru,c
  2077  0014E0                     	endif
  2078  0014E0                     	if	0	;tblptru may be non-zero
  2079  0014E0                     	endif
  2080  0014E0  0008               	tblrd		*
  2081  0014E2  50F5               	movf	tablat,w,c
  2082  0014E4  6E42               	movwf	(??_sprintf+2)& (0+255),c
  2083  0014E6  6A43               	clrf	(??_sprintf+3)& (0+255),c
  2084  0014E8  5040               	movf	??_sprintf,w,c
  2085  0014EA  2642               	addwf	??_sprintf+2,f,c
  2086  0014EC  5041               	movf	??_sprintf+1,w,c
  2087  0014EE  2243               	addwfc	??_sprintf+3,f,c
  2088  0014F0  5042               	movf	??_sprintf+2,w,c
  2089  0014F2  264E               	addwf	sprintf@width,f,c
  2090  0014F4  5043               	movf	??_sprintf+3,w,c
  2091  0014F6  224F               	addwfc	sprintf@width+1,f,c
  2092  0014F8  4A36               	infsnz	sprintf@f,f,c
  2093  0014FA  2A37               	incf	sprintf@f+1,f,c
  2094                           
  2095                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2096  0014FC  C036  FFF6         	movff	sprintf@f,tblptrl
  2097  001500  C037  FFF7         	movff	sprintf@f+1,tblptrh
  2098  001504                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2099  001504  6AF8               	clrf	tblptru,c
  2100  001506                     	endif
  2101  001506                     	if	0	;tblptru may be non-zero
  2102  001506                     	endif
  2103  001506  0008               	tblrd		*
  2104  001508  50F5               	movf	tablat,w,c
  2105  00150A  EC7B  F00E         	call	_isdigit
  2106  00150E  A0D8               	btfss	status,0,c
  2107  001510  D069               	goto	l364
  2108  001512  D7CF               	goto	l362
  2109  001514                     
  2110                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2111  001514  C048  FFD9         	movff	sprintf@ap,fsr2l
  2112  001518  C049  FFDA         	movff	sprintf@ap+1,fsr2h
  2113  00151C  CFDE F04A          	movff	postinc2,sprintf@cp
  2114  001520  CFDD F04B          	movff	postdec2,sprintf@cp+1
  2115  001524  0E02               	movlw	2
  2116  001526  2648               	addwf	sprintf@ap,f,c
  2117  001528  0E00               	movlw	0
  2118  00152A  2249               	addwfc	sprintf@ap+1,f,c
  2119                           
  2120                           ;doprnt.c: 740: if(!cp)
  2121  00152C  504A               	movf	sprintf@cp,w,c
  2122  00152E  104B               	iorwf	sprintf@cp+1,w,c
  2123  001530  A4D8               	btfss	status,2,c
  2124  001532  D004               	goto	l368
  2125                           
  2126                           ;doprnt.c: 741: cp = "(null)";
  2127  001534  0E67               	movlw	low STR_12
  2128  001536  6E4A               	movwf	sprintf@cp,c
  2129  001538  0E10               	movlw	high STR_12
  2130  00153A  6E4B               	movwf	sprintf@cp+1,c
  2131  00153C                     l368:
  2132                           
  2133                           ;doprnt.c: 745: len = 0;
  2134  00153C  0E00               	movlw	0
  2135  00153E  6E4D               	movwf	sprintf@len+1,c
  2136  001540  0E00               	movlw	0
  2137  001542  6E4C               	movwf	sprintf@len,c
  2138                           
  2139                           ;doprnt.c: 746: while(cp[len])
  2140  001544  D002               	goto	l369
  2141  001546                     
  2142                           ;doprnt.c: 747: len++;
  2143  001546  4A4C               	infsnz	sprintf@len,f,c
  2144  001548  2A4D               	incf	sprintf@len+1,f,c
  2145  00154A                     l369:
  2146  00154A  504C               	movf	sprintf@len,w,c
  2147  00154C  244A               	addwf	sprintf@cp,w,c
  2148  00154E  6E40               	movwf	??_sprintf& (0+255),c
  2149  001550  504D               	movf	sprintf@len+1,w,c
  2150  001552  204B               	addwfc	sprintf@cp+1,w,c
  2151  001554  6E41               	movwf	(??_sprintf+1)& (0+255),c
  2152  001556  C040  FFF6         	movff	??_sprintf,tblptrl
  2153  00155A  C041  FFF7         	movff	??_sprintf+1,tblptrh
  2154  00155E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2155  00155E  6AF8               	clrf	tblptru,c
  2156  001560                     	endif
  2157  001560                     	if	0	;tblptru may be non-zero
  2158  001560                     	endif
  2159  001560  0008               	tblrd		*
  2160  001562  50F5               	movf	tablat,w,c
  2161  001564  0900               	iorlw	0
  2162  001566  A4D8               	btfss	status,2,c
  2163  001568  D7EE               	goto	l370
  2164                           
  2165                           ;doprnt.c: 757: if(width > len)
  2166  00156A  504E               	movf	sprintf@width,w,c
  2167  00156C  5C4C               	subwf	sprintf@len,w,c
  2168  00156E  504F               	movf	sprintf@width+1,w,c
  2169  001570  584D               	subwfb	sprintf@len+1,w,c
  2170  001572  B0D8               	btfsc	status,0,c
  2171  001574  D005               	goto	l372
  2172                           
  2173                           ;doprnt.c: 758: width -= len;
  2174  001576  504C               	movf	sprintf@len,w,c
  2175  001578  5E4E               	subwf	sprintf@width,f,c
  2176  00157A  504D               	movf	sprintf@len+1,w,c
  2177  00157C  5A4F               	subwfb	sprintf@width+1,f,c
  2178  00157E  D00D               	goto	l374
  2179  001580                     l372:
  2180                           
  2181                           ;doprnt.c: 759: else
  2182                           ;doprnt.c: 760: width = 0;
  2183  001580  0E00               	movlw	0
  2184  001582  6E4F               	movwf	sprintf@width+1,c
  2185  001584  0E00               	movlw	0
  2186  001586  6E4E               	movwf	sprintf@width,c
  2187                           
  2188                           ;doprnt.c: 764: while(width--)
  2189  001588  D008               	goto	l374
  2190  00158A                     l1917:
  2191                           
  2192                           ;doprnt.c: 765: ((*sp++ = (' ')));
  2193  00158A  C034  FFD9         	movff	sprintf@sp,fsr2l
  2194  00158E  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  2195  001592  0E20               	movlw	32
  2196  001594  6EDF               	movwf	indf2,c
  2197  001596  4A34               	infsnz	sprintf@sp,f,c
  2198  001598  2A35               	incf	sprintf@sp+1,f,c
  2199  00159A                     l374:
  2200  00159A  064E               	decf	sprintf@width,f,c
  2201  00159C  A0D8               	btfss	status,0,c
  2202  00159E  064F               	decf	sprintf@width+1,f,c
  2203  0015A0  284E               	incf	sprintf@width,w,c
  2204  0015A2  E1F3               	bnz	l1917
  2205  0015A4  284F               	incf	sprintf@width+1,w,c
  2206  0015A6  B4D8               	btfsc	status,2,c
  2207  0015A8  D011               	goto	l377
  2208  0015AA  D7EF               	goto	l375
  2209  0015AC                     l1923:
  2210                           
  2211                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2212  0015AC  C04A  FFF6         	movff	sprintf@cp,tblptrl
  2213  0015B0  C04B  FFF7         	movff	sprintf@cp+1,tblptrh
  2214  0015B4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2215  0015B4  6AF8               	clrf	tblptru,c
  2216  0015B6                     	endif
  2217  0015B6                     	if	0	;tblptru may be non-zero
  2218  0015B6                     	endif
  2219  0015B6  C034  FFD9         	movff	sprintf@sp,fsr2l
  2220  0015BA  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  2221  0015BE  0008               	tblrd		*
  2222  0015C0  CFF5 FFDF          	movff	tablat,indf2
  2223  0015C4  4A4A               	infsnz	sprintf@cp,f,c
  2224  0015C6  2A4B               	incf	sprintf@cp+1,f,c
  2225  0015C8  4A34               	infsnz	sprintf@sp,f,c
  2226  0015CA  2A35               	incf	sprintf@sp+1,f,c
  2227  0015CC                     l377:
  2228  0015CC  064C               	decf	sprintf@len,f,c
  2229  0015CE  A0D8               	btfss	status,0,c
  2230  0015D0  064D               	decf	sprintf@len+1,f,c
  2231  0015D2  284C               	incf	sprintf@len,w,c
  2232  0015D4  E1EB               	bnz	l1923
  2233  0015D6  284D               	incf	sprintf@len+1,w,c
  2234  0015D8  B4D8               	btfsc	status,2,c
  2235  0015DA  D0AE               	goto	u1510
  2236  0015DC  D7E7               	goto	l378
  2237  0015DE                     
  2238                           ;doprnt.c: 818: flag |= 0xC0;
  2239  0015DE  0EC0               	movlw	192
  2240  0015E0  1244               	iorwf	sprintf@flag,f,c
  2241                           
  2242                           ;doprnt.c: 822: }
  2243                           
  2244                           ;doprnt.c: 819: break;
  2245  0015E2  D015               	goto	l382
  2246  0015E4                     l364:
  2247  0015E4  C036  FFF6         	movff	sprintf@f,tblptrl
  2248  0015E8  C037  FFF7         	movff	sprintf@f+1,tblptrh
  2249  0015EC  4A36               	infsnz	sprintf@f,f,c
  2250  0015EE  2A37               	incf	sprintf@f+1,f,c
  2251  0015F0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2252  0015F0  6AF8               	clrf	tblptru,c
  2253  0015F2                     	endif
  2254  0015F2                     	if	0	;tblptru may be non-zero
  2255  0015F2                     	endif
  2256  0015F2  0008               	tblrd		*
  2257  0015F4  CFF5 F050          	movff	tablat,sprintf@c
  2258  0015F8  5050               	movf	sprintf@c,w,c
  2259                           
  2260                           ; Switch size 1, requested type "space"
  2261                           ; Number of cases is 3, Range of values is 0 to 117
  2262                           ; switch strategies available:
  2263                           ; Name         Instructions Cycles
  2264                           ; simple_byte           10     6 (average)
  2265                           ;	Chosen strategy is simple_byte
  2266  0015FA  0A00               	xorlw	0	; case 0
  2267  0015FC  B4D8               	btfsc	status,2,c
  2268  0015FE  D0A9               	goto	u1520
  2269  001600  0A73               	xorlw	115	; case 115
  2270  001602  B4D8               	btfsc	status,2,c
  2271  001604  D787               	goto	l367
  2272  001606  0A06               	xorlw	6	; case 117
  2273  001608  B4D8               	btfsc	status,2,c
  2274  00160A  D7E9               	goto	l381
  2275  00160C  D095               	goto	u1510
  2276  00160E                     l382:
  2277                           
  2278                           ;doprnt.c: 1273: {
  2279                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2280  00160E  C048  FFD9         	movff	sprintf@ap,fsr2l
  2281  001612  C049  FFDA         	movff	sprintf@ap+1,fsr2h
  2282  001616  CFDE F045          	movff	postinc2,sprintf@val
  2283  00161A  CFDD F046          	movff	postdec2,sprintf@val+1
  2284  00161E  0E02               	movlw	2
  2285  001620  2648               	addwf	sprintf@ap,f,c
  2286  001622  0E00               	movlw	0
  2287  001624  2249               	addwfc	sprintf@ap+1,f,c
  2288                           
  2289                           ;doprnt.c: 1287: }
  2290                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2291  001626  0E01               	movlw	1
  2292  001628  6E50               	movwf	sprintf@c,c
  2293  00162A                     l1943:
  2294  00162A  0E05               	movlw	5
  2295  00162C  1850               	xorwf	sprintf@c,w,c
  2296  00162E  B4D8               	btfsc	status,2,c
  2297  001630  D015               	goto	u1440
  2298                           
  2299                           ;doprnt.c: 1306: if(val < dpowers[c])
  2300  001632  5050               	movf	sprintf@c,w,c
  2301  001634  0D02               	mullw	2
  2302  001636  0E01               	movlw	low _dpowers
  2303  001638  24F3               	addwf	prodl,w,c
  2304  00163A  6EF6               	movwf	tblptrl,c
  2305  00163C  0E10               	movlw	high _dpowers
  2306  00163E  20F4               	addwfc	prodh,w,c
  2307  001640  6EF7               	movwf	tblptrh,c
  2308  001642                     	if	1	;There are 3 active tblptr bytes
  2309  001642  6AF8               	clrf	tblptru,c
  2310  001644  0E00               	movlw	low (__mediumconst shr (0+16))
  2311  001646  22F8               	addwfc	tblptru,f,c
  2312  001648                     	endif
  2313  001648  0009               	tblrd		*+
  2314  00164A  50F5               	movf	tablat,w,c
  2315  00164C  5C45               	subwf	sprintf@val,w,c
  2316  00164E  0009               	tblrd		*+
  2317  001650  50F5               	movf	tablat,w,c
  2318  001652  5846               	subwfb	sprintf@val+1,w,c
  2319  001654  A0D8               	btfss	status,0,c
  2320  001656  D002               	goto	u1440
  2321                           
  2322                           ;doprnt.c: 1307: break;
  2323  001658  2A50               	incf	sprintf@c,f,c
  2324  00165A  D7E7               	goto	l1943
  2325  00165C                     u1440:
  2326                           
  2327                           ;doprnt.c: 1381: if(width > c)
  2328  00165C  0E80               	movlw	128
  2329  00165E  BE50               	btfsc	sprintf@c,7,c
  2330  001660  0E7F               	movlw	127
  2331  001662  6E40               	movwf	??_sprintf& (0+255),c
  2332  001664  504E               	movf	sprintf@width,w,c
  2333  001666  5C50               	subwf	sprintf@c,w,c
  2334  001668  504F               	movf	sprintf@width+1,w,c
  2335  00166A  0A80               	xorlw	128
  2336  00166C  5840               	subwfb	??_sprintf& (0+255),w,c
  2337  00166E  B0D8               	btfsc	status,0,c
  2338  001670  D007               	goto	l386
  2339                           
  2340                           ;doprnt.c: 1382: width -= c;
  2341  001672  5050               	movf	sprintf@c,w,c
  2342  001674  5E4E               	subwf	sprintf@width,f,c
  2343  001676  0E00               	movlw	0
  2344  001678  BE50               	btfsc	sprintf@c,7,c
  2345  00167A  0EFF               	movlw	255
  2346  00167C  5A4F               	subwfb	sprintf@width+1,f,c
  2347  00167E  D004               	goto	l387
  2348  001680                     l386:
  2349                           
  2350                           ;doprnt.c: 1383: else
  2351                           ;doprnt.c: 1384: width = 0;
  2352  001680  0E00               	movlw	0
  2353  001682  6E4F               	movwf	sprintf@width+1,c
  2354  001684  0E00               	movlw	0
  2355  001686  6E4E               	movwf	sprintf@width,c
  2356  001688                     l387:
  2357                           
  2358                           ;doprnt.c: 1387: if(flag & 0x04) {
  2359  001688  A444               	btfss	sprintf@flag,2,c
  2360  00168A  D010               	goto	l388
  2361  00168C                     
  2362                           ;doprnt.c: 1415: if(width)
  2363  00168C  504E               	movf	sprintf@width,w,c
  2364  00168E  104F               	iorwf	sprintf@width+1,w,c
  2365  001690  B4D8               	btfsc	status,2,c
  2366  001692  D01F               	goto	u1500
  2367                           
  2368                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2369                           
  2370                           ;doprnt.c: 1416: do
  2371  001694  C034  FFD9         	movff	sprintf@sp,fsr2l
  2372  001698  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  2373  00169C  0E30               	movlw	48
  2374  00169E  6EDF               	movwf	indf2,c
  2375  0016A0  4A34               	infsnz	sprintf@sp,f,c
  2376  0016A2  2A35               	incf	sprintf@sp+1,f,c
  2377                           
  2378                           ;doprnt.c: 1418: while(--width);
  2379  0016A4  064E               	decf	sprintf@width,f,c
  2380  0016A6  A0D8               	btfss	status,0,c
  2381  0016A8  064F               	decf	sprintf@width+1,f,c
  2382  0016AA  D7F0               	goto	L10
  2383  0016AC                     l388:
  2384                           
  2385                           ;doprnt.c: 1422: {
  2386                           ;doprnt.c: 1424: if(width
  2387                           ;doprnt.c: 1428: )
  2388  0016AC  504E               	movf	sprintf@width,w,c
  2389  0016AE  104F               	iorwf	sprintf@width+1,w,c
  2390  0016B0  B4D8               	btfsc	status,2,c
  2391  0016B2  D00F               	goto	u1500
  2392  0016B4                     u1490:
  2393                           
  2394                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2395                           
  2396                           ;doprnt.c: 1429: do
  2397  0016B4  C034  FFD9         	movff	sprintf@sp,fsr2l
  2398  0016B8  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  2399  0016BC  0E20               	movlw	32
  2400  0016BE  6EDF               	movwf	indf2,c
  2401  0016C0  4A34               	infsnz	sprintf@sp,f,c
  2402  0016C2  2A35               	incf	sprintf@sp+1,f,c
  2403                           
  2404                           ;doprnt.c: 1431: while(--width);
  2405  0016C4  064E               	decf	sprintf@width,f,c
  2406  0016C6  A0D8               	btfss	status,0,c
  2407  0016C8  064F               	decf	sprintf@width+1,f,c
  2408  0016CA  504E               	movf	sprintf@width,w,c
  2409  0016CC  104F               	iorwf	sprintf@width+1,w,c
  2410  0016CE  A4D8               	btfss	status,2,c
  2411  0016D0  D7F1               	goto	u1490
  2412  0016D2                     u1500:
  2413                           
  2414                           ;doprnt.c: 1469: }
  2415                           ;doprnt.c: 1472: prec = c;
  2416  0016D2  C050  F047         	movff	sprintf@c,sprintf@prec
  2417                           
  2418                           ;doprnt.c: 1474: while(prec--) {
  2419  0016D6  D02C               	goto	l396
  2420  0016D8                     
  2421                           ;doprnt.c: 1478: {
  2422                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2423  0016D8  5047               	movf	sprintf@prec,w,c
  2424  0016DA  0D02               	mullw	2
  2425  0016DC  0E01               	movlw	low _dpowers
  2426  0016DE  24F3               	addwf	prodl,w,c
  2427  0016E0  6EF6               	movwf	tblptrl,c
  2428  0016E2  0E10               	movlw	high _dpowers
  2429  0016E4  20F4               	addwfc	prodh,w,c
  2430  0016E6  6EF7               	movwf	tblptrh,c
  2431  0016E8                     	if	1	;There are 3 active tblptr bytes
  2432  0016E8  6AF8               	clrf	tblptru,c
  2433  0016EA  0E00               	movlw	low (__mediumconst shr (0+16))
  2434  0016EC  22F8               	addwfc	tblptru,f,c
  2435  0016EE                     	endif
  2436  0016EE  0009               	tblrd		*+
  2437  0016F0  CFF5 F02A          	movff	tablat,___lwdiv@divisor
  2438  0016F4  000A               	tblrd		*-
  2439  0016F6  CFF5 F02B          	movff	tablat,___lwdiv@divisor+1
  2440  0016FA  C045  F028         	movff	sprintf@val,___lwdiv@dividend
  2441  0016FE  C046  F029         	movff	sprintf@val+1,___lwdiv@dividend+1
  2442  001702  ECD4  F00C         	call	___lwdiv	;wreg free
  2443  001706  C028  F02F         	movff	?___lwdiv,___lwmod@dividend
  2444  00170A  C029  F030         	movff	?___lwdiv+1,___lwmod@dividend+1
  2445  00170E  0E00               	movlw	0
  2446  001710  6E32               	movwf	___lwmod@divisor+1,c
  2447  001712  0E0A               	movlw	10
  2448  001714  6E31               	movwf	___lwmod@divisor,c
  2449  001716  EC21  F00D         	call	___lwmod	;wreg free
  2450  00171A  502F               	movf	?___lwmod,w,c
  2451  00171C  0F30               	addlw	48
  2452  00171E  6E50               	movwf	sprintf@c,c
  2453                           
  2454                           ;doprnt.c: 1523: }
  2455                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2456  001720  C034  FFD9         	movff	sprintf@sp,fsr2l
  2457  001724  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  2458  001728  C050  FFDF         	movff	sprintf@c,indf2
  2459  00172C  4A34               	infsnz	sprintf@sp,f,c
  2460  00172E  2A35               	incf	sprintf@sp+1,f,c
  2461  001730                     l396:
  2462  001730  0647               	decf	sprintf@prec,f,c
  2463  001732  2847               	incf	sprintf@prec,w,c
  2464  001734  A4D8               	btfss	status,2,c
  2465  001736  D7D0               	goto	l397
  2466  001738                     u1510:
  2467  001738  C036  FFF6         	movff	sprintf@f,tblptrl
  2468  00173C  C037  FFF7         	movff	sprintf@f+1,tblptrh
  2469  001740  4A36               	infsnz	sprintf@f,f,c
  2470  001742  2A37               	incf	sprintf@f+1,f,c
  2471  001744                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2472  001744  6AF8               	clrf	tblptru,c
  2473  001746                     	endif
  2474  001746                     	if	0	;tblptru may be non-zero
  2475  001746                     	endif
  2476  001746  0008               	tblrd		*
  2477  001748  CFF5 F050          	movff	tablat,sprintf@c
  2478  00174C  5050               	movf	sprintf@c,w,c
  2479  00174E  A4D8               	btfss	status,2,c
  2480  001750  D680               	goto	l353
  2481  001752                     u1520:
  2482                           
  2483                           ;doprnt.c: 1538: *sp = 0;
  2484                           
  2485                           ;doprnt.c: 1525: }
  2486                           ;doprnt.c: 1533: }
  2487                           ;doprnt.c: 1535: alldone:
  2488  001752  C034  FFD9         	movff	sprintf@sp,fsr2l
  2489  001756  C035  FFDA         	movff	sprintf@sp+1,fsr2h
  2490  00175A  0E00               	movlw	0
  2491  00175C  6EDF               	movwf	indf2,c
  2492  00175E  0012               	return	
  2493  001760                     __end_of_sprintf:
  2494                           	opt stack 0
  2495                           tblptru	equ	0xFF8
  2496                           tblptrh	equ	0xFF7
  2497                           tblptrl	equ	0xFF6
  2498                           tablat	equ	0xFF5
  2499                           prodh	equ	0xFF4
  2500                           prodl	equ	0xFF3
  2501                           postinc0	equ	0xFEE
  2502                           wreg	equ	0xFE8
  2503                           postdec1	equ	0xFE5
  2504                           fsr1l	equ	0xFE1
  2505                           indf2	equ	0xFDF
  2506                           postinc2	equ	0xFDE
  2507                           postdec2	equ	0xFDD
  2508                           fsr2h	equ	0xFDA
  2509                           fsr2l	equ	0xFD9
  2510                           status	equ	0xFD8
  2511                           
  2512 ;; *************** function _isdigit *****************
  2513 ;; Defined at:
  2514 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;  c               1    wreg     unsigned char 
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;  c               1   41[COMRAM] unsigned char 
  2519 ;; Return value:  Size  Location     Type
  2520 ;;		None               void
  2521 ;; Registers used:
  2522 ;;		wreg, status,2, status,0
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2530 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;Total ram usage:        3 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    3
  2535 ;; This function calls:
  2536 ;;		Nothing
  2537 ;; This function is called by:
  2538 ;;		_sprintf
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           	psect	text5
  2543  001CF6                     __ptext5:
  2544                           	opt stack 0
  2545  001CF6                     _isdigit:
  2546                           	opt stack 25
  2547                           
  2548                           ;incstack = 0
  2549                           ;isdigit@c stored from wreg
  2550  001CF6  6E2A               	movwf	isdigit@c,c
  2551  001CF8  0E00               	movlw	0
  2552  001CFA  6E29               	movwf	_isdigit$1321,c
  2553  001CFC  0E3A               	movlw	58
  2554  001CFE  602A               	cpfslt	isdigit@c,c
  2555  001D00  D005               	goto	l730
  2556  001D02  0E2F               	movlw	47
  2557  001D04  642A               	cpfsgt	isdigit@c,c
  2558  001D06  D002               	goto	l730
  2559  001D08  0E01               	movlw	1
  2560  001D0A  6E29               	movwf	_isdigit$1321,c
  2561  001D0C                     l730:
  2562  001D0C  C029  F028         	movff	_isdigit$1321,??_isdigit
  2563  001D10  3028               	rrcf	??_isdigit,w,c
  2564  001D12  0012               	return	
  2565  001D14                     __end_of_isdigit:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           tblptrl	equ	0xFF6
  2570                           tablat	equ	0xFF5
  2571                           prodh	equ	0xFF4
  2572                           prodl	equ	0xFF3
  2573                           postinc0	equ	0xFEE
  2574                           wreg	equ	0xFE8
  2575                           postdec1	equ	0xFE5
  2576                           fsr1l	equ	0xFE1
  2577                           indf2	equ	0xFDF
  2578                           postinc2	equ	0xFDE
  2579                           postdec2	equ	0xFDD
  2580                           fsr2h	equ	0xFDA
  2581                           fsr2l	equ	0xFD9
  2582                           status	equ	0xFD8
  2583                           
  2584 ;; *************** function ___wmul *****************
  2585 ;; Defined at:
  2586 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;  multiplier      2   39[COMRAM] unsigned int 
  2589 ;;  multiplicand    2   41[COMRAM] unsigned int 
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;  product         2   43[COMRAM] unsigned int 
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  2   39[COMRAM] unsigned int 
  2594 ;; Registers used:
  2595 ;;		wreg, status,2, status,0, prodl, prodh
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2601 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;Total ram usage:        6 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    3
  2608 ;; This function calls:
  2609 ;;		Nothing
  2610 ;; This function is called by:
  2611 ;;		_sprintf
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           	psect	text6
  2616  001C42                     __ptext6:
  2617                           	opt stack 0
  2618  001C42                     ___wmul:
  2619                           	opt stack 25
  2620                           
  2621                           ;incstack = 0
  2622  001C42  5028               	movf	___wmul@multiplier,w,c
  2623  001C44  022A               	mulwf	___wmul@multiplicand,c
  2624  001C46  CFF3 F02C          	movff	prodl,___wmul@product
  2625  001C4A  CFF4 F02D          	movff	prodh,___wmul@product+1
  2626  001C4E  5028               	movf	___wmul@multiplier,w,c
  2627  001C50  022B               	mulwf	___wmul@multiplicand+1,c
  2628  001C52  50F3               	movf	prodl,w,c
  2629  001C54  262D               	addwf	___wmul@product+1,f,c
  2630  001C56  5029               	movf	___wmul@multiplier+1,w,c
  2631  001C58  022A               	mulwf	___wmul@multiplicand,c
  2632  001C5A  50F3               	movf	prodl,w,c
  2633  001C5C  262D               	addwf	___wmul@product+1,f,c
  2634  001C5E  C02C  F028         	movff	___wmul@product,?___wmul
  2635  001C62  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  2636  001C66  0012               	return	
  2637  001C68                     __end_of___wmul:
  2638                           	opt stack 0
  2639                           tblptru	equ	0xFF8
  2640                           tblptrh	equ	0xFF7
  2641                           tblptrl	equ	0xFF6
  2642                           tablat	equ	0xFF5
  2643                           prodh	equ	0xFF4
  2644                           prodl	equ	0xFF3
  2645                           postinc0	equ	0xFEE
  2646                           wreg	equ	0xFE8
  2647                           postdec1	equ	0xFE5
  2648                           fsr1l	equ	0xFE1
  2649                           indf2	equ	0xFDF
  2650                           postinc2	equ	0xFDE
  2651                           postdec2	equ	0xFDD
  2652                           fsr2h	equ	0xFDA
  2653                           fsr2l	equ	0xFD9
  2654                           status	equ	0xFD8
  2655                           
  2656 ;; *************** function ___lwmod *****************
  2657 ;; Defined at:
  2658 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  dividend        2   46[COMRAM] unsigned int 
  2661 ;;  divisor         2   48[COMRAM] unsigned int 
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;  counter         1   50[COMRAM] unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  2   46[COMRAM] unsigned int 
  2666 ;; Registers used:
  2667 ;;		wreg, status,2, status,0
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2673 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2676 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2677 ;;Total ram usage:        5 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    3
  2680 ;; This function calls:
  2681 ;;		Nothing
  2682 ;; This function is called by:
  2683 ;;		_sprintf
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text7
  2688  001A42                     __ptext7:
  2689                           	opt stack 0
  2690  001A42                     ___lwmod:
  2691                           	opt stack 25
  2692                           
  2693                           ;incstack = 0
  2694  001A42  5031               	movf	___lwmod@divisor,w,c
  2695  001A44  1032               	iorwf	___lwmod@divisor+1,w,c
  2696  001A46  B4D8               	btfsc	status,2,c
  2697  001A48  D018               	goto	l824
  2698  001A4A  0E01               	movlw	1
  2699  001A4C  6E33               	movwf	___lwmod@counter,c
  2700  001A4E  D004               	goto	l819
  2701  001A50  90D8               	bcf	status,0,c
  2702  001A52  3631               	rlcf	___lwmod@divisor,f,c
  2703  001A54  3632               	rlcf	___lwmod@divisor+1,f,c
  2704  001A56  2A33               	incf	___lwmod@counter,f,c
  2705  001A58                     l819:
  2706  001A58  AE32               	btfss	___lwmod@divisor+1,7,c
  2707  001A5A  D7FA               	goto	l820
  2708  001A5C                     u1320:
  2709  001A5C  5031               	movf	___lwmod@divisor,w,c
  2710  001A5E  5C2F               	subwf	___lwmod@dividend,w,c
  2711  001A60  5032               	movf	___lwmod@divisor+1,w,c
  2712  001A62  5830               	subwfb	___lwmod@dividend+1,w,c
  2713  001A64  A0D8               	btfss	status,0,c
  2714  001A66  D004               	goto	l823
  2715  001A68  5031               	movf	___lwmod@divisor,w,c
  2716  001A6A  5E2F               	subwf	___lwmod@dividend,f,c
  2717  001A6C  5032               	movf	___lwmod@divisor+1,w,c
  2718  001A6E  5A30               	subwfb	___lwmod@dividend+1,f,c
  2719  001A70                     l823:
  2720  001A70  90D8               	bcf	status,0,c
  2721  001A72  3232               	rrcf	___lwmod@divisor+1,f,c
  2722  001A74  3231               	rrcf	___lwmod@divisor,f,c
  2723  001A76  2E33               	decfsz	___lwmod@counter,f,c
  2724  001A78  D7F1               	goto	u1320
  2725  001A7A                     l824:
  2726  001A7A  C02F  F02F         	movff	___lwmod@dividend,?___lwmod
  2727  001A7E  C030  F030         	movff	___lwmod@dividend+1,?___lwmod+1
  2728  001A82  0012               	return		;funcret
  2729  001A84                     __end_of___lwmod:
  2730                           	opt stack 0
  2731                           tblptru	equ	0xFF8
  2732                           tblptrh	equ	0xFF7
  2733                           tblptrl	equ	0xFF6
  2734                           tablat	equ	0xFF5
  2735                           prodh	equ	0xFF4
  2736                           prodl	equ	0xFF3
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           postdec1	equ	0xFE5
  2740                           fsr1l	equ	0xFE1
  2741                           indf2	equ	0xFDF
  2742                           postinc2	equ	0xFDE
  2743                           postdec2	equ	0xFDD
  2744                           fsr2h	equ	0xFDA
  2745                           fsr2l	equ	0xFD9
  2746                           status	equ	0xFD8
  2747                           
  2748 ;; *************** function ___lwdiv *****************
  2749 ;; Defined at:
  2750 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;  dividend        2   39[COMRAM] unsigned int 
  2753 ;;  divisor         2   41[COMRAM] unsigned int 
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;  quotient        2   43[COMRAM] unsigned int 
  2756 ;;  counter         1   45[COMRAM] unsigned char 
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  2   39[COMRAM] unsigned int 
  2759 ;; Registers used:
  2760 ;;		wreg, status,2, status,0
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2766 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;Total ram usage:        7 bytes
  2771 ;; Hardware stack levels used:    1
  2772 ;; Hardware stack levels required when called:    3
  2773 ;; This function calls:
  2774 ;;		Nothing
  2775 ;; This function is called by:
  2776 ;;		_sprintf
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           	psect	text8
  2781  0019A8                     __ptext8:
  2782                           	opt stack 0
  2783  0019A8                     ___lwdiv:
  2784                           	opt stack 25
  2785                           
  2786                           ;incstack = 0
  2787  0019A8  0E00               	movlw	0
  2788  0019AA  6E2D               	movwf	___lwdiv@quotient+1,c
  2789  0019AC  0E00               	movlw	0
  2790  0019AE  6E2C               	movwf	___lwdiv@quotient,c
  2791  0019B0  502A               	movf	___lwdiv@divisor,w,c
  2792  0019B2  102B               	iorwf	___lwdiv@divisor+1,w,c
  2793  0019B4  B4D8               	btfsc	status,2,c
  2794  0019B6  D01C               	goto	l814
  2795  0019B8  0E01               	movlw	1
  2796  0019BA  6E2E               	movwf	___lwdiv@counter,c
  2797  0019BC  D004               	goto	l809
  2798  0019BE  90D8               	bcf	status,0,c
  2799  0019C0  362A               	rlcf	___lwdiv@divisor,f,c
  2800  0019C2  362B               	rlcf	___lwdiv@divisor+1,f,c
  2801  0019C4  2A2E               	incf	___lwdiv@counter,f,c
  2802  0019C6                     l809:
  2803  0019C6  AE2B               	btfss	___lwdiv@divisor+1,7,c
  2804  0019C8  D7FA               	goto	l810
  2805  0019CA                     u1290:
  2806  0019CA  90D8               	bcf	status,0,c
  2807  0019CC  362C               	rlcf	___lwdiv@quotient,f,c
  2808  0019CE  362D               	rlcf	___lwdiv@quotient+1,f,c
  2809  0019D0  502A               	movf	___lwdiv@divisor,w,c
  2810  0019D2  5C28               	subwf	___lwdiv@dividend,w,c
  2811  0019D4  502B               	movf	___lwdiv@divisor+1,w,c
  2812  0019D6  5829               	subwfb	___lwdiv@dividend+1,w,c
  2813  0019D8  A0D8               	btfss	status,0,c
  2814  0019DA  D005               	goto	l813
  2815  0019DC  502A               	movf	___lwdiv@divisor,w,c
  2816  0019DE  5E28               	subwf	___lwdiv@dividend,f,c
  2817  0019E0  502B               	movf	___lwdiv@divisor+1,w,c
  2818  0019E2  5A29               	subwfb	___lwdiv@dividend+1,f,c
  2819  0019E4  802C               	bsf	___lwdiv@quotient,0,c
  2820  0019E6                     l813:
  2821  0019E6  90D8               	bcf	status,0,c
  2822  0019E8  322B               	rrcf	___lwdiv@divisor+1,f,c
  2823  0019EA  322A               	rrcf	___lwdiv@divisor,f,c
  2824  0019EC  2E2E               	decfsz	___lwdiv@counter,f,c
  2825  0019EE  D7ED               	goto	u1290
  2826  0019F0                     l814:
  2827  0019F0  C02C  F028         	movff	___lwdiv@quotient,?___lwdiv
  2828  0019F4  C02D  F029         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2829  0019F8  0012               	return		;funcret
  2830  0019FA                     __end_of___lwdiv:
  2831                           	opt stack 0
  2832                           tblptru	equ	0xFF8
  2833                           tblptrh	equ	0xFF7
  2834                           tblptrl	equ	0xFF6
  2835                           tablat	equ	0xFF5
  2836                           prodh	equ	0xFF4
  2837                           prodl	equ	0xFF3
  2838                           postinc0	equ	0xFEE
  2839                           wreg	equ	0xFE8
  2840                           postdec1	equ	0xFE5
  2841                           fsr1l	equ	0xFE1
  2842                           indf2	equ	0xFDF
  2843                           postinc2	equ	0xFDE
  2844                           postdec2	equ	0xFDD
  2845                           fsr2h	equ	0xFDA
  2846                           fsr2l	equ	0xFD9
  2847                           status	equ	0xFD8
  2848                           
  2849 ;; *************** function _setupSerial *****************
  2850 ;; Defined at:
  2851 ;;		line 9 in file "Serial.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;		None
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;  dummy           1   39[COMRAM] unsigned char 
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      void 
  2858 ;; Registers used:
  2859 ;;		wreg, status,2
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;Total ram usage:        1 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    3
  2872 ;; This function calls:
  2873 ;;		Nothing
  2874 ;; This function is called by:
  2875 ;;		_main
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text9
  2880  001C1A                     __ptext9:
  2881                           	opt stack 0
  2882  001C1A                     _setupSerial:
  2883                           	opt stack 27
  2884                           
  2885                           ;Serial.c: 10: unsigned char dummy;
  2886                           ;Serial.c: 11: BAUDCONbits.BRG16 = 0;
  2887                           
  2888                           ;incstack = 0
  2889  001C1A  96B8               	bcf	4024,3,c	;volatile
  2890                           
  2891                           ;Serial.c: 12: TXSTA = 0;
  2892  001C1C  0E00               	movlw	0
  2893  001C1E  6EAC               	movwf	4012,c	;volatile
  2894                           
  2895                           ;Serial.c: 13: SPBRG = 25;
  2896  001C20  0E19               	movlw	25
  2897  001C22  6EAF               	movwf	4015,c	;volatile
  2898                           
  2899                           ;Serial.c: 14: SPBRGH = 0;
  2900  001C24  0E00               	movlw	0
  2901  001C26  6EB0               	movwf	4016,c	;volatile
  2902                           
  2903                           ;Serial.c: 15: TXSTAbits.BRGH = 1;
  2904  001C28  84AC               	bsf	4012,2,c	;volatile
  2905                           
  2906                           ;Serial.c: 16: TXSTAbits.TXEN = 1;
  2907  001C2A  8AAC               	bsf	4012,5,c	;volatile
  2908                           
  2909                           ;Serial.c: 18: RCSTA = 0;
  2910  001C2C  0E00               	movlw	0
  2911  001C2E  6EAB               	movwf	4011,c	;volatile
  2912                           
  2913                           ;Serial.c: 19: RCSTAbits.CREN = 1;
  2914  001C30  88AB               	bsf	4011,4,c	;volatile
  2915                           
  2916                           ;Serial.c: 20: RCSTAbits.SPEN = 1;
  2917  001C32  8EAB               	bsf	4011,7,c	;volatile
  2918                           
  2919                           ;Serial.c: 21: ;
  2920                           ;Serial.c: 22: dummy = RCREG;
  2921  001C34  CFAE F028          	movff	4014,setupSerial@dummy	;volatile
  2922                           
  2923                           ;Serial.c: 23: dummy = RCREG;
  2924  001C38  CFAE F028          	movff	4014,setupSerial@dummy	;volatile
  2925                           
  2926                           ;Serial.c: 24: TRISCbits.TRISC6 = 0;
  2927  001C3C  9C94               	bcf	3988,6,c	;volatile
  2928                           
  2929                           ;Serial.c: 25: TRISCbits.TRISC7 = 1;
  2930  001C3E  8E94               	bsf	3988,7,c	;volatile
  2931  001C40  0012               	return	
  2932  001C42                     __end_of_setupSerial:
  2933                           	opt stack 0
  2934                           tblptru	equ	0xFF8
  2935                           tblptrh	equ	0xFF7
  2936                           tblptrl	equ	0xFF6
  2937                           tablat	equ	0xFF5
  2938                           prodh	equ	0xFF4
  2939                           prodl	equ	0xFF3
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           postdec1	equ	0xFE5
  2943                           fsr1l	equ	0xFE1
  2944                           indf2	equ	0xFDF
  2945                           postinc2	equ	0xFDE
  2946                           postdec2	equ	0xFDD
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _setupPorts *****************
  2952 ;; Defined at:
  2953 ;;		line 302 in file "DigitalClock.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;		None
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;		None
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  1    wreg      void 
  2960 ;; Registers used:
  2961 ;;		wreg, status,2
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;Total ram usage:        0 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    3
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_main
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text10
  2982  001D14                     __ptext10:
  2983                           	opt stack 0
  2984  001D14                     _setupPorts:
  2985                           	opt stack 27
  2986                           
  2987                           ;DigitalClock.c: 304: ADCON0 = 0;
  2988                           
  2989                           ;incstack = 0
  2990  001D14  0E00               	movlw	0
  2991  001D16  6EC2               	movwf	4034,c	;volatile
  2992                           
  2993                           ;DigitalClock.c: 305: ADCON1 = 0b00001100;
  2994  001D18  0E0C               	movlw	12
  2995  001D1A  6EC1               	movwf	4033,c	;volatile
  2996                           
  2997                           ;DigitalClock.c: 306: TRISB = 0xFF;
  2998  001D1C  6893               	setf	3987,c	;volatile
  2999                           
  3000                           ;DigitalClock.c: 307: TRISC = 0x80;
  3001  001D1E  0E80               	movlw	128
  3002  001D20  6E94               	movwf	3988,c	;volatile
  3003                           
  3004                           ;DigitalClock.c: 308: TRISA = 0xFF;
  3005  001D22  6892               	setf	3986,c	;volatile
  3006                           
  3007                           ;DigitalClock.c: 309: TRISD = 0x00;
  3008  001D24  0E00               	movlw	0
  3009  001D26  6E95               	movwf	3989,c	;volatile
  3010                           
  3011                           ;DigitalClock.c: 310: TRISE = 0x00;
  3012  001D28  0E00               	movlw	0
  3013  001D2A  6E96               	movwf	3990,c	;volatile
  3014  001D2C  0012               	return		;funcret
  3015  001D2E                     __end_of_setupPorts:
  3016                           	opt stack 0
  3017                           tblptru	equ	0xFF8
  3018                           tblptrh	equ	0xFF7
  3019                           tblptrl	equ	0xFF6
  3020                           tablat	equ	0xFF5
  3021                           prodh	equ	0xFF4
  3022                           prodl	equ	0xFF3
  3023                           postinc0	equ	0xFEE
  3024                           wreg	equ	0xFE8
  3025                           postdec1	equ	0xFE5
  3026                           fsr1l	equ	0xFE1
  3027                           indf2	equ	0xFDF
  3028                           postinc2	equ	0xFDE
  3029                           postdec2	equ	0xFDD
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _send_string_no_lib *****************
  3035 ;; Defined at:
  3036 ;;		line 80 in file "Serial.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;  p               2   40[COMRAM] PTR unsigned char 
  3039 ;;		 -> main@alarm_response(13), main@time_response(9), STR_1(7), 
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      void 
  3044 ;; Registers used:
  3045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3051 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3055 ;;Total ram usage:        2 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    4
  3058 ;; This function calls:
  3059 ;;		_send_byte_no_lib
  3060 ;; This function is called by:
  3061 ;;		_main
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text11
  3066  0018A6                     __ptext11:
  3067                           	opt stack 0
  3068  0018A6                     _send_string_no_lib:
  3069                           	opt stack 26
  3070                           
  3071                           ;Serial.c: 81: while (*p) {
  3072                           
  3073                           ;incstack = 0
  3074  0018A6  D015               	goto	l273
  3075  0018A8                     
  3076                           ;Serial.c: 82: send_byte_no_lib(*p);
  3077  0018A8  C029  FFF6         	movff	send_string_no_lib@p,tblptrl
  3078  0018AC  C02A  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  3079  0018B0  0E00               	movlw	low (__smallconst shr (0+16))
  3080  0018B2  6EF8               	movwf	tblptru,c
  3081  0018B4  0E0F               	movlw	(high __ramtop+-1)
  3082  0018B6  64F7               	cpfsgt	tblptrh,c
  3083  0018B8  D003               	bra	u1617
  3084  0018BA  0008               	tblrd		*
  3085  0018BC  50F5               	movf	tablat,w,c
  3086  0018BE  D005               	bra	u1610
  3087  0018C0                     u1617:
  3088  0018C0  CFF6 FFD9          	movff	tblptrl,fsr2l
  3089  0018C4  CFF7 FFDA          	movff	tblptrh,fsr2h
  3090  0018C8  50DF               	movf	indf2,w,c
  3091  0018CA                     u1610:
  3092  0018CA  ECA3  F00E         	call	_send_byte_no_lib
  3093                           
  3094                           ;Serial.c: 83: p++;
  3095  0018CE  4A29               	infsnz	send_string_no_lib@p,f,c
  3096  0018D0  2A2A               	incf	send_string_no_lib@p+1,f,c
  3097  0018D2                     l273:
  3098  0018D2  C029  FFF6         	movff	send_string_no_lib@p,tblptrl
  3099  0018D6  C02A  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  3100  0018DA  0E00               	movlw	low (__smallconst shr (0+16))
  3101  0018DC  6EF8               	movwf	tblptru,c
  3102  0018DE  0E0F               	movlw	(high __ramtop+-1)
  3103  0018E0  64F7               	cpfsgt	tblptrh,c
  3104  0018E2  D003               	bra	u1627
  3105  0018E4  0008               	tblrd		*
  3106  0018E6  50F5               	movf	tablat,w,c
  3107  0018E8  D005               	bra	u1620
  3108  0018EA                     u1627:
  3109  0018EA  CFF6 FFD9          	movff	tblptrl,fsr2l
  3110  0018EE  CFF7 FFDA          	movff	tblptrh,fsr2h
  3111  0018F2  50DF               	movf	indf2,w,c
  3112  0018F4                     u1620:
  3113  0018F4  0900               	iorlw	0
  3114  0018F6  B4D8               	btfsc	status,2,c
  3115  0018F8  0012               	return	
  3116  0018FA  D7D6               	goto	l274
  3117  0018FC                     __end_of_send_string_no_lib:
  3118                           	opt stack 0
  3119                           tblptru	equ	0xFF8
  3120                           tblptrh	equ	0xFF7
  3121                           tblptrl	equ	0xFF6
  3122                           tablat	equ	0xFF5
  3123                           prodh	equ	0xFF4
  3124                           prodl	equ	0xFF3
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           postdec1	equ	0xFE5
  3128                           fsr1l	equ	0xFE1
  3129                           indf2	equ	0xFDF
  3130                           postinc2	equ	0xFDE
  3131                           postdec2	equ	0xFDD
  3132                           fsr2h	equ	0xFDA
  3133                           fsr2l	equ	0xFD9
  3134                           status	equ	0xFD8
  3135                           
  3136 ;; *************** function _send_byte_no_lib *****************
  3137 ;; Defined at:
  3138 ;;		line 72 in file "Serial.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  c               1    wreg     unsigned char 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;  c               1   39[COMRAM] unsigned char 
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  1    wreg      void 
  3145 ;; Registers used:
  3146 ;;		wreg
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;Total ram usage:        1 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    3
  3159 ;; This function calls:
  3160 ;;		Nothing
  3161 ;; This function is called by:
  3162 ;;		_send_string_no_lib
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           	psect	text12
  3167  001D46                     __ptext12:
  3168                           	opt stack 0
  3169  001D46                     _send_byte_no_lib:
  3170                           	opt stack 26
  3171                           
  3172                           ;incstack = 0
  3173                           ;send_byte_no_lib@c stored from wreg
  3174  001D46  6E28               	movwf	send_byte_no_lib@c,c
  3175                           
  3176                           ;Serial.c: 73: while (!TXSTAbits.TRMT)
  3177  001D48  D001               	goto	l267
  3178  001D4A                     l268:
  3179  001D4A  0004               	clrwdt		;# 
  3180  001D4C                     l267:
  3181  001D4C  A2AC               	btfss	4012,1,c	;volatile
  3182  001D4E  D7FD               	goto	l268
  3183                           
  3184                           ;Serial.c: 76: }
  3185                           ;Serial.c: 77: TXREG = c;
  3186  001D50  C028  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  3187  001D54  0012               	return		;funcret
  3188  001D56                     __end_of_send_byte_no_lib:
  3189                           	opt stack 0
  3190                           tblptru	equ	0xFF8
  3191                           tblptrh	equ	0xFF7
  3192                           tblptrl	equ	0xFF6
  3193                           tablat	equ	0xFF5
  3194                           prodh	equ	0xFF4
  3195                           prodl	equ	0xFF3
  3196                           postinc0	equ	0xFEE
  3197                           wreg	equ	0xFE8
  3198                           postdec1	equ	0xFE5
  3199                           fsr1l	equ	0xFE1
  3200                           indf2	equ	0xFDF
  3201                           postinc2	equ	0xFDE
  3202                           postdec2	equ	0xFDD
  3203                           fsr2h	equ	0xFDA
  3204                           fsr2l	equ	0xFD9
  3205                           status	equ	0xFD8
  3206                           
  3207 ;; *************** function _read_byte_no_lib *****************
  3208 ;; Defined at:
  3209 ;;		line 66 in file "Serial.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;		None
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;  c               1   39[COMRAM] unsigned char 
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      unsigned char 
  3216 ;; Registers used:
  3217 ;;		wreg, status,2
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;Total ram usage:        1 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    3
  3230 ;; This function calls:
  3231 ;;		Nothing
  3232 ;; This function is called by:
  3233 ;;		_main
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	text13
  3238  001D60                     __ptext13:
  3239                           	opt stack 0
  3240  001D60                     _read_byte_no_lib:
  3241                           	opt stack 27
  3242                           
  3243                           ;Serial.c: 67: unsigned char c;
  3244                           ;Serial.c: 68: c = RCREG;
  3245                           
  3246                           ;incstack = 0
  3247  001D60  CFAE F028          	movff	4014,read_byte_no_lib@c	;volatile
  3248                           
  3249                           ;Serial.c: 69: return c;
  3250  001D64  5028               	movf	read_byte_no_lib@c,w,c
  3251  001D66  0012               	return	
  3252  001D68                     __end_of_read_byte_no_lib:
  3253                           	opt stack 0
  3254                           tblptru	equ	0xFF8
  3255                           tblptrh	equ	0xFF7
  3256                           tblptrl	equ	0xFF6
  3257                           tablat	equ	0xFF5
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           postinc0	equ	0xFEE
  3261                           wreg	equ	0xFE8
  3262                           postdec1	equ	0xFE5
  3263                           fsr1l	equ	0xFE1
  3264                           indf2	equ	0xFDF
  3265                           postinc2	equ	0xFDE
  3266                           postdec2	equ	0xFDD
  3267                           fsr2h	equ	0xFDA
  3268                           fsr2l	equ	0xFD9
  3269                           status	equ	0xFD8
  3270                           
  3271 ;; *************** function _lcd_init *****************
  3272 ;; Defined at:
  3273 ;;		line 63 in file "Lcd.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;		None
  3276 ;; Auto vars:     Size  Location     Type
  3277 ;;  i               1   49[COMRAM] unsigned char 
  3278 ;; Return value:  Size  Location     Type
  3279 ;;                  1    wreg      void 
  3280 ;; Registers used:
  3281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3282 ;; Tracked objects:
  3283 ;;		On entry : 0/0
  3284 ;;		On exit  : 0/0
  3285 ;;		Unchanged: 0/0
  3286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;Total ram usage:        1 bytes
  3292 ;; Hardware stack levels used:    1
  3293 ;; Hardware stack levels required when called:    6
  3294 ;; This function calls:
  3295 ;;		_delay_ms
  3296 ;;		_lcd_send_byte
  3297 ;;		_lcd_send_nibble
  3298 ;; This function is called by:
  3299 ;;		_main
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text14
  3304  001844                     __ptext14:
  3305                           	opt stack 0
  3306  001844                     _lcd_init:
  3307                           	opt stack 24
  3308                           
  3309                           ;Lcd.c: 65: unsigned char i;
  3310                           ;Lcd.c: 68: PORTEbits.RE2 = 0;
  3311                           
  3312                           ;incstack = 0
  3313  001844  9484               	bcf	3972,2,c	;volatile
  3314                           
  3315                           ;Lcd.c: 70: PORTEbits.RE1 = 0;
  3316  001846  9284               	bcf	3972,1,c	;volatile
  3317                           
  3318                           ;Lcd.c: 72: delay_ms(25);
  3319  001848  0E00               	movlw	0
  3320  00184A  6E29               	movwf	delay_ms@n+1,c
  3321  00184C  0E19               	movlw	25
  3322  00184E  6E28               	movwf	delay_ms@n,c
  3323  001850  EC34  F00E         	call	_delay_ms	;wreg free
  3324                           
  3325                           ;Lcd.c: 73: for (i = 1; i <= 3; ++i) {
  3326  001854  0E01               	movlw	1
  3327  001856  6E32               	movwf	lcd_init@i,c
  3328  001858                     l2069:
  3329  001858  0E03               	movlw	3
  3330  00185A  6432               	cpfsgt	lcd_init@i,c
  3331  00185C  D001               	goto	l307
  3332  00185E  D00B               	goto	u1580
  3333  001860                     l307:
  3334                           
  3335                           ;Lcd.c: 74: lcd_send_nibble(3);
  3336  001860  0E03               	movlw	3
  3337  001862  EC6A  F00E         	call	_lcd_send_nibble
  3338                           
  3339                           ;Lcd.c: 76: delay_ms(6);
  3340  001866  0E00               	movlw	0
  3341  001868  6E29               	movwf	delay_ms@n+1,c
  3342  00186A  0E06               	movlw	6
  3343  00186C  6E28               	movwf	delay_ms@n,c
  3344  00186E  EC34  F00E         	call	_delay_ms	;wreg free
  3345  001872  2A32               	incf	lcd_init@i,f,c
  3346  001874  D7F1               	goto	l2069
  3347  001876                     u1580:
  3348                           
  3349                           ;Lcd.c: 77: }
  3350                           ;Lcd.c: 79: lcd_send_nibble(2);
  3351  001876  0E02               	movlw	2
  3352  001878  EC6A  F00E         	call	_lcd_send_nibble
  3353                           
  3354                           ;Lcd.c: 81: for (i = 0; i <= 3; ++i)
  3355  00187C  0E00               	movlw	0
  3356  00187E  6E32               	movwf	lcd_init@i,c
  3357  001880                     l2083:
  3358  001880  0E03               	movlw	3
  3359  001882  6432               	cpfsgt	lcd_init@i,c
  3360  001884  D001               	goto	l309
  3361  001886  0012               	return	
  3362  001888                     l309:
  3363                           
  3364                           ;Lcd.c: 82: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3365  001888  5032               	movf	lcd_init@i,w,c
  3366  00188A  0D01               	mullw	1
  3367  00188C  0E51               	movlw	low _LCD_INIT_STRING
  3368  00188E  24F3               	addwf	prodl,w,c
  3369  001890  6ED9               	movwf	fsr2l,c
  3370  001892  0E00               	movlw	high _LCD_INIT_STRING
  3371  001894  20F4               	addwfc	prodh,w,c
  3372  001896  6EDA               	movwf	fsr2h,c
  3373  001898  50DF               	movf	indf2,w,c
  3374  00189A  6E30               	movwf	lcd_send_byte@n,c
  3375  00189C  0E00               	movlw	0
  3376  00189E  ECFD  F00C         	call	_lcd_send_byte
  3377  0018A2  2A32               	incf	lcd_init@i,f,c
  3378  0018A4  D7ED               	goto	l2083
  3379  0018A6                     __end_of_lcd_init:
  3380                           	opt stack 0
  3381                           tblptru	equ	0xFF8
  3382                           tblptrh	equ	0xFF7
  3383                           tblptrl	equ	0xFF6
  3384                           tablat	equ	0xFF5
  3385                           prodh	equ	0xFF4
  3386                           prodl	equ	0xFF3
  3387                           postinc0	equ	0xFEE
  3388                           wreg	equ	0xFE8
  3389                           postdec1	equ	0xFE5
  3390                           fsr1l	equ	0xFE1
  3391                           indf2	equ	0xFDF
  3392                           postinc2	equ	0xFDE
  3393                           postdec2	equ	0xFDD
  3394                           fsr2h	equ	0xFDA
  3395                           fsr2l	equ	0xFD9
  3396                           status	equ	0xFD8
  3397                           
  3398 ;; *************** function _isDigit *****************
  3399 ;; Defined at:
  3400 ;;		line 398 in file "DigitalClock.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;  c               1    wreg     unsigned char 
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;  c               1   41[COMRAM] unsigned char 
  3405 ;; Return value:  Size  Location     Type
  3406 ;;                  2   39[COMRAM] int 
  3407 ;; Registers used:
  3408 ;;		wreg, status,2, status,0
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3414 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;Total ram usage:        3 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    3
  3421 ;; This function calls:
  3422 ;;		Nothing
  3423 ;; This function is called by:
  3424 ;;		_main
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           	psect	text15
  3429  001CB2                     __ptext15:
  3430                           	opt stack 0
  3431  001CB2                     _isDigit:
  3432                           	opt stack 27
  3433                           
  3434                           ;incstack = 0
  3435                           ;isDigit@c stored from wreg
  3436  001CB2  6E2A               	movwf	isDigit@c,c
  3437                           
  3438                           ;DigitalClock.c: 399: if (c>='0'&& c<='9'){
  3439  001CB4  0E2F               	movlw	47
  3440  001CB6  642A               	cpfsgt	isDigit@c,c
  3441  001CB8  D008               	goto	l212
  3442  001CBA  0E3A               	movlw	58
  3443  001CBC  602A               	cpfslt	isDigit@c,c
  3444  001CBE  D005               	goto	l212
  3445                           
  3446                           ;DigitalClock.c: 400: return 1;
  3447  001CC0  0E00               	movlw	0
  3448  001CC2  6E29               	movwf	?_isDigit+1,c
  3449  001CC4  0E01               	movlw	1
  3450  001CC6  6E28               	movwf	?_isDigit,c
  3451  001CC8  0012               	return	
  3452  001CCA                     l212:
  3453                           
  3454                           ;DigitalClock.c: 402: } return 0;
  3455  001CCA  0E00               	movlw	0
  3456  001CCC  6E29               	movwf	?_isDigit+1,c
  3457  001CCE  0E00               	movlw	0
  3458  001CD0  6E28               	movwf	?_isDigit,c
  3459  001CD2  0012               	return	
  3460  001CD4                     __end_of_isDigit:
  3461                           	opt stack 0
  3462                           tblptru	equ	0xFF8
  3463                           tblptrh	equ	0xFF7
  3464                           tblptrl	equ	0xFF6
  3465                           tablat	equ	0xFF5
  3466                           prodh	equ	0xFF4
  3467                           prodl	equ	0xFF3
  3468                           postinc0	equ	0xFEE
  3469                           wreg	equ	0xFE8
  3470                           postdec1	equ	0xFE5
  3471                           fsr1l	equ	0xFE1
  3472                           indf2	equ	0xFDF
  3473                           postinc2	equ	0xFDE
  3474                           postdec2	equ	0xFDD
  3475                           fsr2h	equ	0xFDA
  3476                           fsr2l	equ	0xFD9
  3477                           status	equ	0xFD8
  3478                           
  3479 ;; *************** function _initialization *****************
  3480 ;; Defined at:
  3481 ;;		line 350 in file "DigitalClock.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;		None
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;		None
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg, status,2, cstack
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;Total ram usage:        0 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:    4
  3502 ;; This function calls:
  3503 ;;		_reloadTimer0
  3504 ;; This function is called by:
  3505 ;;		_main
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           	psect	text16
  3510  001B7E                     __ptext16:
  3511                           	opt stack 0
  3512  001B7E                     _initialization:
  3513                           	opt stack 26
  3514                           
  3515                           ;DigitalClock.c: 351: INTCONbits.GIEH = 1;
  3516                           
  3517                           ;incstack = 0
  3518  001B7E  8EF2               	bsf	intcon,7,c	;volatile
  3519                           
  3520                           ;DigitalClock.c: 352: INTCONbits.GIEL = 1;
  3521  001B80  8CF2               	bsf	intcon,6,c	;volatile
  3522                           
  3523                           ;DigitalClock.c: 353: INTCON2 = 0;
  3524  001B82  0E00               	movlw	0
  3525  001B84  6EF1               	movwf	intcon2,c	;volatile
  3526                           
  3527                           ;DigitalClock.c: 354: INTCON3 = 0;
  3528  001B86  0E00               	movlw	0
  3529  001B88  6EF0               	movwf	intcon3,c	;volatile
  3530                           
  3531                           ;DigitalClock.c: 355: INTCON2bits.INTEDG0 = 1;
  3532  001B8A  8CF1               	bsf	intcon2,6,c	;volatile
  3533                           
  3534                           ;DigitalClock.c: 356: INTCON2bits.INTEDG1 = 1;
  3535  001B8C  8AF1               	bsf	intcon2,5,c	;volatile
  3536                           
  3537                           ;DigitalClock.c: 357: INTCON2bits.INTEDG2 = 1;
  3538  001B8E  88F1               	bsf	intcon2,4,c	;volatile
  3539                           
  3540                           ;DigitalClock.c: 358: INTCON3bits.INT1IE = 1;
  3541  001B90  86F0               	bsf	intcon3,3,c	;volatile
  3542                           
  3543                           ;DigitalClock.c: 359: INTCON3bits.INT2IE = 1;
  3544  001B92  88F0               	bsf	intcon3,4,c	;volatile
  3545                           
  3546                           ;DigitalClock.c: 360: RCONbits.IPEN = 0;
  3547  001B94  9ED0               	bcf	4048,7,c	;volatile
  3548                           
  3549                           ;DigitalClock.c: 361: INTCONbits.INT0IE = 1;
  3550  001B96  88F2               	bsf	intcon,4,c	;volatile
  3551                           
  3552                           ;DigitalClock.c: 362: PORTCbits.RC5 = 0;
  3553  001B98  9A82               	bcf	3970,5,c	;volatile
  3554                           
  3555                           ;DigitalClock.c: 363: T3CONbits.TMR3ON = 1;
  3556  001B9A  80B1               	bsf	4017,0,c	;volatile
  3557                           
  3558                           ;DigitalClock.c: 364: T0CON = 0;
  3559  001B9C  0E00               	movlw	0
  3560  001B9E  6ED5               	movwf	4053,c	;volatile
  3561                           
  3562                           ;DigitalClock.c: 365: T0CONbits.T0PS0 = 1;
  3563  001BA0  80D5               	bsf	4053,0,c	;volatile
  3564                           
  3565                           ;DigitalClock.c: 366: T0CONbits.T0PS1 = 1;
  3566  001BA2  82D5               	bsf	4053,1,c	;volatile
  3567                           
  3568                           ;DigitalClock.c: 367: T0CONbits.T0PS2 = 0;
  3569  001BA4  94D5               	bcf	4053,2,c	;volatile
  3570                           
  3571                           ;DigitalClock.c: 368: reloadTimer0();
  3572  001BA6  ECAB  F00E         	call	_reloadTimer0	;wreg free
  3573                           
  3574                           ;DigitalClock.c: 369: INTCONbits.TMR0IE = 1;
  3575  001BAA  8AF2               	bsf	intcon,5,c	;volatile
  3576                           
  3577                           ;DigitalClock.c: 370: T0CONbits.TMR0ON = 1;
  3578  001BAC  8ED5               	bsf	4053,7,c	;volatile
  3579                           
  3580                           ;DigitalClock.c: 371: alarm_enabled = 0;
  3581  001BAE  0E00               	movlw	0
  3582  001BB0  0100               	movlb	0	; () banked
  3583  001BB2  6FC5               	movwf	_alarm_enabled& (0+255),b	;volatile
  3584                           
  3585                           ; BSR set to: 0
  3586  001BB4  0012               	return		;funcret
  3587  001BB6                     __end_of_initialization:
  3588                           	opt stack 0
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           intcon	equ	0xFF2
  3596                           intcon2	equ	0xFF1
  3597                           intcon3	equ	0xFF0
  3598                           postinc0	equ	0xFEE
  3599                           wreg	equ	0xFE8
  3600                           postdec1	equ	0xFE5
  3601                           fsr1l	equ	0xFE1
  3602                           indf2	equ	0xFDF
  3603                           postinc2	equ	0xFDE
  3604                           postdec2	equ	0xFDD
  3605                           fsr2h	equ	0xFDA
  3606                           fsr2l	equ	0xFD9
  3607                           status	equ	0xFD8
  3608                           
  3609 ;; *************** function _reloadTimer0 *****************
  3610 ;; Defined at:
  3611 ;;		line 324 in file "DigitalClock.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;		None
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;		None
  3616 ;; Return value:  Size  Location     Type
  3617 ;;                  1    wreg      void 
  3618 ;; Registers used:
  3619 ;;		wreg, status,2
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;Total ram usage:        0 bytes
  3630 ;; Hardware stack levels used:    1
  3631 ;; Hardware stack levels required when called:    3
  3632 ;; This function calls:
  3633 ;;		Nothing
  3634 ;; This function is called by:
  3635 ;;		_initialization
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639                           	psect	text17
  3640  001D56                     __ptext17:
  3641                           	opt stack 0
  3642  001D56                     _reloadTimer0:
  3643                           	opt stack 26
  3644                           
  3645                           ;DigitalClock.c: 327: TMR0H = (unsigned char) ((3036 >> 8) & 0x00FF);
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;incstack = 0
  3649  001D56  0E0B               	movlw	11
  3650  001D58  6ED7               	movwf	4055,c	;volatile
  3651                           
  3652                           ;DigitalClock.c: 328: TMR0L = (unsigned char)(3036 & 0x00FF );
  3653  001D5A  0EDC               	movlw	220
  3654  001D5C  6ED6               	movwf	4054,c	;volatile
  3655  001D5E  0012               	return		;funcret
  3656  001D60                     __end_of_reloadTimer0:
  3657                           	opt stack 0
  3658                           tblptru	equ	0xFF8
  3659                           tblptrh	equ	0xFF7
  3660                           tblptrl	equ	0xFF6
  3661                           tablat	equ	0xFF5
  3662                           prodh	equ	0xFF4
  3663                           prodl	equ	0xFF3
  3664                           intcon	equ	0xFF2
  3665                           intcon2	equ	0xFF1
  3666                           intcon3	equ	0xFF0
  3667                           postinc0	equ	0xFEE
  3668                           wreg	equ	0xFE8
  3669                           postdec1	equ	0xFE5
  3670                           fsr1l	equ	0xFE1
  3671                           indf2	equ	0xFDF
  3672                           postinc2	equ	0xFDE
  3673                           postdec2	equ	0xFDD
  3674                           fsr2h	equ	0xFDA
  3675                           fsr2l	equ	0xFD9
  3676                           status	equ	0xFD8
  3677                           
  3678 ;; *************** function _initTimers01 *****************
  3679 ;; Defined at:
  3680 ;;		line 331 in file "DigitalClock.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;		None
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;		None
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      void 
  3687 ;; Registers used:
  3688 ;;		wreg, status,2
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3698 ;;Total ram usage:        0 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    3
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_main
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           	psect	text18
  3709  001C8E                     __ptext18:
  3710                           	opt stack 0
  3711  001C8E                     _initTimers01:
  3712                           	opt stack 27
  3713                           
  3714                           ;DigitalClock.c: 332: T0CON = 0;
  3715                           
  3716                           ;incstack = 0
  3717  001C8E  0E00               	movlw	0
  3718  001C90  6ED5               	movwf	4053,c	;volatile
  3719                           
  3720                           ;DigitalClock.c: 334: INTCONbits.T0IF = 0;
  3721  001C92  94F2               	bcf	intcon,2,c	;volatile
  3722                           
  3723                           ;DigitalClock.c: 335: T0CONbits.T0PS0 = 1;
  3724  001C94  80D5               	bsf	4053,0,c	;volatile
  3725                           
  3726                           ;DigitalClock.c: 336: T0CONbits.T0PS1 = 1;
  3727  001C96  82D5               	bsf	4053,1,c	;volatile
  3728                           
  3729                           ;DigitalClock.c: 337: T0CONbits.T0PS2 = 0;
  3730  001C98  94D5               	bcf	4053,2,c	;volatile
  3731                           
  3732                           ;DigitalClock.c: 338: TMR0H = (unsigned char) ((3036 >> 8) & 0x00FF);
  3733  001C9A  0E0B               	movlw	11
  3734  001C9C  6ED7               	movwf	4055,c	;volatile
  3735                           
  3736                           ;DigitalClock.c: 339: TMR0L = (unsigned char) (3036 & 0x00FF);
  3737  001C9E  0EDC               	movlw	220
  3738  001CA0  6ED6               	movwf	4054,c	;volatile
  3739                           
  3740                           ;DigitalClock.c: 340: T1CONbits.TMR1CS = 1;
  3741  001CA2  82CD               	bsf	4045,1,c	;volatile
  3742                           
  3743                           ;DigitalClock.c: 341: T1CONbits.T1CKPS1 = 0;
  3744  001CA4  9ACD               	bcf	4045,5,c	;volatile
  3745                           
  3746                           ;DigitalClock.c: 342: T1CONbits.T1CKPS0 = 0;
  3747  001CA6  98CD               	bcf	4045,4,c	;volatile
  3748                           
  3749                           ;DigitalClock.c: 344: INTCONbits.GIE = 1;
  3750  001CA8  8EF2               	bsf	intcon,7,c	;volatile
  3751                           
  3752                           ;DigitalClock.c: 345: INTCONbits.T0IE = 1;
  3753  001CAA  8AF2               	bsf	intcon,5,c	;volatile
  3754                           
  3755                           ;DigitalClock.c: 346: T1CONbits.TMR1ON = 1;
  3756  001CAC  80CD               	bsf	4045,0,c	;volatile
  3757                           
  3758                           ;DigitalClock.c: 347: T0CONbits.TMR0ON = 1;
  3759  001CAE  8ED5               	bsf	4053,7,c	;volatile
  3760  001CB0  0012               	return		;funcret
  3761  001CB2                     __end_of_initTimers01:
  3762                           	opt stack 0
  3763                           tblptru	equ	0xFF8
  3764                           tblptrh	equ	0xFF7
  3765                           tblptrl	equ	0xFF6
  3766                           tablat	equ	0xFF5
  3767                           prodh	equ	0xFF4
  3768                           prodl	equ	0xFF3
  3769                           intcon	equ	0xFF2
  3770                           intcon2	equ	0xFF1
  3771                           intcon3	equ	0xFF0
  3772                           postinc0	equ	0xFEE
  3773                           wreg	equ	0xFE8
  3774                           postdec1	equ	0xFE5
  3775                           fsr1l	equ	0xFE1
  3776                           indf2	equ	0xFDF
  3777                           postinc2	equ	0xFDE
  3778                           postdec2	equ	0xFDD
  3779                           fsr2h	equ	0xFDA
  3780                           fsr2l	equ	0xFD9
  3781                           status	equ	0xFD8
  3782                           
  3783 ;; *************** function _enableInterrupts *****************
  3784 ;; Defined at:
  3785 ;;		line 124 in file "DigitalClock.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;		None
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;		None
  3790 ;; Return value:  Size  Location     Type
  3791 ;;                  1    wreg      void 
  3792 ;; Registers used:
  3793 ;;		None
  3794 ;; Tracked objects:
  3795 ;;		On entry : 0/0
  3796 ;;		On exit  : 0/0
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3803 ;;Total ram usage:        0 bytes
  3804 ;; Hardware stack levels used:    1
  3805 ;; Hardware stack levels required when called:    3
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		_main
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           	psect	text19
  3814  001D68                     __ptext19:
  3815                           	opt stack 0
  3816  001D68                     _enableInterrupts:
  3817                           	opt stack 27
  3818                           
  3819                           ;DigitalClock.c: 125: INTCONbits.GIEH = 1;
  3820                           
  3821                           ;incstack = 0
  3822  001D68  8EF2               	bsf	intcon,7,c	;volatile
  3823                           
  3824                           ;DigitalClock.c: 126: INTCONbits.GIEL = 1;
  3825  001D6A  8CF2               	bsf	intcon,6,c	;volatile
  3826  001D6C  0012               	return		;funcret
  3827  001D6E                     __end_of_enableInterrupts:
  3828                           	opt stack 0
  3829                           tblptru	equ	0xFF8
  3830                           tblptrh	equ	0xFF7
  3831                           tblptrl	equ	0xFF6
  3832                           tablat	equ	0xFF5
  3833                           prodh	equ	0xFF4
  3834                           prodl	equ	0xFF3
  3835                           intcon	equ	0xFF2
  3836                           intcon2	equ	0xFF1
  3837                           intcon3	equ	0xFF0
  3838                           postinc0	equ	0xFEE
  3839                           wreg	equ	0xFE8
  3840                           postdec1	equ	0xFE5
  3841                           fsr1l	equ	0xFE1
  3842                           indf2	equ	0xFDF
  3843                           postinc2	equ	0xFDE
  3844                           postdec2	equ	0xFDD
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _disableInterrupts *****************
  3850 ;; Defined at:
  3851 ;;		line 119 in file "DigitalClock.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;		None
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;		None
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		None
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;Total ram usage:        0 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    3
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_main
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text20
  3880  001D6E                     __ptext20:
  3881                           	opt stack 0
  3882  001D6E                     _disableInterrupts:
  3883                           	opt stack 27
  3884                           
  3885                           ;DigitalClock.c: 120: INTCONbits.GIEH = 0;
  3886                           
  3887                           ;incstack = 0
  3888  001D6E  9EF2               	bcf	intcon,7,c	;volatile
  3889                           
  3890                           ;DigitalClock.c: 121: INTCONbits.GIEL = 0;
  3891  001D70  9CF2               	bcf	intcon,6,c	;volatile
  3892  001D72  0012               	return		;funcret
  3893  001D74                     __end_of_disableInterrupts:
  3894                           	opt stack 0
  3895                           tblptru	equ	0xFF8
  3896                           tblptrh	equ	0xFF7
  3897                           tblptrl	equ	0xFF6
  3898                           tablat	equ	0xFF5
  3899                           prodh	equ	0xFF4
  3900                           prodl	equ	0xFF3
  3901                           intcon	equ	0xFF2
  3902                           intcon2	equ	0xFF1
  3903                           intcon3	equ	0xFF0
  3904                           postinc0	equ	0xFEE
  3905                           wreg	equ	0xFE8
  3906                           postdec1	equ	0xFE5
  3907                           fsr1l	equ	0xFE1
  3908                           indf2	equ	0xFDF
  3909                           postinc2	equ	0xFDE
  3910                           postdec2	equ	0xFDD
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function _DisplayNames *****************
  3916 ;; Defined at:
  3917 ;;		line 386 in file "DigitalClock.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;		None
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;		None
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      void 
  3924 ;; Registers used:
  3925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;Total ram usage:        0 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    9
  3938 ;; This function calls:
  3939 ;;		_lcd_gotoxy
  3940 ;;		_lcd_puts
  3941 ;; This function is called by:
  3942 ;;		_main
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           	psect	text21
  3947  001D2E                     __ptext21:
  3948                           	opt stack 0
  3949  001D2E                     _DisplayNames:
  3950                           	opt stack 21
  3951                           
  3952                           ;DigitalClock.c: 387: lcd_gotoxy(1, 4);
  3953                           
  3954                           ;incstack = 0
  3955  001D2E  0E04               	movlw	4
  3956  001D30  6E32               	movwf	lcd_gotoxy@y,c
  3957  001D32  0E01               	movlw	1
  3958  001D34  EC42  F00D         	call	_lcd_gotoxy
  3959                           
  3960                           ;DigitalClock.c: 388: lcd_puts("Masa & Salsabeel");
  3961  001D38  0E48               	movlw	low STR_11
  3962  001D3A  6E36               	movwf	lcd_puts@s,c
  3963  001D3C  0E10               	movlw	high STR_11
  3964  001D3E  6E37               	movwf	lcd_puts@s+1,c
  3965  001D40  EC7E  F00C         	call	_lcd_puts	;wreg free
  3966  001D44  0012               	return		;funcret
  3967  001D46                     __end_of_DisplayNames:
  3968                           	opt stack 0
  3969                           tblptru	equ	0xFF8
  3970                           tblptrh	equ	0xFF7
  3971                           tblptrl	equ	0xFF6
  3972                           tablat	equ	0xFF5
  3973                           prodh	equ	0xFF4
  3974                           prodl	equ	0xFF3
  3975                           intcon	equ	0xFF2
  3976                           intcon2	equ	0xFF1
  3977                           intcon3	equ	0xFF0
  3978                           postinc0	equ	0xFEE
  3979                           wreg	equ	0xFE8
  3980                           postdec1	equ	0xFE5
  3981                           fsr1l	equ	0xFE1
  3982                           indf2	equ	0xFDF
  3983                           postinc2	equ	0xFDE
  3984                           postdec2	equ	0xFDD
  3985                           fsr2h	equ	0xFDA
  3986                           fsr2l	equ	0xFD9
  3987                           status	equ	0xFD8
  3988                           
  3989 ;; *************** function _lcd_puts *****************
  3990 ;; Defined at:
  3991 ;;		line 127 in file "Lcd.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  s               2   53[COMRAM] PTR unsigned char 
  3994 ;;		 -> STR_11(17), STR_10(4), STR_9(4), STR_8(14), 
  3995 ;;		 -> updateClockDisplay@Buffer(32), updateAlarmDisplay@alarm_string(17), 
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;		None
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  1    wreg      void 
  4000 ;; Registers used:
  4001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4007 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4010 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;Total ram usage:        2 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    8
  4014 ;; This function calls:
  4015 ;;		_lcd_putc
  4016 ;; This function is called by:
  4017 ;;		_updateAlarmDisplay
  4018 ;;		_updateClockDisplay
  4019 ;;		_updateAlarmStateDisplay
  4020 ;;		_DisplayNames
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text22
  4025  0018FC                     __ptext22:
  4026                           	opt stack 0
  4027  0018FC                     _lcd_puts:
  4028                           	opt stack 21
  4029                           
  4030                           ;Lcd.c: 128: while (*s) {
  4031                           
  4032                           ;incstack = 0
  4033  0018FC  D015               	goto	l332
  4034  0018FE                     
  4035                           ;Lcd.c: 129: lcd_putc(*s);
  4036  0018FE  C036  FFF6         	movff	lcd_puts@s,tblptrl
  4037  001902  C037  FFF7         	movff	lcd_puts@s+1,tblptrh
  4038  001906  0E00               	movlw	low (__smallconst shr (0+16))
  4039  001908  6EF8               	movwf	tblptru,c
  4040  00190A  0E0F               	movlw	(high __ramtop+-1)
  4041  00190C  64F7               	cpfsgt	tblptrh,c
  4042  00190E  D003               	bra	u1537
  4043  001910  0008               	tblrd		*
  4044  001912  50F5               	movf	tablat,w,c
  4045  001914  D005               	bra	u1530
  4046  001916                     u1537:
  4047  001916  CFF6 FFD9          	movff	tblptrl,fsr2l
  4048  00191A  CFF7 FFDA          	movff	tblptrh,fsr2h
  4049  00191E  50DF               	movf	indf2,w,c
  4050  001920                     u1530:
  4051  001920  ECA9  F00C         	call	_lcd_putc
  4052                           
  4053                           ;Lcd.c: 130: s++;
  4054  001924  4A36               	infsnz	lcd_puts@s,f,c
  4055  001926  2A37               	incf	lcd_puts@s+1,f,c
  4056  001928                     l332:
  4057  001928  C036  FFF6         	movff	lcd_puts@s,tblptrl
  4058  00192C  C037  FFF7         	movff	lcd_puts@s+1,tblptrh
  4059  001930  0E00               	movlw	low (__smallconst shr (0+16))
  4060  001932  6EF8               	movwf	tblptru,c
  4061  001934  0E0F               	movlw	(high __ramtop+-1)
  4062  001936  64F7               	cpfsgt	tblptrh,c
  4063  001938  D003               	bra	u1547
  4064  00193A  0008               	tblrd		*
  4065  00193C  50F5               	movf	tablat,w,c
  4066  00193E  D005               	bra	u1540
  4067  001940                     u1547:
  4068  001940  CFF6 FFD9          	movff	tblptrl,fsr2l
  4069  001944  CFF7 FFDA          	movff	tblptrh,fsr2h
  4070  001948  50DF               	movf	indf2,w,c
  4071  00194A                     u1540:
  4072  00194A  0900               	iorlw	0
  4073  00194C  B4D8               	btfsc	status,2,c
  4074  00194E  0012               	return	
  4075  001950  D7D6               	goto	l333
  4076  001952                     __end_of_lcd_puts:
  4077                           	opt stack 0
  4078                           tblptru	equ	0xFF8
  4079                           tblptrh	equ	0xFF7
  4080                           tblptrl	equ	0xFF6
  4081                           tablat	equ	0xFF5
  4082                           prodh	equ	0xFF4
  4083                           prodl	equ	0xFF3
  4084                           intcon	equ	0xFF2
  4085                           intcon2	equ	0xFF1
  4086                           intcon3	equ	0xFF0
  4087                           postinc0	equ	0xFEE
  4088                           wreg	equ	0xFE8
  4089                           postdec1	equ	0xFE5
  4090                           fsr1l	equ	0xFE1
  4091                           indf2	equ	0xFDF
  4092                           postinc2	equ	0xFDE
  4093                           postdec2	equ	0xFDD
  4094                           fsr2h	equ	0xFDA
  4095                           fsr2l	equ	0xFD9
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function _lcd_putc *****************
  4099 ;; Defined at:
  4100 ;;		line 113 in file "Lcd.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;  c               1    wreg     unsigned char 
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  c               1   52[COMRAM] unsigned char 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  1    wreg      void 
  4107 ;; Registers used:
  4108 ;;		wreg, status,2, status,0, cstack
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;Total ram usage:        1 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    7
  4121 ;; This function calls:
  4122 ;;		_delay_ms
  4123 ;;		_lcd_gotoxy
  4124 ;;		_lcd_send_byte
  4125 ;; This function is called by:
  4126 ;;		_lcd_puts
  4127 ;; This function uses a non-reentrant model
  4128 ;;
  4129                           
  4130                           	psect	text23
  4131  001952                     __ptext23:
  4132                           	opt stack 0
  4133  001952                     _lcd_putc:
  4134                           	opt stack 21
  4135                           
  4136                           ;incstack = 0
  4137                           ;lcd_putc@c stored from wreg
  4138  001952  6E35               	movwf	lcd_putc@c,c
  4139                           
  4140                           ;Lcd.c: 114: switch (c) {
  4141  001954  D01E               	goto	l323
  4142  001956  0E01               	movlw	1
  4143  001958  6E30               	movwf	lcd_send_byte@n,c
  4144  00195A  0E00               	movlw	0
  4145  00195C  ECFD  F00C         	call	_lcd_send_byte
  4146                           
  4147                           ;Lcd.c: 116: delay_ms(2);
  4148  001960  0E00               	movlw	0
  4149  001962  6E29               	movwf	delay_ms@n+1,c
  4150  001964  0E02               	movlw	2
  4151  001966  6E28               	movwf	delay_ms@n,c
  4152  001968  EC34  F00E         	call	_delay_ms	;wreg free
  4153                           
  4154                           ;Lcd.c: 117: break;
  4155  00196C  0012               	return	
  4156  00196E  0E02               	movlw	2
  4157  001970  6E32               	movwf	lcd_gotoxy@y,c
  4158  001972  0E01               	movlw	1
  4159  001974  EC42  F00D         	call	_lcd_gotoxy
  4160                           
  4161                           ;Lcd.c: 119: break;
  4162  001978  0012               	return	
  4163  00197A  0E10               	movlw	16
  4164  00197C  6E30               	movwf	lcd_send_byte@n,c
  4165  00197E  0E00               	movlw	0
  4166  001980  ECFD  F00C         	call	_lcd_send_byte
  4167                           
  4168                           ;Lcd.c: 121: break;
  4169  001984  0012               	return	
  4170  001986  C035  F030         	movff	lcd_putc@c,lcd_send_byte@n
  4171  00198A  0E01               	movlw	1
  4172  00198C  ECFD  F00C         	call	_lcd_send_byte
  4173                           
  4174                           ;Lcd.c: 124: }
  4175                           
  4176                           ;Lcd.c: 123: break;
  4177  001990  0012               	return	
  4178  001992                     l323:
  4179  001992  5035               	movf	lcd_putc@c,w,c
  4180                           
  4181                           ; Switch size 1, requested type "space"
  4182                           ; Number of cases is 3, Range of values is 8 to 12
  4183                           ; switch strategies available:
  4184                           ; Name         Instructions Cycles
  4185                           ; simple_byte           10     6 (average)
  4186                           ;	Chosen strategy is simple_byte
  4187  001994  0A08               	xorlw	8	; case 8
  4188  001996  B4D8               	btfsc	status,2,c
  4189  001998  D7F0               	goto	l327
  4190  00199A  0A02               	xorlw	2	; case 10
  4191  00199C  B4D8               	btfsc	status,2,c
  4192  00199E  D7E7               	goto	l326
  4193  0019A0  0A06               	xorlw	6	; case 12
  4194  0019A2  B4D8               	btfsc	status,2,c
  4195  0019A4  D7D8               	goto	l324
  4196  0019A6  D7EF               	goto	l328
  4197  0019A8                     __end_of_lcd_putc:
  4198                           	opt stack 0
  4199                           tblptru	equ	0xFF8
  4200                           tblptrh	equ	0xFF7
  4201                           tblptrl	equ	0xFF6
  4202                           tablat	equ	0xFF5
  4203                           prodh	equ	0xFF4
  4204                           prodl	equ	0xFF3
  4205                           intcon	equ	0xFF2
  4206                           intcon2	equ	0xFF1
  4207                           intcon3	equ	0xFF0
  4208                           postinc0	equ	0xFEE
  4209                           wreg	equ	0xFE8
  4210                           postdec1	equ	0xFE5
  4211                           fsr1l	equ	0xFE1
  4212                           indf2	equ	0xFDF
  4213                           postinc2	equ	0xFDE
  4214                           postdec2	equ	0xFDD
  4215                           fsr2h	equ	0xFDA
  4216                           fsr2l	equ	0xFD9
  4217                           status	equ	0xFD8
  4218                           
  4219 ;; *************** function _lcd_gotoxy *****************
  4220 ;; Defined at:
  4221 ;;		line 96 in file "Lcd.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;  x               1    wreg     unsigned char 
  4224 ;;  y               1   49[COMRAM] unsigned char 
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;  x               1   50[COMRAM] unsigned char 
  4227 ;;  address         1   51[COMRAM] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      void 
  4230 ;; Registers used:
  4231 ;;		wreg, status,2, status,0, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4237 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;Total ram usage:        3 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    6
  4244 ;; This function calls:
  4245 ;;		_lcd_send_byte
  4246 ;; This function is called by:
  4247 ;;		_updateAlarmDisplay
  4248 ;;		_updateClockDisplay
  4249 ;;		_updateAlarmStateDisplay
  4250 ;;		_DisplayNames
  4251 ;;		_lcd_putc
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	text24
  4256  001A84                     __ptext24:
  4257                           	opt stack 0
  4258  001A84                     _lcd_gotoxy:
  4259                           	opt stack 21
  4260                           
  4261                           ;incstack = 0
  4262                           ;lcd_gotoxy@x stored from wreg
  4263  001A84  6E33               	movwf	lcd_gotoxy@x,c
  4264                           
  4265                           ;Lcd.c: 97: unsigned char address;
  4266                           ;Lcd.c: 99: switch (y) {
  4267  001A86  D009               	goto	l314
  4268  001A88  0E80               	movlw	128
  4269  001A8A  D005               	goto	L9
  4270  001A8C  0EC0               	movlw	192
  4271  001A8E  D003               	goto	L9
  4272  001A90  0E90               	movlw	144
  4273  001A92  D001               	goto	L9
  4274  001A94  0ED0               	movlw	208
  4275  001A96                     L9:
  4276  001A96  6E34               	movwf	lcd_gotoxy@address,c
  4277                           
  4278                           ;Lcd.c: 108: }
  4279                           
  4280                           ;Lcd.c: 107: break;
  4281  001A98  D00D               	goto	l316
  4282  001A9A                     l314:
  4283  001A9A  5032               	movf	lcd_gotoxy@y,w,c
  4284                           
  4285                           ; Switch size 1, requested type "space"
  4286                           ; Number of cases is 4, Range of values is 1 to 4
  4287                           ; switch strategies available:
  4288                           ; Name         Instructions Cycles
  4289                           ; simple_byte           13     7 (average)
  4290                           ;	Chosen strategy is simple_byte
  4291  001A9C  0A01               	xorlw	1	; case 1
  4292  001A9E  B4D8               	btfsc	status,2,c
  4293  001AA0  D7F3               	goto	l315
  4294  001AA2  0A03               	xorlw	3	; case 2
  4295  001AA4  B4D8               	btfsc	status,2,c
  4296  001AA6  D7F2               	goto	l317
  4297  001AA8  0A01               	xorlw	1	; case 3
  4298  001AAA  B4D8               	btfsc	status,2,c
  4299  001AAC  D7F1               	goto	l318
  4300  001AAE  0A07               	xorlw	7	; case 4
  4301  001AB0  B4D8               	btfsc	status,2,c
  4302  001AB2  D7F0               	goto	l319
  4303  001AB4                     l316:
  4304                           
  4305                           ;Lcd.c: 109: address += x - 1;
  4306  001AB4  0433               	decf	lcd_gotoxy@x,w,c
  4307  001AB6  2634               	addwf	lcd_gotoxy@address,f,c
  4308                           
  4309                           ;Lcd.c: 110: lcd_send_byte(0, (unsigned char) (0x80 | address));
  4310  001AB8  5034               	movf	lcd_gotoxy@address,w,c
  4311  001ABA  0980               	iorlw	128
  4312  001ABC  6E30               	movwf	lcd_send_byte@n,c
  4313  001ABE  0E00               	movlw	0
  4314  001AC0  ECFD  F00C         	call	_lcd_send_byte
  4315  001AC4  0012               	return		;funcret
  4316  001AC6                     __end_of_lcd_gotoxy:
  4317                           	opt stack 0
  4318                           tblptru	equ	0xFF8
  4319                           tblptrh	equ	0xFF7
  4320                           tblptrl	equ	0xFF6
  4321                           tablat	equ	0xFF5
  4322                           prodh	equ	0xFF4
  4323                           prodl	equ	0xFF3
  4324                           intcon	equ	0xFF2
  4325                           intcon2	equ	0xFF1
  4326                           intcon3	equ	0xFF0
  4327                           postinc0	equ	0xFEE
  4328                           wreg	equ	0xFE8
  4329                           postdec1	equ	0xFE5
  4330                           fsr1l	equ	0xFE1
  4331                           indf2	equ	0xFDF
  4332                           postinc2	equ	0xFDE
  4333                           postdec2	equ	0xFDD
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338 ;; *************** function _lcd_send_byte *****************
  4339 ;; Defined at:
  4340 ;;		line 46 in file "Lcd.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;  cm_data         1    wreg     unsigned char 
  4343 ;;  n               1   47[COMRAM] unsigned char 
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;  cm_data         1   48[COMRAM] unsigned char 
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  1    wreg      void 
  4348 ;; Registers used:
  4349 ;;		wreg, status,2, status,0, cstack
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4355 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;Total ram usage:        2 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    5
  4362 ;; This function calls:
  4363 ;;		_delay_cycles
  4364 ;;		_delay_ms
  4365 ;;		_lcd_send_nibble
  4366 ;; This function is called by:
  4367 ;;		_lcd_init
  4368 ;;		_lcd_gotoxy
  4369 ;;		_lcd_putc
  4370 ;;		_Lcd_Shift_Right
  4371 ;;		_Lcd_Shift_Left
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text25
  4376  0019FA                     __ptext25:
  4377                           	opt stack 0
  4378  0019FA                     _lcd_send_byte:
  4379                           	opt stack 22
  4380                           
  4381                           ;incstack = 0
  4382                           ;lcd_send_byte@cm_data stored from wreg
  4383  0019FA  6E31               	movwf	lcd_send_byte@cm_data,c
  4384                           
  4385                           ;Lcd.c: 50: PORTEbits.RE2 = cm_data;
  4386  0019FC  B031               	btfsc	lcd_send_byte@cm_data,0,c
  4387  0019FE  D002               	bra	u1245
  4388  001A00  9484               	bcf	3972,2,c	;volatile
  4389  001A02  D001               	bra	u1246
  4390  001A04                     u1245:
  4391  001A04  8484               	bsf	3972,2,c	;volatile
  4392  001A06                     u1246:
  4393                           
  4394                           ;Lcd.c: 51: delay_cycles(1);
  4395  001A06  0E01               	movlw	1
  4396  001A08  ECF6  F00D         	call	_delay_cycles
  4397                           
  4398                           ;Lcd.c: 53: delay_cycles(1);
  4399  001A0C  0E01               	movlw	1
  4400  001A0E  ECF6  F00D         	call	_delay_cycles
  4401                           
  4402                           ;Lcd.c: 54: PORTEbits.RE1 = 0;
  4403  001A12  9284               	bcf	3972,1,c	;volatile
  4404                           
  4405                           ;Lcd.c: 55: lcd_send_nibble(n >> 4);
  4406  001A14  3830               	swapf	lcd_send_byte@n,w,c
  4407  001A16  0B0F               	andlw	15
  4408  001A18  EC6A  F00E         	call	_lcd_send_nibble
  4409                           
  4410                           ;Lcd.c: 56: lcd_send_nibble(n & 0x0f);
  4411  001A1C  5030               	movf	lcd_send_byte@n,w,c
  4412  001A1E  0B0F               	andlw	15
  4413  001A20  EC6A  F00E         	call	_lcd_send_nibble
  4414                           
  4415                           ;Lcd.c: 57: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  4416  001A24  5031               	movf	lcd_send_byte@cm_data,w,c
  4417  001A26  B4D8               	btfsc	status,2,c
  4418  001A28  D005               	goto	l302
  4419  001A2A  0E32               	movlw	50
  4420  001A2C                     u2397:
  4421  001A2C  0004               	clrwdt	
  4422  001A2E  2EE8               	decfsz	wreg,f,c
  4423  001A30  D7FD               	bra	u2397
  4424  001A32  0012               	return	
  4425  001A34                     l302:
  4426                           
  4427                           ;Lcd.c: 58: else
  4428                           ;Lcd.c: 59: delay_ms(2);
  4429  001A34  0E00               	movlw	0
  4430  001A36  6E29               	movwf	delay_ms@n+1,c
  4431  001A38  0E02               	movlw	2
  4432  001A3A  6E28               	movwf	delay_ms@n,c
  4433  001A3C  EC34  F00E         	call	_delay_ms	;wreg free
  4434  001A40  0012               	return	
  4435  001A42                     __end_of_lcd_send_byte:
  4436                           	opt stack 0
  4437                           tblptru	equ	0xFF8
  4438                           tblptrh	equ	0xFF7
  4439                           tblptrl	equ	0xFF6
  4440                           tablat	equ	0xFF5
  4441                           prodh	equ	0xFF4
  4442                           prodl	equ	0xFF3
  4443                           intcon	equ	0xFF2
  4444                           intcon2	equ	0xFF1
  4445                           intcon3	equ	0xFF0
  4446                           postinc0	equ	0xFEE
  4447                           wreg	equ	0xFE8
  4448                           postdec1	equ	0xFE5
  4449                           fsr1l	equ	0xFE1
  4450                           indf2	equ	0xFDF
  4451                           postinc2	equ	0xFDE
  4452                           postdec2	equ	0xFDD
  4453                           fsr2h	equ	0xFDA
  4454                           fsr2l	equ	0xFD9
  4455                           status	equ	0xFD8
  4456                           
  4457 ;; *************** function _lcd_send_nibble *****************
  4458 ;; Defined at:
  4459 ;;		line 36 in file "Lcd.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;  n               1    wreg     unsigned char 
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  n               1   46[COMRAM] unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  1    wreg      void 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0, cstack
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;Total ram usage:        2 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    4
  4480 ;; This function calls:
  4481 ;;		_delay_cycles
  4482 ;; This function is called by:
  4483 ;;		_lcd_send_byte
  4484 ;;		_lcd_init
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text26
  4489  001CD4                     __ptext26:
  4490                           	opt stack 0
  4491  001CD4                     _lcd_send_nibble:
  4492                           	opt stack 22
  4493                           
  4494                           ;incstack = 0
  4495                           ;lcd_send_nibble@n stored from wreg
  4496  001CD4  6E2F               	movwf	lcd_send_nibble@n,c
  4497                           
  4498                           ;Lcd.c: 38: lcd.data = n;
  4499  001CD6  C02F  F02E         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  4500  001CDA  3A2E               	swapf	??_lcd_send_nibble,f,c
  4501  001CDC  5083               	movf	3971,w,c
  4502  001CDE  182E               	xorwf	??_lcd_send_nibble,w,c
  4503  001CE0  0B0F               	andlw	-241
  4504  001CE2  182E               	xorwf	??_lcd_send_nibble,w,c
  4505  001CE4  6E83               	movwf	3971,c
  4506                           
  4507                           ;Lcd.c: 40: delay_cycles(1);
  4508  001CE6  0E01               	movlw	1
  4509  001CE8  ECF6  F00D         	call	_delay_cycles
  4510                           
  4511                           ;Lcd.c: 41: PORTEbits.RE1 = 1;
  4512  001CEC  8284               	bsf	3972,1,c	;volatile
  4513                           
  4514                           ;Lcd.c: 42: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  4515  001CEE  0004               	clrwdt	
  4516  001CF0  F000               	nop		;2 cycle nop
  4517                           
  4518                           ;Lcd.c: 43: PORTEbits.RE1 = 0;
  4519  001CF2  9284               	bcf	3972,1,c	;volatile
  4520  001CF4  0012               	return		;funcret
  4521  001CF6                     __end_of_lcd_send_nibble:
  4522                           	opt stack 0
  4523                           tblptru	equ	0xFF8
  4524                           tblptrh	equ	0xFF7
  4525                           tblptrl	equ	0xFF6
  4526                           tablat	equ	0xFF5
  4527                           prodh	equ	0xFF4
  4528                           prodl	equ	0xFF3
  4529                           intcon	equ	0xFF2
  4530                           intcon2	equ	0xFF1
  4531                           intcon3	equ	0xFF0
  4532                           postinc0	equ	0xFEE
  4533                           wreg	equ	0xFE8
  4534                           postdec1	equ	0xFE5
  4535                           fsr1l	equ	0xFE1
  4536                           indf2	equ	0xFDF
  4537                           postinc2	equ	0xFDE
  4538                           postdec2	equ	0xFDD
  4539                           fsr2h	equ	0xFDA
  4540                           fsr2l	equ	0xFD9
  4541                           status	equ	0xFD8
  4542                           
  4543 ;; *************** function _delay_cycles *****************
  4544 ;; Defined at:
  4545 ;;		line 27 in file "Lcd.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;  n               1    wreg     unsigned char 
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;  n               1   42[COMRAM] unsigned char 
  4550 ;;  x               2   43[COMRAM] int 
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  1    wreg      void 
  4553 ;; Registers used:
  4554 ;;		wreg, status,2, status,0
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4561 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;Total ram usage:        6 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; Hardware stack levels required when called:    3
  4567 ;; This function calls:
  4568 ;;		Nothing
  4569 ;; This function is called by:
  4570 ;;		_lcd_send_nibble
  4571 ;;		_lcd_send_byte
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text27
  4576  001BEC                     __ptext27:
  4577                           	opt stack 0
  4578  001BEC                     _delay_cycles:
  4579                           	opt stack 22
  4580                           
  4581                           ;incstack = 0
  4582                           ;delay_cycles@n stored from wreg
  4583  001BEC  6E2B               	movwf	delay_cycles@n,c
  4584                           
  4585                           ;Lcd.c: 28: int x;
  4586                           ;Lcd.c: 29: for (x = 0; x <= n; x++) {
  4587  001BEE  0E00               	movlw	0
  4588  001BF0  6E2D               	movwf	delay_cycles@x+1,c
  4589  001BF2  0E00               	movlw	0
  4590  001BF4  6E2C               	movwf	delay_cycles@x,c
  4591  001BF6  D003               	goto	l293
  4592  001BF8                     l294:
  4593  001BF8  0004               	clrwdt		;# 
  4594  001BFA  4A2C               	infsnz	delay_cycles@x,f,c
  4595  001BFC  2A2D               	incf	delay_cycles@x+1,f,c
  4596  001BFE                     l293:
  4597  001BFE  502B               	movf	delay_cycles@n,w,c
  4598  001C00  6E28               	movwf	??_delay_cycles& (0+255),c
  4599  001C02  6A29               	clrf	(??_delay_cycles+1)& (0+255),c
  4600  001C04  502C               	movf	delay_cycles@x,w,c
  4601  001C06  5C28               	subwf	??_delay_cycles,w,c
  4602  001C08  5029               	movf	??_delay_cycles+1,w,c
  4603  001C0A  0A80               	xorlw	128
  4604  001C0C  6E2A               	movwf	(??_delay_cycles+2)& (0+255),c
  4605  001C0E  502D               	movf	delay_cycles@x+1,w,c
  4606  001C10  0A80               	xorlw	128
  4607  001C12  582A               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  4608  001C14  A0D8               	btfss	status,0,c
  4609  001C16  0012               	return	
  4610  001C18  D7EF               	goto	l294
  4611  001C1A                     __end_of_delay_cycles:
  4612                           	opt stack 0
  4613                           tblptru	equ	0xFF8
  4614                           tblptrh	equ	0xFF7
  4615                           tblptrl	equ	0xFF6
  4616                           tablat	equ	0xFF5
  4617                           prodh	equ	0xFF4
  4618                           prodl	equ	0xFF3
  4619                           intcon	equ	0xFF2
  4620                           intcon2	equ	0xFF1
  4621                           intcon3	equ	0xFF0
  4622                           postinc0	equ	0xFEE
  4623                           wreg	equ	0xFE8
  4624                           postdec1	equ	0xFE5
  4625                           fsr1l	equ	0xFE1
  4626                           indf2	equ	0xFDF
  4627                           postinc2	equ	0xFDE
  4628                           postdec2	equ	0xFDD
  4629                           fsr2h	equ	0xFDA
  4630                           fsr2l	equ	0xFD9
  4631                           status	equ	0xFD8
  4632                           
  4633 ;; *************** function _delay_ms *****************
  4634 ;; Defined at:
  4635 ;;		line 19 in file "Lcd.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;  n               2   39[COMRAM] unsigned int 
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;  x               2   41[COMRAM] int 
  4640 ;; Return value:  Size  Location     Type
  4641 ;;                  1    wreg      void 
  4642 ;; Registers used:
  4643 ;;		wreg, status,2, status,0
  4644 ;; Tracked objects:
  4645 ;;		On entry : 0/0
  4646 ;;		On exit  : 0/0
  4647 ;;		Unchanged: 0/0
  4648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4649 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;Total ram usage:        4 bytes
  4654 ;; Hardware stack levels used:    1
  4655 ;; Hardware stack levels required when called:    3
  4656 ;; This function calls:
  4657 ;;		Nothing
  4658 ;; This function is called by:
  4659 ;;		_lcd_send_byte
  4660 ;;		_lcd_init
  4661 ;;		_lcd_putc
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text28
  4666  001C68                     __ptext28:
  4667                           	opt stack 0
  4668  001C68                     _delay_ms:
  4669                           	opt stack 23
  4670                           
  4671                           ;Lcd.c: 20: int x;
  4672                           ;Lcd.c: 21: for (x = 0; x <= n; x++) {
  4673                           
  4674                           ;incstack = 0
  4675  001C68  0E00               	movlw	0
  4676  001C6A  6E2B               	movwf	delay_ms@x+1,c
  4677  001C6C  0E00               	movlw	0
  4678  001C6E  6E2A               	movwf	delay_ms@x,c
  4679  001C70  D007               	goto	l287
  4680  001C72                     
  4681                           ;Lcd.c: 22: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
  4682  001C72  0EC8               	movlw	200
  4683  001C74                     u2407:
  4684  001C74  0004               	clrwdt	
  4685  001C76  0004               	clrwdt	
  4686  001C78  2EE8               	decfsz	wreg,f,c
  4687  001C7A  D7FC               	bra	u2407
  4688  001C7C  4A2A               	infsnz	delay_ms@x,f,c
  4689  001C7E  2A2B               	incf	delay_ms@x+1,f,c
  4690  001C80                     l287:
  4691  001C80  502A               	movf	delay_ms@x,w,c
  4692  001C82  5C28               	subwf	delay_ms@n,w,c
  4693  001C84  502B               	movf	delay_ms@x+1,w,c
  4694  001C86  5829               	subwfb	delay_ms@n+1,w,c
  4695  001C88  A0D8               	btfss	status,0,c
  4696  001C8A  0012               	return	
  4697  001C8C  D7F2               	goto	l288
  4698  001C8E                     __end_of_delay_ms:
  4699                           	opt stack 0
  4700                           tblptru	equ	0xFF8
  4701                           tblptrh	equ	0xFF7
  4702                           tblptrl	equ	0xFF6
  4703                           tablat	equ	0xFF5
  4704                           prodh	equ	0xFF4
  4705                           prodl	equ	0xFF3
  4706                           intcon	equ	0xFF2
  4707                           intcon2	equ	0xFF1
  4708                           intcon3	equ	0xFF0
  4709                           postinc0	equ	0xFEE
  4710                           wreg	equ	0xFE8
  4711                           postdec1	equ	0xFE5
  4712                           fsr1l	equ	0xFE1
  4713                           indf2	equ	0xFDF
  4714                           postinc2	equ	0xFDE
  4715                           postdec2	equ	0xFDD
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function _lowIsr *****************
  4721 ;; Defined at:
  4722 ;;		line 436 in file "DigitalClock.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;		None
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;		None
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      void 
  4729 ;; Registers used:
  4730 ;;		None
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;Total ram usage:       21 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    2
  4743 ;; This function calls:
  4744 ;;		Nothing
  4745 ;; This function is called by:
  4746 ;;		Interrupt level 1
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	intcodelo
  4751  000018                     __pintcodelo:
  4752                           	opt stack 0
  4753  000018                     _lowIsr:
  4754                           	opt stack 21
  4755                           
  4756                           ;incstack = 0
  4757  000018  8055               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4758  00001A  CFD8 F013          	movff	status,??_lowIsr
  4759  00001E  CFE8 F014          	movff	wreg,??_lowIsr+1
  4760  000022  CFE0 F015          	movff	bsr,??_lowIsr+2
  4761  000026  CFFA F016          	movff	pclath,??_lowIsr+3
  4762  00002A  CFFB F017          	movff	pclatu,??_lowIsr+4
  4763  00002E  CFE9 F018          	movff	fsr0l,??_lowIsr+5
  4764  000032  CFEA F019          	movff	fsr0h,??_lowIsr+6
  4765  000036  CFE1 F01A          	movff	fsr1l,??_lowIsr+7
  4766  00003A  CFE2 F01B          	movff	fsr1h,??_lowIsr+8
  4767  00003E  CFD9 F01C          	movff	fsr2l,??_lowIsr+9
  4768  000042  CFDA F01D          	movff	fsr2h,??_lowIsr+10
  4769  000046  CFF3 F01E          	movff	prodl,??_lowIsr+11
  4770  00004A  CFF4 F01F          	movff	prodh,??_lowIsr+12
  4771  00004E  CFF6 F020          	movff	tblptrl,??_lowIsr+13
  4772  000052  CFF7 F021          	movff	tblptrh,??_lowIsr+14
  4773  000056  CFF8 F022          	movff	tblptru,??_lowIsr+15
  4774  00005A  CFF5 F023          	movff	tablat,??_lowIsr+16
  4775  00005E  C055  F024         	movff	btemp,??_lowIsr+17
  4776  000062  C056  F025         	movff	btemp+1,??_lowIsr+18
  4777  000066  C057  F026         	movff	btemp+2,??_lowIsr+19
  4778  00006A  C058  F027         	movff	btemp+3,??_lowIsr+20
  4779  00006E  C027  F058         	movff	??_lowIsr+20,btemp+3
  4780  000072  C026  F057         	movff	??_lowIsr+19,btemp+2
  4781  000076  C025  F056         	movff	??_lowIsr+18,btemp+1
  4782  00007A  C024  F055         	movff	??_lowIsr+17,btemp
  4783  00007E  C023  FFF5         	movff	??_lowIsr+16,tablat
  4784  000082  C022  FFF8         	movff	??_lowIsr+15,tblptru
  4785  000086  C021  FFF7         	movff	??_lowIsr+14,tblptrh
  4786  00008A  C020  FFF6         	movff	??_lowIsr+13,tblptrl
  4787  00008E  C01F  FFF4         	movff	??_lowIsr+12,prodh
  4788  000092  C01E  FFF3         	movff	??_lowIsr+11,prodl
  4789  000096  C01D  FFDA         	movff	??_lowIsr+10,fsr2h
  4790  00009A  C01C  FFD9         	movff	??_lowIsr+9,fsr2l
  4791  00009E  C01B  FFE2         	movff	??_lowIsr+8,fsr1h
  4792  0000A2  C01A  FFE1         	movff	??_lowIsr+7,fsr1l
  4793  0000A6  C019  FFEA         	movff	??_lowIsr+6,fsr0h
  4794  0000AA  C018  FFE9         	movff	??_lowIsr+5,fsr0l
  4795  0000AE  C017  FFFB         	movff	??_lowIsr+4,pclatu
  4796  0000B2  C016  FFFA         	movff	??_lowIsr+3,pclath
  4797  0000B6  C015  FFE0         	movff	??_lowIsr+2,bsr
  4798  0000BA  C014  FFE8         	movff	??_lowIsr+1,wreg
  4799  0000BE  C013  FFD8         	movff	??_lowIsr,status
  4800  0000C2  9055               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4801  0000C4  0010               	retfie	
  4802  0000C6                     __end_of_lowIsr:
  4803                           	opt stack 0
  4804                           pclatu	equ	0xFFB
  4805                           pclath	equ	0xFFA
  4806                           tblptru	equ	0xFF8
  4807                           tblptrh	equ	0xFF7
  4808                           tblptrl	equ	0xFF6
  4809                           tablat	equ	0xFF5
  4810                           prodh	equ	0xFF4
  4811                           prodl	equ	0xFF3
  4812                           intcon	equ	0xFF2
  4813                           intcon2	equ	0xFF1
  4814                           intcon3	equ	0xFF0
  4815                           postinc0	equ	0xFEE
  4816                           fsr0h	equ	0xFEA
  4817                           fsr0l	equ	0xFE9
  4818                           wreg	equ	0xFE8
  4819                           postdec1	equ	0xFE5
  4820                           fsr1h	equ	0xFE2
  4821                           fsr1l	equ	0xFE1
  4822                           bsr	equ	0xFE0
  4823                           indf2	equ	0xFDF
  4824                           postinc2	equ	0xFDE
  4825                           postdec2	equ	0xFDD
  4826                           fsr2h	equ	0xFDA
  4827                           fsr2l	equ	0xFD9
  4828                           status	equ	0xFD8
  4829                           
  4830 ;; *************** function _highIsr *****************
  4831 ;; Defined at:
  4832 ;;		line 405 in file "DigitalClock.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;		None
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;		None
  4837 ;; Return value:  Size  Location     Type
  4838 ;;                  1    wreg      void 
  4839 ;; Registers used:
  4840 ;;		wreg, status,2, status,0, cstack
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;Total ram usage:       18 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    1
  4853 ;; This function calls:
  4854 ;;		i2_disableInterrupts
  4855 ;;		i2_enableInterrupts
  4856 ;; This function is called by:
  4857 ;;		Interrupt level 2
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	intcode
  4862  000008                     __pintcode:
  4863                           	opt stack 0
  4864  000008                     _highIsr:
  4865                           	opt stack 21
  4866                           
  4867                           ;incstack = 0
  4868  000008  8255               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4869  00000A  EDB0  F00B         	call	int_func,f	;refresh shadow registers
  4870                           pclatu	equ	0xFFB
  4871                           pclath	equ	0xFFA
  4872                           tblptru	equ	0xFF8
  4873                           tblptrh	equ	0xFF7
  4874                           tblptrl	equ	0xFF6
  4875                           tablat	equ	0xFF5
  4876                           prodh	equ	0xFF4
  4877                           prodl	equ	0xFF3
  4878                           intcon	equ	0xFF2
  4879                           intcon2	equ	0xFF1
  4880                           intcon3	equ	0xFF0
  4881                           postinc0	equ	0xFEE
  4882                           fsr0h	equ	0xFEA
  4883                           fsr0l	equ	0xFE9
  4884                           wreg	equ	0xFE8
  4885                           postdec1	equ	0xFE5
  4886                           fsr1h	equ	0xFE2
  4887                           fsr1l	equ	0xFE1
  4888                           bsr	equ	0xFE0
  4889                           indf2	equ	0xFDF
  4890                           postinc2	equ	0xFDE
  4891                           postdec2	equ	0xFDD
  4892                           fsr2h	equ	0xFDA
  4893                           fsr2l	equ	0xFD9
  4894                           status	equ	0xFD8
  4895                           
  4896                           	psect	intcode_body
  4897  001760                     __pintcode_body:
  4898                           	opt stack 21
  4899  001760                     int_func:
  4900                           	opt stack 21
  4901  001760  0006               	pop		; remove dummy address from shadow register refresh
  4902  001762  CFFA F001          	movff	pclath,??_highIsr
  4903  001766  CFFB F002          	movff	pclatu,??_highIsr+1
  4904  00176A  CFE9 F003          	movff	fsr0l,??_highIsr+2
  4905  00176E  CFEA F004          	movff	fsr0h,??_highIsr+3
  4906  001772  CFE1 F005          	movff	fsr1l,??_highIsr+4
  4907  001776  CFE2 F006          	movff	fsr1h,??_highIsr+5
  4908  00177A  CFD9 F007          	movff	fsr2l,??_highIsr+6
  4909  00177E  CFDA F008          	movff	fsr2h,??_highIsr+7
  4910  001782  CFF3 F009          	movff	prodl,??_highIsr+8
  4911  001786  CFF4 F00A          	movff	prodh,??_highIsr+9
  4912  00178A  CFF6 F00B          	movff	tblptrl,??_highIsr+10
  4913  00178E  CFF7 F00C          	movff	tblptrh,??_highIsr+11
  4914  001792  CFF8 F00D          	movff	tblptru,??_highIsr+12
  4915  001796  CFF5 F00E          	movff	tablat,??_highIsr+13
  4916  00179A  C055  F00F         	movff	btemp,??_highIsr+14
  4917  00179E  C056  F010         	movff	btemp+1,??_highIsr+15
  4918  0017A2  C057  F011         	movff	btemp+2,??_highIsr+16
  4919  0017A6  C058  F012         	movff	btemp+3,??_highIsr+17
  4920                           
  4921                           ;DigitalClock.c: 407: if (INTCONbits.INT0IF) {
  4922  0017AA  A2F2               	btfss	intcon,1,c	;volatile
  4923  0017AC  D00F               	goto	i2l218
  4924                           
  4925                           ;DigitalClock.c: 408: INTCONbits.INT0IF = 0;
  4926  0017AE  92F2               	bcf	intcon,1,c	;volatile
  4927                           
  4928                           ;DigitalClock.c: 410: disableInterrupts();
  4929  0017B0  ECBD  F00E         	call	i2_disableInterrupts	;wreg free
  4930                           
  4931                           ;DigitalClock.c: 411: alarm_enabled = !alarm_enabled;
  4932  0017B4  0100               	movlb	0	; () banked
  4933  0017B6  51C5               	movf	_alarm_enabled& (0+255),w,b	;volatile
  4934  0017B8  A4D8               	btfss	status,2,c
  4935  0017BA  D002               	goto	i2u233_40
  4936  0017BC  0E01               	movlw	1
  4937  0017BE  D001               	goto	i2u234_40
  4938  0017C0                     i2u233_40:
  4939  0017C0  0E00               	movlw	0
  4940  0017C2                     i2u234_40:
  4941  0017C2  6FC5               	movwf	_alarm_enabled& (0+255),b	;volatile
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;DigitalClock.c: 412: toggle_alarm_flag = 0;
  4945  0017C4  0E00               	movlw	0
  4946  0017C6  6FB9               	movwf	_toggle_alarm_flag& (0+255),b	;volatile
  4947                           
  4948                           ;DigitalClock.c: 413: enableInterrupts();
  4949  0017C8  ECBA  F00E         	call	i2_enableInterrupts	;wreg free
  4950  0017CC                     i2l218:
  4951                           
  4952                           ;DigitalClock.c: 414: }
  4953                           ;DigitalClock.c: 415: if (INTCONbits.TMR0IF) {
  4954  0017CC  A4F2               	btfss	intcon,2,c	;volatile
  4955  0017CE  D014               	goto	i2l222
  4956                           
  4957                           ;DigitalClock.c: 416: INTCONbits.TMR0IF = 0;
  4958  0017D0  94F2               	bcf	intcon,2,c	;volatile
  4959                           
  4960                           ;DigitalClock.c: 418: seconds++;
  4961  0017D2  0100               	movlb	0	; () banked
  4962  0017D4  2BC9               	incf	_seconds& (0+255),f,b
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;DigitalClock.c: 419: if (seconds >= 60) {
  4966  0017D6  0E3B               	movlw	59
  4967  0017D8  65C9               	cpfsgt	_seconds& (0+255),b
  4968  0017DA  D00E               	goto	i2l222
  4969                           
  4970                           ; BSR set to: 0
  4971                           ;DigitalClock.c: 420: seconds = 0;
  4972  0017DC  0E00               	movlw	0
  4973  0017DE  6FC9               	movwf	_seconds& (0+255),b
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;DigitalClock.c: 421: minutes++;
  4977  0017E0  2BCA               	incf	_minutes& (0+255),f,b
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;DigitalClock.c: 422: if (minutes >= 60) {
  4981  0017E2  0E3B               	movlw	59
  4982  0017E4  65CA               	cpfsgt	_minutes& (0+255),b
  4983  0017E6  D008               	goto	i2l222
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;DigitalClock.c: 423: minutes = 0;
  4987  0017E8  0E00               	movlw	0
  4988  0017EA  6FCA               	movwf	_minutes& (0+255),b
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;DigitalClock.c: 424: hours++;
  4992  0017EC  2BCB               	incf	_hours& (0+255),f,b
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;DigitalClock.c: 425: if (hours >= 24) {
  4996  0017EE  0E17               	movlw	23
  4997  0017F0  65CB               	cpfsgt	_hours& (0+255),b
  4998  0017F2  D002               	goto	i2l222
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;DigitalClock.c: 426: hours = 0;
  5002  0017F4  0E00               	movlw	0
  5003  0017F6  6FCB               	movwf	_hours& (0+255),b
  5004  0017F8                     i2l222:
  5005                           
  5006                           ; BSR set to: 0
  5007                           
  5008                           ; BSR set to: 0
  5009                           
  5010                           ; BSR set to: 0
  5011                           
  5012                           ; BSR set to: 0
  5013  0017F8  C012  F058         	movff	??_highIsr+17,btemp+3
  5014  0017FC  C011  F057         	movff	??_highIsr+16,btemp+2
  5015  001800  C010  F056         	movff	??_highIsr+15,btemp+1
  5016  001804  C00F  F055         	movff	??_highIsr+14,btemp
  5017  001808  C00E  FFF5         	movff	??_highIsr+13,tablat
  5018  00180C  C00D  FFF8         	movff	??_highIsr+12,tblptru
  5019  001810  C00C  FFF7         	movff	??_highIsr+11,tblptrh
  5020  001814  C00B  FFF6         	movff	??_highIsr+10,tblptrl
  5021  001818  C00A  FFF4         	movff	??_highIsr+9,prodh
  5022  00181C  C009  FFF3         	movff	??_highIsr+8,prodl
  5023  001820  C008  FFDA         	movff	??_highIsr+7,fsr2h
  5024  001824  C007  FFD9         	movff	??_highIsr+6,fsr2l
  5025  001828  C006  FFE2         	movff	??_highIsr+5,fsr1h
  5026  00182C  C005  FFE1         	movff	??_highIsr+4,fsr1l
  5027  001830  C004  FFEA         	movff	??_highIsr+3,fsr0h
  5028  001834  C003  FFE9         	movff	??_highIsr+2,fsr0l
  5029  001838  C002  FFFB         	movff	??_highIsr+1,pclatu
  5030  00183C  C001  FFFA         	movff	??_highIsr,pclath
  5031  001840  9255               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5032  001842  0011               	retfie		f
  5033  001844                     __end_of_highIsr:
  5034                           	opt stack 0
  5035                           pclatu	equ	0xFFB
  5036                           pclath	equ	0xFFA
  5037                           tblptru	equ	0xFF8
  5038                           tblptrh	equ	0xFF7
  5039                           tblptrl	equ	0xFF6
  5040                           tablat	equ	0xFF5
  5041                           prodh	equ	0xFF4
  5042                           prodl	equ	0xFF3
  5043                           intcon	equ	0xFF2
  5044                           intcon2	equ	0xFF1
  5045                           intcon3	equ	0xFF0
  5046                           postinc0	equ	0xFEE
  5047                           fsr0h	equ	0xFEA
  5048                           fsr0l	equ	0xFE9
  5049                           wreg	equ	0xFE8
  5050                           postdec1	equ	0xFE5
  5051                           fsr1h	equ	0xFE2
  5052                           fsr1l	equ	0xFE1
  5053                           bsr	equ	0xFE0
  5054                           indf2	equ	0xFDF
  5055                           postinc2	equ	0xFDE
  5056                           postdec2	equ	0xFDD
  5057                           fsr2h	equ	0xFDA
  5058                           fsr2l	equ	0xFD9
  5059                           status	equ	0xFD8
  5060                           
  5061 ;; *************** function i2_enableInterrupts *****************
  5062 ;; Defined at:
  5063 ;;		line 124 in file "DigitalClock.c"
  5064 ;; Parameters:    Size  Location     Type
  5065 ;;		None
  5066 ;; Auto vars:     Size  Location     Type
  5067 ;;		None
  5068 ;; Return value:  Size  Location     Type
  5069 ;;                  1    wreg      void 
  5070 ;; Registers used:
  5071 ;;		None
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5081 ;;Total ram usage:        0 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; This function calls:
  5084 ;;		Nothing
  5085 ;; This function is called by:
  5086 ;;		_highIsr
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           	psect	text31
  5091  001D74                     __ptext31:
  5092                           	opt stack 0
  5093  001D74                     i2_enableInterrupts:
  5094                           	opt stack 21
  5095                           
  5096                           ;DigitalClock.c: 125: INTCONbits.GIEH = 1;
  5097                           
  5098                           ;incstack = 0
  5099  001D74  8EF2               	bsf	intcon,7,c	;volatile
  5100                           
  5101                           ;DigitalClock.c: 126: INTCONbits.GIEL = 1;
  5102  001D76  8CF2               	bsf	intcon,6,c	;volatile
  5103  001D78  0012               	return		;funcret
  5104  001D7A                     __end_ofi2_enableInterrupts:
  5105                           	opt stack 0
  5106                           pclatu	equ	0xFFB
  5107                           pclath	equ	0xFFA
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           prodh	equ	0xFF4
  5113                           prodl	equ	0xFF3
  5114                           intcon	equ	0xFF2
  5115                           intcon2	equ	0xFF1
  5116                           intcon3	equ	0xFF0
  5117                           postinc0	equ	0xFEE
  5118                           fsr0h	equ	0xFEA
  5119                           fsr0l	equ	0xFE9
  5120                           wreg	equ	0xFE8
  5121                           postdec1	equ	0xFE5
  5122                           fsr1h	equ	0xFE2
  5123                           fsr1l	equ	0xFE1
  5124                           bsr	equ	0xFE0
  5125                           indf2	equ	0xFDF
  5126                           postinc2	equ	0xFDE
  5127                           postdec2	equ	0xFDD
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function i2_disableInterrupts *****************
  5133 ;; Defined at:
  5134 ;;		line 119 in file "DigitalClock.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;		None
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  1    wreg      void 
  5141 ;; Registers used:
  5142 ;;		None
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;Total ram usage:        0 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; This function calls:
  5155 ;;		Nothing
  5156 ;; This function is called by:
  5157 ;;		_highIsr
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           	psect	text32
  5162  001D7A                     __ptext32:
  5163                           	opt stack 0
  5164  001D7A                     i2_disableInterrupts:
  5165                           	opt stack 21
  5166                           
  5167                           ;DigitalClock.c: 120: INTCONbits.GIEH = 0;
  5168                           
  5169                           ;incstack = 0
  5170  001D7A  9EF2               	bcf	intcon,7,c	;volatile
  5171                           
  5172                           ;DigitalClock.c: 121: INTCONbits.GIEL = 0;
  5173  001D7C  9CF2               	bcf	intcon,6,c	;volatile
  5174  001D7E  0012               	return		;funcret
  5175  001D80                     __end_ofi2_disableInterrupts:
  5176                           	opt stack 0
  5177                           pclatu	equ	0xFFB
  5178                           pclath	equ	0xFFA
  5179                           tblptru	equ	0xFF8
  5180                           tblptrh	equ	0xFF7
  5181                           tblptrl	equ	0xFF6
  5182                           tablat	equ	0xFF5
  5183                           prodh	equ	0xFF4
  5184                           prodl	equ	0xFF3
  5185                           intcon	equ	0xFF2
  5186                           intcon2	equ	0xFF1
  5187                           intcon3	equ	0xFF0
  5188                           postinc0	equ	0xFEE
  5189                           fsr0h	equ	0xFEA
  5190                           fsr0l	equ	0xFE9
  5191                           wreg	equ	0xFE8
  5192                           postdec1	equ	0xFE5
  5193                           fsr1h	equ	0xFE2
  5194                           fsr1l	equ	0xFE1
  5195                           bsr	equ	0xFE0
  5196                           indf2	equ	0xFDF
  5197                           postinc2	equ	0xFDE
  5198                           postdec2	equ	0xFDD
  5199                           fsr2h	equ	0xFDA
  5200                           fsr2l	equ	0xFD9
  5201                           status	equ	0xFD8
  5202                           pclatu	equ	0xFFB
  5203                           pclath	equ	0xFFA
  5204                           tblptru	equ	0xFF8
  5205                           tblptrh	equ	0xFF7
  5206                           tblptrl	equ	0xFF6
  5207                           tablat	equ	0xFF5
  5208                           prodh	equ	0xFF4
  5209                           prodl	equ	0xFF3
  5210                           intcon	equ	0xFF2
  5211                           intcon2	equ	0xFF1
  5212                           intcon3	equ	0xFF0
  5213                           postinc0	equ	0xFEE
  5214                           fsr0h	equ	0xFEA
  5215                           fsr0l	equ	0xFE9
  5216                           wreg	equ	0xFE8
  5217                           postdec1	equ	0xFE5
  5218                           fsr1h	equ	0xFE2
  5219                           fsr1l	equ	0xFE1
  5220                           bsr	equ	0xFE0
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           postdec2	equ	0xFDD
  5224                           fsr2h	equ	0xFDA
  5225                           fsr2l	equ	0xFD9
  5226                           status	equ	0xFD8
  5227                           
  5228                           	psect	rparam
  5229  0000                     pclatu	equ	0xFFB
  5230                           pclath	equ	0xFFA
  5231                           tblptru	equ	0xFF8
  5232                           tblptrh	equ	0xFF7
  5233                           tblptrl	equ	0xFF6
  5234                           tablat	equ	0xFF5
  5235                           prodh	equ	0xFF4
  5236                           prodl	equ	0xFF3
  5237                           intcon	equ	0xFF2
  5238                           intcon2	equ	0xFF1
  5239                           intcon3	equ	0xFF0
  5240                           postinc0	equ	0xFEE
  5241                           fsr0h	equ	0xFEA
  5242                           fsr0l	equ	0xFE9
  5243                           wreg	equ	0xFE8
  5244                           postdec1	equ	0xFE5
  5245                           fsr1h	equ	0xFE2
  5246                           fsr1l	equ	0xFE1
  5247                           bsr	equ	0xFE0
  5248                           indf2	equ	0xFDF
  5249                           postinc2	equ	0xFDE
  5250                           postdec2	equ	0xFDD
  5251                           fsr2h	equ	0xFDA
  5252                           fsr2l	equ	0xFD9
  5253                           status	equ	0xFD8
  5254                           
  5255                           	psect	temp
  5256  000055                     btemp:
  5257                           	opt stack 0
  5258  000055                     	ds	1
  5259  0000                     int$flags	set	btemp
  5260  0000                     wtemp6	set	btemp+1
  5261                           pclatu	equ	0xFFB
  5262                           pclath	equ	0xFFA
  5263                           tblptru	equ	0xFF8
  5264                           tblptrh	equ	0xFF7
  5265                           tblptrl	equ	0xFF6
  5266                           tablat	equ	0xFF5
  5267                           prodh	equ	0xFF4
  5268                           prodl	equ	0xFF3
  5269                           intcon	equ	0xFF2
  5270                           intcon2	equ	0xFF1
  5271                           intcon3	equ	0xFF0
  5272                           postinc0	equ	0xFEE
  5273                           fsr0h	equ	0xFEA
  5274                           fsr0l	equ	0xFE9
  5275                           wreg	equ	0xFE8
  5276                           postdec1	equ	0xFE5
  5277                           fsr1h	equ	0xFE2
  5278                           fsr1l	equ	0xFE1
  5279                           bsr	equ	0xFE0
  5280                           indf2	equ	0xFDF
  5281                           postinc2	equ	0xFDE
  5282                           postdec2	equ	0xFDD
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8


Data Sizes:
    Strings     117
    Constant    10
    Data        4
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     80      84
    BANK0           128     57      76
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_5(CODE[4]), STR_4(CODE[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_7(CODE[21]), STR_6(CODE[22]), STR_3(CODE[18]), STR_2(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> updateClockDisplay@Buffer(BANK0[32]), updateAlarmDisplay@alarm_string(BANK0[17]), main@alarm_response(BANK0[13]), main@time_response(BANK0[9]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> STR_11(CODE[17]), STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[14]), 
		 -> updateClockDisplay@Buffer(BANK0[32]), updateAlarmDisplay@alarm_string(BANK0[17]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 13
		 -> main@alarm_response(BANK0[13]), main@time_response(BANK0[9]), STR_1(CODE[7]), 

    updateAlarmStateDisplay$648	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_10(CODE[4]), STR_9(CODE[4]), 

    main$551	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), STR_4(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _updateClockDisplay->_sprintf
    _updateAlarmStateDisplay->_lcd_puts
    _updateAlarmDisplay->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _send_string_no_lib->_send_byte_no_lib
    _lcd_init->_lcd_send_byte
    _DisplayNames->_lcd_puts
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _lowIsr in COMRAM

    None.

Critical Paths under _highIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_updateClockDisplay

Critical Paths under _lowIsr in BANK0

    None.

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _lowIsr in BANK1

    None.

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _lowIsr in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _lowIsr in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _lowIsr in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _lowIsr in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _lowIsr in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _lowIsr in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _lowIsr in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _lowIsr in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _lowIsr in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _lowIsr in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _lowIsr in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _lowIsr in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _lowIsr in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _lowIsr in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0   30619
                                             32 BANK0     25    25      0
                       _DisplayNames
                  _disableInterrupts
                   _enableInterrupts
                       _initTimers01
                     _initialization
                            _isDigit
                           _lcd_init
                   _read_byte_no_lib
                 _send_string_no_lib
                         _setupPorts
                        _setupSerial
                            _sprintf
                 _updateAlarmDisplay
            _updateAlarmStateDisplay
                 _updateClockDisplay
 ---------------------------------------------------------------------------------
 (1) _updateClockDisplay                                  32    32      0    7647
                                              0 BANK0     32    32      0
                         _lcd_gotoxy
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _updateAlarmStateDisplay                              2     2      0    4997
                                             55 COMRAM     2     2      0
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (1) _updateAlarmDisplay                                  17    17      0    7647
                                              0 BANK0     17    17      0
                         _lcd_gotoxy
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             33    21     12    2614
                                             51 COMRAM    29    17     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             39 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                             46 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                             39 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _setupSerial                                          1     1      0       2
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_string_no_lib                                   2     0      2     295
                                             40 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (2) _send_byte_no_lib                                     1     1      0      22
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_byte_no_lib                                     1     1      0      23
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1616
                                             49 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (1) _isDigit                                              3     1      2      44
                                             39 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _initialization                                       0     0      0       0
                       _reloadTimer0
 ---------------------------------------------------------------------------------
 (2) _reloadTimer0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimers01                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableInterrupts                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _disableInterrupts                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DisplayNames                                         0     0      0    4973
                         _lcd_gotoxy
                           _lcd_puts
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2    3438
                                             53 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    3013
                                             52 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1535
                                             49 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_send_byte                                        2     1      1    1084
                                             47 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (5) _lcd_send_nibble                                      2     2      0      68
                                             45 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (6) _delay_cycles                                         6     6      0      46
                                             39 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             4     2      2     350
                                             39 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _lowIsr                                              21    21      0       0
                                             18 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _highIsr                                             18    18      0       0
                                              0 COMRAM    18    18      0
                i2_disableInterrupts
                 i2_enableInterrupts
 ---------------------------------------------------------------------------------
 (10) i2_enableInterrupts                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i2_disableInterrupts                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DisplayNames
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
   _disableInterrupts
   _enableInterrupts
   _initTimers01
   _initialization
     _reloadTimer0
   _isDigit
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _read_byte_no_lib
   _send_string_no_lib
     _send_byte_no_lib
   _setupPorts
   _setupSerial
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _updateAlarmDisplay
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _updateAlarmStateDisplay
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
   _updateClockDisplay
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit

 _lowIsr (ROOT)

 _highIsr (ROOT)
   i2_disableInterrupts
   i2_enableInterrupts

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     39      4C       5       59.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     50      54       1       66.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A0      34        0.0%
DATA                 0      0      A0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jul 31 00:35:08 2023

     __end_ofi2_disableInterrupts 1D80                    ?_lcd_send_byte 0030  
                              bsr 000FE0               ___wmul@multiplicand 002A  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                       __CFG_OSC$XT 000000  
                     __CFG_LVP$ON 000000                       __CFG_WDT$ON 000000  
                             l121 10A6                               l130 11CC  
                             l122 10C8                               l203 1B68  
                             l131 116E                               l212 1CCA  
                             l124 10E0                               l141 11FC  
                             l302 1A34                               l126 10F8  
                             l151 1284                               l143 1216  
                             l135 1182                               l160 1332  
                             l128 111A                               l153 1430  
                             l145 1230                               l314 1A9A  
                             l154 12D2                               l315 1A88  
                             l323 1992                               l307 1860  
                             l163 1362                               l147 124A  
                             l139 11E4                               l316 1AB4  
                             l324 1956                               l332 1928  
                             l317 1A8C                               l333 18FE  
                             l309 1888                               l173 140A  
                             l157 1302                               l149 1264  
                             l318 1A90                               l326 196E  
                             l166 1392                               l319 1A94  
                             l327 197A                               l328 1986  
                             l273 18D2                               l353 1452  
                             l169 13C2                               l274 18A8  
                             l370 1546                               l362 14B2  
                             l354 146C                               l267 1D4C  
                             l268 1D4A                               l364 15E4  
                             l372 1580                               l356 1480  
                             l293 1BFE                               l381 15DE  
                             l357 147A                               l294 1BF8  
                             l382 160E                               l374 159A  
                             l287 1C80                               l375 158A  
                             l367 1514                               l288 1C72  
                             l368 153C                               l377 15CC  
                             l369 154A                               l810 19BE  
                             l730 1D0C                               l386 1680  
                             l378 15AC                               l387 1688  
                             l820 1A50                               l396 1730  
                             l388 16AC                               l813 19E6  
                             l397 16D8                               l814 19F0  
                             l823 1A70                               l824 1A7A  
                             l809 19C6                               l819 1A58  
                    __CFG_CPB$OFF 000000                      __CFG_CPD$OFF 000000  
                             _lcd 000F83                               prod 000FF3  
                             wreg 000FE8                       lcd_gotoxy@x 0033  
                     lcd_gotoxy@y 0032                              l2083 1880  
                            l2069 1858                              l1923 15AC  
                            l1917 158A                              l1943 162A  
                            STR_1 106E                              STR_2 1027  
                            STR_3 1036                              STR_4 107D  
                            STR_5 1079                              STR_6 100B  
                            STR_7 1021                              STR_8 1059  
                            STR_9 1075                              u1320 1A5C  
                            u1500 16D2                              u1245 1A04  
                            u1246 1A06                              u1510 1738  
                            u1520 1752                              u1440 165C  
                            u1530 1920                              u1610 18CA  
                            u1290 19CA                              u2250 13FC  
                            u1540 194A                              u1620 18F4  
                            u2260 13FE                              u2407 1C74  
                            u2280 1422                              u1537 1916  
                            u1617 18C0                              u1490 16B4  
                            u2290 1424                              u1547 1940  
                            u1627 18EA                              u1580 1876  
                            u2397 1A2C                  ?_lcd_send_nibble 0001  
 __end_of_updateAlarmStateDisplay 1B7E                  ??_initialization 0028  
                            _main 1082                  _send_byte_no_lib 1D46  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0055  
                            prodh 000FF4                              prodl 000FF3  
                            start 00C6                     __CFG_IESO$OFF 000000  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000000  
      __size_of_disableInterrupts 0006              __end_of_delay_cycles 1C1A  
      __end_of_updateClockDisplay 1B04                             ?_main 0001  
                           STR_10 1079                             STR_11 1048  
                           STR_12 1067                             _T0CON 000FD5  
                 __end_of___lwdiv 19FA                   __end_of___lwmod 1A84  
                           i2l222 17F8                             i2l218 17CC  
                           _RCREG 000FAE                             _RCSTA 000FAB  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _SPBRG 000FAF                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                   __end_of_isDigit 1CD4  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                   __end_of_highIsr 1844  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
                 __end_of_dpowers 100B                   __end_of_isdigit 1D14  
                           _hours 00CB                             main@c 00B8  
                  _capital_w_flag 00C0                             pclath 000FFA  
                           tablat 000FF5                  _enableInterrupts 1D68  
                           status 000FD8                             wtemp6 0056  
                 __end_of_sprintf 1760                    __CFG_PBADEN$ON 000000  
                 __initialization 1BB6                      __end_of_main 1448  
                 ??_lcd_send_byte 0031                            ??_main 0051  
                   __activetblptr 000003                     ?_initTimers01 0001  
            __end_of_DisplayNames 1D46                            _ADCON0 000FC2  
                          _ADCON1 000FC1        __end_ofi2_enableInterrupts 1D7A  
                          _SPBRGH 000FB0                  __end_of_delay_ms 1C8E  
                  __CFG_XINST$OFF 000000                  __end_of_lcd_init 18A6  
                __end_of_lcd_putc 19A8                  __end_of_lcd_puts 1952  
                          _a_flag 00BA                            ___wmul 1C42  
                  __CFG_STVREN$ON 000000                            _h_flag 00BD  
                       ??___lwdiv 002C                         ??___lwmod 0033  
                          _m_flag 00BC                    _start_recieved 00C4  
                          _s_flag 00BB                            clear_0 1BDC  
                          _lowIsr 0018                         ??_isDigit 002A  
                       ??_highIsr 0001                    ??_initTimers01 0028  
                    __pdataCOMRAM 0051                         ??_isdigit 0028  
                    __mediumconst 0000               send_string_no_lib@p 0029  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                _send_string_no_lib 18A6  
                    ?_setupSerial 0001                         ??_sprintf 0040  
                      __accesstop 0080           __end_of__initialization 1BE2  
             ?_send_string_no_lib 0029                 ?_read_byte_no_lib 0001  
                   ___rparam_used 000001                _updateAlarmDisplay 1B04  
              ??_read_byte_no_lib 0028                    __pcstackCOMRAM 0001  
           __size_of_delay_cycles 002E               ?_updateAlarmDisplay 0001  
            ??_send_string_no_lib 002B          __end_of_send_byte_no_lib 1D56  
                 _read_alarm_flag 00C1                 lcd_gotoxy@address 0034  
            ??_updateAlarmDisplay 0051                      sprintf@width 004E  
                      __pbssBANK0 00B9                      _delay_cycles 1BEC  
               read_byte_no_lib@c 0028                     ?_reloadTimer0 0001  
                  lcd_send_byte@n 0030                           ?___wmul 0028  
        ?_updateAlarmStateDisplay 0001                  lcd_send_nibble@n 002F  
                         ?_lowIsr 0001          __end_of_enableInterrupts 1D6E  
           __size_of_DisplayNames 0018      __size_ofi2_disableInterrupts 0006  
                         _INTCON2 000FF1                           _INTCON3 000FF0  
                       ?_delay_ms 0028                        _lcd_gotoxy 1A84  
                       ?_lcd_init 0001                         ?_lcd_putc 0001  
                       ?_lcd_puts 0036                _updateClockDisplay 1AC6  
                  ??_reloadTimer0 0028              __end_of_initTimers01 1CB2  
             ?_updateClockDisplay 0001                           __Hparam 0000  
                         __Lparam 0000          __size_of_lcd_send_nibble 0022  
                    _DisplayNames 1D2E                   __size_of___wmul 0026  
                         ___lwdiv 19A8                           ___lwmod 1A42  
                    __psmallconst 1000                           __pcinit 1BB6  
                         __ramtop 1000                   __size_of_lowIsr 00AE  
                         _isDigit 1CB2                           __ptext0 1082  
                         __ptext1 1AC6                           __ptext2 1B42  
                         __ptext3 1B04                           __ptext4 1448  
                         __ptext5 1CF6                           __ptext6 1C42  
                         __ptext7 1A42                           __ptext8 19A8  
                         __ptext9 1C1A                           _highIsr 0008  
                       _T0CONbits 000FD5                         _T1CONbits 000FCD  
                         _dpowers 1001              ??_updateClockDisplay 0051  
                         _isdigit 1CF6                         _T3CONbits 000FB1  
                         _minutes 00CA                           _seconds 00C9  
                      ??_delay_ms 002A                           _sprintf 1448  
                      ??_lcd_init 0032                    __pintcode_body 1760  
                      ??_lcd_putc 0035                        ??_lcd_puts 0038  
            end_of_initialization 1BE2              __size_of_setupSerial 0028  
                         int_func 1760              lcd_send_byte@cm_data 0031  
              i2_enableInterrupts 1D74                         _RCSTAbits 000FAB  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
         __size_of_initialization 0038             __end_of_lcd_send_byte 1A42  
                setupSerial@dummy 0028               ?i2_enableInterrupts 0001  
                       _PORTCbits 000F82                         _PORTEbits 000F84  
                      _setupPorts 1D14                         _TRISCbits 000F94  
                     ?_lcd_gotoxy 0032                   _LCD_INIT_STRING 0051  
  updateAlarmDisplay@alarm_string 0080          updateClockDisplay@Buffer 0080  
            ??i2_enableInterrupts 0001                         _TXSTAbits 000FAC  
               send_byte_no_lib@c 0028                 _toggle_alarm_flag 00B9  
                  __end_of___wmul 1C68                       _BAUDCONbits 000FB8  
                   __pidataCOMRAM 1D80                     delay_cycles@n 002B  
                   delay_cycles@x 002C                 ??_lcd_send_nibble 002E  
       __size_of_read_byte_no_lib 0008                    __end_of_lowIsr 00C6  
               ?_send_byte_no_lib 0001              __end_of_reloadTimer0 1D60  
             start_initialization 1BB6                ??_send_byte_no_lib 0028  
               main@time_response 00AD                     _alarm_enabled 00C5  
           __size_of_initTimers01 0024                     _alarm_minutes 00C7  
                   _alarm_seconds 00C6               i2_disableInterrupts 1D7A  
             __size_of_lcd_gotoxy 0042                          ??___wmul 002C  
                __CFG_LPT1OSC$OFF 000000                          ??_lowIsr 0013  
               ?_enableInterrupts 0001       __size_of_send_string_no_lib 0056  
                     ?_setupPorts 0001              ?i2_disableInterrupts 0001  
              ??_enableInterrupts 0028                      _initTimers01 1C8E  
                   __pcstackBANK0 0080  __size_of_updateAlarmStateDisplay 003C  
                    _isdigit$1321 0029                 __size_of_delay_ms 0026  
     __size_of_updateAlarmDisplay 003E                main@alarm_response 00A0  
                     _alarm_hours 00C8                 __size_of_lcd_init 0062  
                     sprintf@flag 0044                 __size_of_lcd_putc 0056  
               __size_of_lcd_puts 0056                       sprintf@prec 0047  
                ___lwdiv@dividend 0028                 __CFG_CCP2MX$PORTC 000000  
                       __pintcode 0008                    _initialization 1B7E  
                        ?___lwdiv 0028                          ?___lwmod 002F  
                     __pintcodelo 0018                          ?_isDigit 0028  
                        ?_highIsr 0001             ??i2_disableInterrupts 0001  
                     __smallconst 1000                          ?_isdigit 0001  
                ___lwdiv@quotient 002C                          ?_sprintf 0034  
                       _read_flag 00C2                    ___wmul@product 002C  
                  _read_time_flag 00C3                         delay_ms@n 0028  
                       delay_ms@x 002A               __size_of_setupPorts 001A  
                        i2u233_40 17C0                          i2u234_40 17C2  
                        _PIR1bits 000F9E            __end_of_initialization 1BB6  
                        _RCONbits 000FD0                  __CFG_WDTPS$32768 000000  
           __size_of_reloadTimer0 000A                  _read_byte_no_lib 1D60  
               ___wmul@multiplier 0028                         lcd_init@i 0032  
     __size_of_updateClockDisplay 003E                         lcd_putc@c 0035  
                       lcd_puts@s 0036                      ??_lcd_gotoxy 0033  
                   ??_setupSerial 0028                       _INTCON2bits 000FF1  
                     _INTCON3bits 000FF0                         copy_data0 1BCA  
                     _first_digit 00BE       _updateAlarmStateDisplay$648 0038  
                 _lcd_send_nibble 1CD4                      _reloadTimer0 1D56  
                        __Hrparam 0000                   ?_initialization 0001  
                        __Lrparam 0000                __CFG_BOREN$SBORDIS 000000  
              __end_of_lcd_gotoxy 1AC6                  __size_of___lwdiv 0052  
                __size_of___lwmod 0042                  __size_of_isDigit 0022  
                __size_of_highIsr 183C                        sprintf@len 004C  
                      sprintf@val 0045           _updateAlarmStateDisplay 1B42  
                __size_of_isdigit 001E                          _main$551 00B6  
                        _delay_ms 1C68                   ___lwdiv@divisor 002A  
                 ___lwdiv@counter 002E                          __ptext10 1D14  
                        __ptext11 18A6                          __ptext20 1D6E  
                        __ptext12 1D46                          __ptext21 1D2E  
                        __ptext13 1D60                          __ptext22 18FC  
                        __ptext14 1844                          __ptext31 1D74  
                        __ptext23 1952                          __ptext15 1CB2  
                        __ptext32 1D7A                          __ptext24 1A84  
                        __ptext16 1B7E                          __ptext25 19FA  
                        __ptext17 1D56                          __ptext26 1CD4  
                        __ptext18 1C8E                          __ptext27 1BEC  
                        __ptext19 1D68                          __ptext28 1C68  
                        _lcd_init 1844                          _lcd_putc 1952  
                        _lcd_puts 18FC                  __size_of_sprintf 0318  
     __size_ofi2_enableInterrupts 0006            __size_of_lcd_send_byte 0048  
                   ?_delay_cycles 0001                     __size_of_main 03C6  
       __size_of_send_byte_no_lib 0010               __end_of_setupSerial 1C42  
                        isDigit@c 002A                          int$flags 0055  
                    ??_setupPorts 0028                 _disableInterrupts 1D6E  
                    _small_w_flag 00BF                        _INTCONbits 000FF2  
              ?_disableInterrupts 0001                          isdigit@c 002A  
                        intlevel1 0000                          intlevel2 0000  
                       sprintf@ap 0048                         sprintf@cp 004A  
         __end_of_lcd_send_nibble 1CF6                         sprintf@sp 0034  
                  ??_delay_cycles 0028         __size_of_enableInterrupts 0006  
             ??_disableInterrupts 0028                  ___lwmod@dividend 002F  
              __end_of_setupPorts 1D2E                     ?_DisplayNames 0001  
      __end_of_send_string_no_lib 18FC                     _lcd_send_byte 19FA  
       __end_of_disableInterrupts 1D74         ??_updateAlarmStateDisplay 0038  
                        sprintf@c 0050                          sprintf@f 0036  
                 ___lwmod@divisor 0031                   ___lwmod@counter 0033  
      __end_of_updateAlarmDisplay 1B42                       _setupSerial 1C1A  
        __end_of_read_byte_no_lib 1D68                    ??_DisplayNames 0038  
